[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 242,
    "description": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
    "itemtype": "method",
    "name": "init",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 366,
    "description": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
    "itemtype": "method",
    "name": "destroy",
    "return": {
      "description": "receiver",
      "type": "Ember.Object"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 388,
    "description": "<p>Override to implement teardown.</p>\n",
    "itemtype": "method",
    "name": "willDestroy",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 395,
    "description": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_scheduledDestroy",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 414,
    "description": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "toString",
    "return": {
      "description": "string representation",
      "type": "String"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 478,
    "description": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
    "itemtype": "method",
    "name": "extend",
    "static": 1,
    "params": [
      {
        "name": "mixins",
        "description": "One or more Mixin classes",
        "type": "Mixin",
        "optional": true,
        "multiple": true
      },
      {
        "name": "arguments",
        "description": "Object containing values to use within the new class",
        "type": "Object",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 581,
    "description": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
    "itemtype": "method",
    "name": "createWithMixins",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 602,
    "description": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
    "itemtype": "method",
    "name": "create",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 652,
    "description": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
    "itemtype": "method",
    "name": "reopen",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 696,
    "description": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
    "itemtype": "method",
    "name": "reopenClass",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 778,
    "description": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
    "static": 1,
    "itemtype": "method",
    "name": "metaForProperty",
    "params": [
      {
        "name": "key",
        "description": "property name",
        "type": "String"
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 834,
    "description": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
    "static": 1,
    "itemtype": "method",
    "name": "eachComputedProperty",
    "params": [
      {
        "name": "callback",
        "description": "",
        "type": "Function"
      },
      {
        "name": "binding",
        "description": "",
        "type": "Object"
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 862,
    "description": "<p>Provides lookup-time type validation for injected properties.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_onLookup",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 871,
    "description": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
    "itemtype": "method",
    "name": "_lazyInjections",
    "return": {
      "description": "Hash of all lazy injected property keys to container names",
      "type": "Object"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 96,
    "description": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
    "itemtype": "method",
    "name": "nextObject",
    "params": [
      {
        "name": "index",
        "description": "the current index of the iteration",
        "type": "Number"
      },
      {
        "name": "previousObject",
        "description": "the value returned by the last call to\n  `nextObject`.",
        "type": "Object"
      },
      {
        "name": "context",
        "description": "a context object you can use to maintain state.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "the next object in the iteration or undefined",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 204,
    "description": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "contains",
    "params": [
      {
        "name": "obj",
        "description": "The object to search for.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "`true` if object is found in enumerable.",
      "type": "Boolean"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 228,
    "description": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
    "itemtype": "method",
    "name": "forEach",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "receiver",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 278,
    "description": "<p>Alias for <code>mapBy</code></p>\n",
    "itemtype": "method",
    "name": "getEach",
    "params": [
      {
        "name": "key",
        "description": "name of the property",
        "type": "String"
      }
    ],
    "return": {
      "description": "The mapped array.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 287,
    "description": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
    "itemtype": "method",
    "name": "setEach",
    "params": [
      {
        "name": "key",
        "description": "The key to set",
        "type": "String"
      },
      {
        "name": "value",
        "description": "The object to set",
        "type": "Object"
      }
    ],
    "return": {
      "description": "receiver",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 304,
    "description": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
    "itemtype": "method",
    "name": "map",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "The mapped array.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 340,
    "description": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
    "itemtype": "method",
    "name": "mapBy",
    "params": [
      {
        "name": "key",
        "description": "name of the property",
        "type": "String"
      }
    ],
    "return": {
      "description": "The mapped array.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 354,
    "description": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
    "itemtype": "method",
    "name": "mapProperty",
    "params": [
      {
        "name": "key",
        "description": "name of the property",
        "type": "String"
      }
    ],
    "return": {
      "description": "The mapped array.",
      "type": "Array"
    },
    "deprecated": true,
    "deprecationMessage": "Use `mapBy` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 366,
    "description": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
    "itemtype": "method",
    "name": "filter",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "A filtered array.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 406,
    "description": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
    "itemtype": "method",
    "name": "reject",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "A rejected array.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 438,
    "description": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
    "itemtype": "method",
    "name": "filterBy",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "*",
        "optional": true
      }
    ],
    "return": {
      "description": "filtered array",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 452,
    "description": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
    "itemtype": "method",
    "name": "filterProperty",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "filtered array",
      "type": "Array"
    },
    "deprecated": true,
    "deprecationMessage": "Use `filterBy` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 465,
    "description": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
    "itemtype": "method",
    "name": "rejectBy",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "rejected array",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 489,
    "description": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
    "itemtype": "method",
    "name": "rejectProperty",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "rejected array",
      "type": "Array"
    },
    "deprecated": true,
    "deprecationMessage": "Use `rejectBy` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 502,
    "description": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
    "itemtype": "method",
    "name": "find",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "Found item or `undefined`.",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 558,
    "description": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
    "itemtype": "method",
    "name": "findBy",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "found item or `undefined`",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 574,
    "description": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
    "itemtype": "method",
    "name": "findProperty",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "found item or `undefined`",
      "type": "Object"
    },
    "deprecated": true,
    "deprecationMessage": "Use `findBy` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 589,
    "description": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "every",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 629,
    "itemtype": "method",
    "name": "everyBy",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "deprecated": true,
    "deprecationMessage": "Use `isEvery` instead",
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 638,
    "itemtype": "method",
    "name": "everyProperty",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "deprecated": true,
    "deprecationMessage": "Use `isEvery` instead",
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 647,
    "description": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
    "itemtype": "method",
    "name": "isEvery",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "since": "1.3.0",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 661,
    "description": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "any",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "`true` if the passed function returns `true` for any item",
      "type": "Boolean"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 718,
    "description": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "some",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "target",
        "description": "The target object to use",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "`true` if the passed function returns `true` for any item",
      "type": "Boolean"
    },
    "deprecated": true,
    "deprecationMessage": "Use `any` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 756,
    "description": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
    "itemtype": "method",
    "name": "isAny",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "since": "1.3.0",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 770,
    "itemtype": "method",
    "name": "anyBy",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "deprecated": true,
    "deprecationMessage": "Use `isAny` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 779,
    "itemtype": "method",
    "name": "someProperty",
    "params": [
      {
        "name": "key",
        "description": "the property to test",
        "type": "String"
      },
      {
        "name": "value",
        "description": "optional value to test against.",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "deprecated": true,
    "deprecationMessage": "Use `isAny` instead",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 788,
    "description": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
    "itemtype": "method",
    "name": "reduce",
    "params": [
      {
        "name": "callback",
        "description": "The callback to execute",
        "type": "Function"
      },
      {
        "name": "initialValue",
        "description": "Initial value for the reduce",
        "type": "Object"
      },
      {
        "name": "reducerProperty",
        "description": "internal use only.",
        "type": "String"
      }
    ],
    "return": {
      "description": "The reduced value.",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 835,
    "description": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
    "itemtype": "method",
    "name": "invoke",
    "params": [
      {
        "name": "methodName",
        "description": "the name of the method",
        "type": "String"
      },
      {
        "name": "args",
        "description": "optional arguments to pass as well.",
        "type": "Object..."
      }
    ],
    "return": {
      "description": "return values from calling invoke.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 864,
    "description": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
    "itemtype": "method",
    "name": "toArray",
    "return": {
      "description": "the enumerable as an array.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 881,
    "description": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "compact",
    "return": {
      "description": "the array without null and undefined elements.",
      "type": "Array"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 898,
    "description": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "without",
    "params": [
      {
        "name": "value",
        "description": "",
        "type": "Object"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Enumerable"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 928,
    "description": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
    "itemtype": "method",
    "name": "uniq",
    "return": {
      "description": "",
      "type": "Ember.Enumerable"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 974,
    "description": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
    "itemtype": "method",
    "name": "addEnumerableObserver",
    "params": [
      {
        "name": "target",
        "description": "",
        "type": "Object"
      },
      {
        "name": "opts",
        "description": "",
        "type": "Hash",
        "optional": true
      }
    ],
    "return": {
      "description": "this"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 1002,
    "description": "<p>Removes a registered enumerable observer.</p>\n",
    "itemtype": "method",
    "name": "removeEnumerableObserver",
    "params": [
      {
        "name": "target",
        "description": "",
        "type": "Object"
      },
      {
        "name": "opts",
        "description": "",
        "type": "Hash",
        "optional": true
      }
    ],
    "return": {
      "description": "this"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 1041,
    "description": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
    "itemtype": "method",
    "name": "enumerableContentWillChange",
    "params": [
      {
        "name": "removing",
        "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
        "type": "Ember.Enumerable|Number"
      },
      {
        "name": "adding",
        "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
        "type": "Ember.Enumerable|Number"
      }
    ],
    "chainable": 1,
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 1093,
    "description": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
    "itemtype": "method",
    "name": "enumerableContentDidChange",
    "params": [
      {
        "name": "removing",
        "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
        "type": "Ember.Enumerable|Number"
      },
      {
        "name": "adding",
        "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
        "type": "Ember.Enumerable|Number"
      }
    ],
    "chainable": 1,
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 1147,
    "description": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
    "itemtype": "method",
    "name": "sortBy",
    "params": [
      {
        "name": "property",
        "description": "name(s) to sort on",
        "type": "String"
      }
    ],
    "return": {
      "description": "The sorted array.",
      "type": "Array"
    },
    "since": "1.2.0",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
    "line": 52,
    "description": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
    "itemtype": "method",
    "name": "addObject",
    "params": [
      {
        "name": "object",
        "description": "The object to add to the enumerable.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "the passed object",
      "type": "Object"
    },
    "class": "Ember.MutableEnumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.MutableEnumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
    "line": 68,
    "description": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
    "itemtype": "method",
    "name": "addObjects",
    "params": [
      {
        "name": "objects",
        "description": "the objects to add.",
        "type": "Ember.Enumerable"
      }
    ],
    "return": {
      "description": "receiver",
      "type": "Object"
    },
    "class": "Ember.MutableEnumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.MutableEnumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
    "line": 82,
    "description": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
    "itemtype": "method",
    "name": "removeObject",
    "params": [
      {
        "name": "object",
        "description": "The object to remove from the enumerable.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "the passed object",
      "type": "Object"
    },
    "class": "Ember.MutableEnumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.MutableEnumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
    "line": 99,
    "description": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
    "itemtype": "method",
    "name": "removeObjects",
    "params": [
      {
        "name": "objects",
        "description": "the objects to remove",
        "type": "Ember.Enumerable"
      }
    ],
    "return": {
      "description": "receiver",
      "type": "Object"
    },
    "class": "Ember.MutableEnumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.MutableEnumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js",
    "line": 19,
    "access": "private",
    "tagname": "Moves `content` to `model`  at extend time if a `model` is not also specified.\n\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
    "itemtype": "method",
    "name": "willMergeMixin",
    "since": "1.4.0",
    "class": "Ember.Copyable",
    "module": "ember",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true,
    "inheritedFrom": "Ember.Copyable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/copyable.js",
    "line": 30,
    "description": "<p>Override to return a copy of the receiver. Default implementation raises\nan exception.</p>\n",
    "itemtype": "method",
    "name": "copy",
    "params": [
      {
        "name": "deep",
        "description": "if `true`, a deep copy of the object should be made",
        "type": "Boolean"
      }
    ],
    "return": {
      "description": "copy of receiver",
      "type": "Object"
    },
    "class": "Ember.Copyable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Copyable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/copyable.js",
    "line": 40,
    "description": "<p>If the object implements <code>Ember.Freezable</code>, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.</p>\n<p>Raises an exception if you try to call this method on a object that does\nnot support freezing.</p>\n<p>You should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.</p>\n",
    "itemtype": "method",
    "name": "frozenCopy",
    "return": {
      "description": "copy of receiver or receiver",
      "type": "Object"
    },
    "class": "Ember.Copyable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Copyable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/freezable.js",
    "line": 77,
    "description": "<p>Freezes the object. Once this method has been called the object should\nno longer allow any properties to be edited.</p>\n",
    "itemtype": "method",
    "name": "freeze",
    "return": {
      "description": "receiver",
      "type": "Object"
    },
    "class": "Ember.Freezable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Freezable"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 141,
    "description": "<p>Clears the set. This is useful if you want to reuse an existing set\nwithout having to recreate it.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.length;  <span class=\"hljs-comment\">// 3</span>\ncolors.clear();\ncolors.length;  <span class=\"hljs-comment\">// 0</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "clear",
    "return": {
      "description": "An empty Set",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 182,
    "description": "<p>Returns true if the passed object is also an enumerable that contains the\nsame objects as the receiver.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>],\n    same_colors = <span class=\"hljs-keyword\">new</span> Ember.Set(colors);\n\nsame_colors.isEqual(colors);               <span class=\"hljs-comment\">// true</span>\nsame_colors.isEqual([<span class=\"hljs-string\">\"purple\"</span>, <span class=\"hljs-string\">\"brown\"</span>]);  <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "isEqual",
    "params": [
      {
        "name": "obj",
        "description": "the other object.",
        "type": "Ember.Set"
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 218,
    "description": "<p>Adds an object to the set. Only non-<code>null</code> objects can be added to a set\nand those can only be added once. If the object is already in the set or\nthe passed value is null this method will have no effect.</p>\n<p>This is an alias for <code>Ember.MutableEnumerable.addObject()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.add(<span class=\"hljs-string\">\"blue\"</span>);     <span class=\"hljs-comment\">// [\"blue\"]</span>\ncolors.add(<span class=\"hljs-string\">\"blue\"</span>);     <span class=\"hljs-comment\">// [\"blue\"]</span>\ncolors.add(<span class=\"hljs-string\">\"red\"</span>);      <span class=\"hljs-comment\">// [\"blue\", \"red\"]</span>\ncolors.add(<span class=\"hljs-literal\">null</span>);       <span class=\"hljs-comment\">// [\"blue\", \"red\"]</span>\ncolors.add(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">// [\"blue\", \"red\"]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "add",
    "params": [
      {
        "name": "obj",
        "description": "The object to add.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "The set itself.",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 240,
    "description": "<p>Removes the object from the set if it is found. If you pass a <code>null</code> value\nor an object that is already not in the set, this method will have no\neffect. This is an alias for <code>Ember.MutableEnumerable.removeObject()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.remove(<span class=\"hljs-string\">\"red\"</span>);     <span class=\"hljs-comment\">// [\"blue\", \"green\"]</span>\ncolors.remove(<span class=\"hljs-string\">\"purple\"</span>);  <span class=\"hljs-comment\">// [\"blue\", \"green\"]</span>\ncolors.remove(<span class=\"hljs-literal\">null</span>);      <span class=\"hljs-comment\">// [\"blue\", \"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "remove",
    "params": [
      {
        "name": "obj",
        "description": "The object to remove",
        "type": "Object"
      }
    ],
    "return": {
      "description": "The set itself.",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 258,
    "description": "<p>Removes the last element from the set and returns it, or <code>null</code> if it&#39;s empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.pop();  <span class=\"hljs-comment\">// \"blue\"</span>\ncolors.pop();  <span class=\"hljs-comment\">// \"green\"</span>\ncolors.pop();  <span class=\"hljs-comment\">// null</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "pop",
    "return": {
      "description": "The removed object from the set or null.",
      "type": "Object"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 281,
    "description": "<p>Inserts the given object on to the end of the set. It returns\nthe set itself.</p>\n<p>This is an alias for <code>Ember.MutableEnumerable.addObject()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.push(<span class=\"hljs-string\">\"red\"</span>);   <span class=\"hljs-comment\">// [\"red\"]</span>\ncolors.push(<span class=\"hljs-string\">\"green\"</span>); <span class=\"hljs-comment\">// [\"red\", \"green\"]</span>\ncolors.push(<span class=\"hljs-string\">\"blue\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "push",
    "return": {
      "description": "The set itself.",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 299,
    "description": "<p>Removes the last element from the set and returns it, or <code>null</code> if it&#39;s empty.</p>\n<p>This is an alias for <code>Ember.Set.pop()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.shift();  <span class=\"hljs-comment\">// \"blue\"</span>\ncolors.shift();  <span class=\"hljs-comment\">// \"green\"</span>\ncolors.shift();  <span class=\"hljs-comment\">// null</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "shift",
    "return": {
      "description": "The removed object from the set or null.",
      "type": "Object"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 316,
    "description": "<p>Inserts the given object on to the end of the set. It returns\nthe set itself.</p>\n<p>This is an alias of <code>Ember.Set.push()</code></p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.unshift(<span class=\"hljs-string\">\"red\"</span>);    <span class=\"hljs-comment\">// [\"red\"]</span>\ncolors.unshift(<span class=\"hljs-string\">\"green\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\"]</span>\ncolors.unshift(<span class=\"hljs-string\">\"blue\"</span>);   <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "unshift",
    "return": {
      "description": "The set itself.",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 334,
    "description": "<p>Adds each object in the passed enumerable to the set.</p>\n<p>This is an alias of <code>Ember.MutableEnumerable.addObjects()</code></p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.addEach([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "addEach",
    "params": [
      {
        "name": "objects",
        "description": "the objects to add.",
        "type": "Ember.Enumerable"
      }
    ],
    "return": {
      "description": "The set itself.",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/system/set.js",
    "line": 350,
    "description": "<p>Removes each object in the passed enumerable to the set.</p>\n<p>This is an alias of <code>Ember.MutableEnumerable.removeObjects()</code></p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.removeEach([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);  <span class=\"hljs-comment\">//  [\"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "removeEach",
    "params": [
      {
        "name": "objects",
        "description": "the objects to remove.",
        "type": "Ember.Enumerable"
      }
    ],
    "return": {
      "description": "The set itself.",
      "type": "Ember.Set"
    },
    "class": "Ember.Set",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  }
]