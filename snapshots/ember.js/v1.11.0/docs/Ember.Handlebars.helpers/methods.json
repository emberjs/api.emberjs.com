[
  {
    "file": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
    "line": 22,
    "description": "<p><code>bind-attr</code> allows you to create a binding between DOM element attributes and\nEmber objects. For example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">src</span>=<span class=\"hljs-variable\">imageUrl</span> <span class=\"hljs-variable\">alt</span>=<span class=\"hljs-variable\">imageTitle</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>The above handlebars template will fill the <code>&lt;img&gt;</code>&#39;s <code>src</code> attribute with\nthe value of the property referenced with <code>imageUrl</code> and its <code>alt</code>\nattribute with the value of the property referenced with <code>imageTitle</code>.</p>\n<p>If the rendering context of this template is the following object:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{\n  imageUrl: <span class=\"hljs-string\">'http://lolcats.info/haz-a-funny'</span>,\n  imageTitle: <span class=\"hljs-string\">'A humorous image of a cat'</span>\n}</pre></td>      </tr>    </table>  </div></div><p>The resulting HTML output will be:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"http://lolcats.info/haz-a-funny\"</span> <span class=\"hljs-attribute\">alt</span>=<span class=\"hljs-value\">\"A humorous image of a cat\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p><code>bind-attr</code> cannot redeclare existing DOM element attributes. The use of <code>src</code>\nin the following <code>bind-attr</code> example will be ignored and the hard coded value\nof <code>src=&quot;/failwhale.gif&quot;</code> will take precedence:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"/failwhale.gif\"</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">src</span>=<span class=\"hljs-variable\">imageUrl</span> <span class=\"hljs-variable\">alt</span>=<span class=\"hljs-variable\">imageTitle</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-bind-attr-and-the-class-attribute\"><code>bind-attr</code> and the <code>class</code> attribute</h3>\n<p><code>bind-attr</code> supports a special syntax for handling a number of cases unique\nto the <code>class</code> DOM element attribute. The <code>class</code> attribute combines\nmultiple discrete values into a single attribute as a space-delimited\nlist of strings. Each string can be:</p>\n<ul>\n<li>a string return value of an object&#39;s property.</li>\n<li>a boolean return value of an object&#39;s property</li>\n<li>a hard-coded value</li>\n</ul>\n<p>A string return value works identically to other uses of <code>bind-attr</code>. The\nreturn value of the property will become the value of the attribute. For\nexample, the following view and template:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  AView = View.extend({\n    someProperty: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"aValue\"</span>;\n    }.property()\n  })</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.someProperty</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Result in the following rendered output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"aValue\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>A boolean return value will insert a specified class name if the property\nreturns <code>true</code> and remove the class name if the property returns <code>false</code>.</p>\n<p>A class name is provided via the syntax\n<code>somePropertyName:class-name-if-true</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = View.extend({\n  someBool: <span class=\"hljs-literal\">true</span>\n})</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\"view.someBool:class-name-if-true\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Result in the following rendered output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"class-name-if-true\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>An additional section of the binding can be provided if you want to\nreplace the existing class instead of removing it when the boolean\nvalue changes:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\"view.someBool:class-name-if-true:class-name-if-false\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>A hard-coded value can be used by prepending <code>:</code> to the desired\nclass name: <code>:class-name-to-always-apply</code>.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\":class-name-to-always-apply\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Results in the following rendered output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"class-name-to-always-apply\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>All three strategies - string return value, boolean return value, and\nhard-coded value – can be combined in a single declaration:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "bind-attr",
    "params": [
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
    "line": 212,
    "description": "<p>See <code>bind-attr</code></p>\n",
    "itemtype": "method",
    "name": "bindAttr",
    "deprecated": true,
    "params": [
      {
        "name": "context",
        "description": "",
        "type": "Function"
      },
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/collection.js",
    "line": 18,
    "description": "<p><code>{{collection}}</code> is a <code>Ember.Handlebars</code> helper for adding instances of\n<code>Ember.CollectionView</code> to a template. See <a href=\"/api/classes/Ember.CollectionView.html\">Ember.CollectionView</a>\n for additional information on how a <code>CollectionView</code> functions.</p>\n<p><code>{{collection}}</code>&#39;s primary use is as a block helper with a <code>contentBinding</code>\noption pointing towards an <code>Ember.Array</code>-compatible object. An <code>Ember.View</code>\ninstance will be created for each item in its <code>content</code> property. Each view\nwill have its own <code>content</code> property set to the appropriate item in the\ncollection.</p>\n<p>The provided block will be applied as the template for each item&#39;s view.</p>\n<p>Given an empty <code>&lt;body&gt;</code> the following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">collection</span> content</span>=<span class=\"hljs-variable\">model</span>}}</span><span class=\"xml\">\n  Hi </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.content.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">collection</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>And the following application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.ApplicationRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> [{name: <span class=\"hljs-string\">'Yehuda'</span>},{name: <span class=\"hljs-string\">'Tom'</span>},{name: <span class=\"hljs-string\">'Peter'</span>}];\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The following HTML will result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hi Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hi Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hi Peter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"non-block-version-of-collection\">Non-block version of collection</h3>\n<p>If you provide an <code>itemViewClass</code> option that has its own <code>template</code> you may\nomit the block.</p>\n<p>The following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">collection</span></span> <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">model</span> <span class=\"hljs-variable\">itemViewClass</span>=<span class=\"hljs-string\">\"an-item\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>And application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.ApplicationRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> [{name: <span class=\"hljs-string\">'Yehuda'</span>},{name: <span class=\"hljs-string\">'Tom'</span>},{name: <span class=\"hljs-string\">'Peter'</span>}];\n  }\n});\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"Greetings {{view.content.name}}\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in the HTML structure below</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Greetings Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Greetings Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Greetings Peter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-a-collectionview-subclass\">Specifying a CollectionView subclass</h3>\n<p>By default the <code>{{collection}}</code> helper will create an instance of\n<code>Ember.CollectionView</code>. You can supply a <code>Ember.CollectionView</code> subclass to\nthe helper by passing it as the first argument:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">collection</span> </span><span class=\"hljs-string\">\"my-custom-collection\"</span> <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">model</span>}}</span><span class=\"xml\">\n  Hi </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.content.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">collection</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>This example would look for the class <code>App.MyCustomCollection</code>.</p>\n<h3 id=\"forwarded-item-named-options\">Forwarded <code>item.*</code>-named Options</h3>\n<p>As with the <code>{{view}}</code>, helper options passed to the <code>{{collection}}</code> will be\nset on the resulting <code>Ember.CollectionView</code> as properties. Additionally,\noptions prefixed with <code>item</code> will be applied to the views rendered for each\nitem (note the camelcasing):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">collection</span> content</span>=<span class=\"hljs-variable\">model</span>\n              <span class=\"hljs-variable\">itemTagName</span>=<span class=\"hljs-string\">\"p\"</span>\n              <span class=\"hljs-variable\">itemClassNames</span>=<span class=\"hljs-string\">\"greeting\"</span>}}</span><span class=\"xml\">\n  Howdy </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.content.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">collection</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view greeting\"</span>&gt;</span>Howdy Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view greeting\"</span>&gt;</span>Howdy Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view greeting\"</span>&gt;</span>Howdy Peter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "collection",
    "deprecated": true,
    "deprecationMessage": "Use `{{each}}` helper instead.",
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/component.js",
    "line": 13,
    "description": "<p>The <code>{{component}}</code> helper lets you add instances of <code>Ember.Component</code> to a\ntemplate. See <a href=\"/api/classes/Ember.Component.html\">Ember.Component</a> for\nadditional information on how a <code>Component</code> functions.</p>\n<p><code>{{component}}</code>&#39;s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges.</p>\n<p>The provided block will be applied as the template for the component.</p>\n<p>Given an empty <code>&lt;body&gt;</code> the following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">component</span> <span class=\"hljs-variable\">infographicComponentName</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>And the following application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.ApplicationController = Ember.Controller.extend({\n  infographicComponentName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isMarketOpen'</span>)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"live-updating-chart\"</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"market-close-summary\"</span>;\n    }\n  }.property(<span class=\"hljs-string\">'isMarketOpen'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>live-updating-chart</code> component will be appended when <code>isMarketOpen</code> is\n<code>true</code>, and the <code>market-close-summary</code> component will be appended when\n<code>isMarketOpen</code> is <code>false</code>. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.</p>\n<p>Note: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">live-updating-chart</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "component",
    "since": "1.11.0",
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/debugger.js",
    "line": 9,
    "description": "<p>Execute the <code>debugger</code> statement in the current template&#39;s context.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">debugger</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>When using the debugger helper you will have access to a <code>get</code> function. This\nfunction retrieves values available in the context of the template.</p>\n<p>For example, if you&#39;re wondering why a value <code>{{foo}}</code> isn&#39;t rendering as\nexpected within a template, you could place a <code>{{debugger}}</code> statement and,\nwhen the <code>debugger;</code> breakpoint is hit, you can attempt to retrieve this value:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">&gt; get(<span class=\"hljs-string\">'foo'</span>)</pre></td>      </tr>    </table>  </div></div><p><code>get</code> is also aware of keywords. So in this situation</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> items as </span>|<span class=\"hljs-variable\">item</span>|}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">debugger</span></span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>you&#39;ll be able to get values from the current item:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">&gt; get(<span class=\"hljs-string\">'item.name'</span>)</pre></td>      </tr>    </table>  </div></div><p>You can also access the context of the view to make sure it is the object that\nyou expect:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">&gt; context</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "debugger",
    "params": [
      {
        "name": "property",
        "description": "",
        "type": "String"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/each.js",
    "line": 9,
    "description": "<p>The <code>{{#each}}</code> helper loops over elements in a collection. It is an extension\nof the base Handlebars <code>{{#each}}</code> helper.</p>\n<p>The default behavior of <code>{{#each}}</code> is to yield its inner block once for every\nitem in an array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> developers = [{name: <span class=\"hljs-string\">'Yehuda'</span>},{name: <span class=\"hljs-string\">'Tom'</span>}, {name: <span class=\"hljs-string\">'Paul'</span>}];</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> developers</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.name</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{! `<span class=\"hljs-variable\">this</span>` <span class=\"hljs-variable\">is</span> <span class=\"hljs-variable\">whatever</span> <span class=\"hljs-variable\">it</span> <span class=\"hljs-variable\">was</span> <span class=\"hljs-variable\">outside</span> <span class=\"hljs-variable\">the</span> <span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> </span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The same rules apply to arrays of primitives, but the items may need to be\nreferences with <code>{{this}}</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> developerNames = [<span class=\"hljs-string\">'Yehuda'</span>, <span class=\"hljs-string\">'Tom'</span>, <span class=\"hljs-string\">'Paul'</span>]</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> name <span class=\"hljs-keyword\">in</span> developerNames</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-else-condition\">{{else}} condition</h3>\n<p><code>{{#each}}</code> can have a matching <code>{{else}}</code>. The contents of this block will render\nif the collection is empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{{#each person in developers}}\n  {{person.name}}\n{{else}}\n  &lt;p&gt;Sorry, nobody is available for this task.&lt;/p&gt;\n{{/each}}</pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-an-alternative-view-for-each-item\">Specifying an alternative view for each item</h3>\n<p><code>itemViewClass</code> can control which view will be used during the render of each\nitem&#39;s template.</p>\n<p>The following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> developer <span class=\"hljs-keyword\">in</span> developers itemViewClass</span>=<span class=\"hljs-string\">\"person\"</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">developer.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Will use the following view for each item</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Resulting in HTML output that looks like the following:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Paul<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p><code>itemViewClass</code> also enables a non-block form of <code>{{each}}</code>. The view\nmust {{#crossLink &quot;Ember.View/toc_templates&quot;}}provide its own template{{/crossLink}},\nand then the block should be dropped. An example that outputs the same HTML\nas the previous one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  template: <span class=\"hljs-string\">'{{developer.name}}'</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">each</span></span> <span class=\"hljs-variable\">developer</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">in</span></span> <span class=\"hljs-variable\">developers</span> <span class=\"hljs-variable\">itemViewClass</span>=<span class=\"hljs-string\">\"person\"</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-an-alternative-view-for-no-items-else-\">Specifying an alternative view for no items (else)</h3>\n<p>The <code>emptyViewClass</code> option provides the same flexibility to the <code>{{else}}</code>\ncase of the each helper.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NoPeopleView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  template: <span class=\"hljs-string\">'No person is available, sorry'</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> developer <span class=\"hljs-keyword\">in</span> developers emptyViewClass</span>=<span class=\"hljs-string\">\"no-people\"</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">developer.name</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"wrapping-each-item-in-a-controller\">Wrapping each item in a controller</h3>\n<p>Controllers in Ember manage state and decorate data. In many cases,\nproviding a controller for each item in a list can be useful.\nSpecifically, an {{#crossLink &quot;Ember.ObjectController&quot;}}Ember.ObjectController{{/crossLink}}\nshould probably be used. Item controllers are passed the item they\nwill present as a <code>model</code> property, and an object controller will\nproxy property lookups to <code>model</code> for us.</p>\n<p>This allows state and decoration to be added to the controller\nwhile any other property lookups are delegated to the model. An example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.RecruitController = Ember.ObjectController.extend({\n  isAvailableForHire: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isEmployed'</span>) &amp;&amp; <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isSeekingWork'</span>);\n  }.property(<span class=\"hljs-string\">'isEmployed'</span>, <span class=\"hljs-string\">'isSeekingWork'</span>)\n})</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> developers itemController</span>=<span class=\"hljs-string\">\"recruit\"</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.name</span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">if</span> person.isAvailableForHire</span>}}</span><span class=\"xml\">Hire me!</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">if</span></span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "each",
    "params": [
      {
        "name": "name",
        "description": "name for item (used with `in`)",
        "type": "String",
        "optional": true
      },
      {
        "name": "path",
        "description": "path",
        "type": "String",
        "optional": true
      },
      {
        "name": "options",
        "description": "Handlebars key/value pairs of options",
        "type": "Object",
        "optional": true,
        "props": [
          {
            "name": "itemViewClass",
            "description": "a path to a view class used for each item",
            "type": "String",
            "optional": true
          },
          {
            "name": "emptyViewClass",
            "description": "a path to a view class used for each item",
            "type": "String",
            "optional": true
          },
          {
            "name": "itemController",
            "description": "name of a controller to be created for each item",
            "type": "String",
            "optional": true
          }
        ]
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/if_unless.js",
    "line": 14,
    "itemtype": "method",
    "name": "if",
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars",
    "description": ""
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/if_unless.js",
    "line": 23,
    "itemtype": "method",
    "name": "unless",
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars",
    "description": ""
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/input.js",
    "line": 12,
    "description": "<p>The <code>{{input}}</code> helper inserts an HTML <code>&lt;input&gt;</code> tag into the template,\n  with a <code>type</code> value of either <code>text</code> or <code>checkbox</code>. If no <code>type</code> is provided,\n  <code>text</code> will be the default value applied. The attributes of <code>{{input}}</code>\n  match those of the native HTML tag as closely as possible for these two types.</p>\n<h2 id=\"use-as-text-field\">Use as text field</h2>\n<p>  An <code>{{input}}</code> with no <code>type</code> or a <code>type</code> of <code>text</code> will render an HTML text input.\n  The following HTML attributes can be set via the helper:</p>\n <table>\n  <tr><td><code>readonly</code></td><td><code>required</code></td><td><code>autofocus</code></td></tr>\n  <tr><td><code>value</code></td><td><code>placeholder</code></td><td><code>disabled</code></td></tr>\n  <tr><td><code>size</code></td><td><code>tabindex</code></td><td><code>maxlength</code></td></tr>\n  <tr><td><code>name</code></td><td><code>min</code></td><td><code>max</code></td></tr>\n  <tr><td><code>pattern</code></td><td><code>accept</code></td><td><code>autocomplete</code></td></tr>\n  <tr><td><code>autosave</code></td><td><code>formaction</code></td><td><code>formenctype</code></td></tr>\n  <tr><td><code>formmethod</code></td><td><code>formnovalidate</code></td><td><code>formtarget</code></td></tr>\n  <tr><td><code>height</code></td><td><code>inputmode</code></td><td><code>multiple</code></td></tr>\n  <tr><td><code>step</code></td><td><code>width</code></td><td><code>form</code></td></tr>\n  <tr><td><code>selectionDirection</code></td><td><code>spellcheck</code></td><td>&nbsp;</td></tr>\n </table>\n\n<p>When set to a quoted string, these values will be directly applied to the HTML\n  element. When left unquoted, these values will be bound to a property on the\n  template&#39;s current rendering context (most typically a controller instance).</p>\n<h2 id=\"unbound-\">Unbound:</h2>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-string\">\"http://www.facebook.com\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"http://www.facebook.com\"</span>/&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"bound-\">Bound:</h2>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  App.ApplicationController = Ember.Controller.extend({\n    firstName: <span class=\"hljs-string\">\"Stanley\"</span>,\n    entryNotAllowed: <span class=\"hljs-literal\">true</span>\n  });</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">firstName</span> <span class=\"hljs-variable\">disabled</span>=<span class=\"hljs-variable\">entryNotAllowed</span> <span class=\"hljs-variable\">size</span>=<span class=\"hljs-string\">\"50\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Stanley\"</span> <span class=\"hljs-attribute\">disabled</span>=<span class=\"hljs-value\">\"disabled\"</span> <span class=\"hljs-attribute\">size</span>=<span class=\"hljs-value\">\"50\"</span>/&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"actions\">Actions</h2>\n<p>The helper can send multiple actions based on user events.\nThe action property defines the action which is sent when\n  the user presses the return key.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"submit\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The helper allows some user events to send actions.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-press</code></li>\n</ul>\n<p>For example, if you desire an action to be sent when the input is blurred,\n  you only need to setup the action name to the event name property.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">focus-<span class=\"hljs-keyword\">in</span></span>=<span class=\"hljs-string\">\"alertMessage\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>See more about <a href=\"/api/classes/Ember.TextField.html\">Text Support Actions</a></p>\n<h2 id=\"extension\">Extension</h2>\n<p>Internally, <code>{{input type=&quot;text&quot;}}</code> creates an instance of <code>Ember.TextField</code>, passing\n  arguments from the helper to <code>Ember.TextField</code>&#39;s <code>create</code> method. You can extend the\n  capabilities of text inputs in your applications by reopening this class. For example,\n  if you are building a Bootstrap project where <code>data-*</code> attributes are used, you\n  can add one to the <code>TextField</code>&#39;s <code>attributeBindings</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  Ember.TextField.reopen({\n    attributeBindings: [<span class=\"hljs-string\">'data-error'</span>]\n  });</pre></td>      </tr>    </table>  </div></div><p>Keep in mind when writing <code>Ember.TextField</code> subclasses that <code>Ember.TextField</code>\n  itself extends <code>Ember.Component</code>, meaning that it does NOT inherit\n  the <code>controller</code> of the parent view.\nSee more about <a href=\"/api/classes/Ember.Component.html\">Ember components</a></p>\n<h2 id=\"use-as-checkbox\">Use as checkbox</h2>\n<p>An <code>{{input}}</code> with a <code>type</code> of <code>checkbox</code> will render an HTML checkbox input.\n  The following HTML attributes can be set via the helper:</p>\n<ul>\n<li><code>checked</code></li>\n<li><code>disabled</code></li>\n<li><code>tabindex</code></li>\n<li><code>indeterminate</code></li>\n<li><code>name</code></li>\n<li><code>autofocus</code></li>\n<li><code>form</code></li>\n</ul>\n<p>When set to a quoted string, these values will be directly applied to the HTML\n  element. When left unquoted, these values will be bound to a property on the\n  template&#39;s current rendering context (most typically a controller instance).</p>\n<h2 id=\"unbound-\">Unbound:</h2>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-variable\">name</span>=<span class=\"hljs-string\">\"isAdmin\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"checkbox\"</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"isAdmin\"</span> /&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"bound-\">Bound:</h2>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  App.ApplicationController = Ember.Controller.extend({\n    isAdmin: <span class=\"hljs-literal\">true</span>\n  });</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-variable\">checked</span>=<span class=\"hljs-variable\">isAdmin</span> }}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"checkbox\"</span> <span class=\"hljs-attribute\">checked</span>=<span class=\"hljs-value\">\"checked\"</span> /&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"extension\">Extension</h2>\n<p>Internally, <code>{{input type=&quot;checkbox&quot;}}</code> creates an instance of <code>Ember.Checkbox</code>, passing\n  arguments from the helper to <code>Ember.Checkbox</code>&#39;s <code>create</code> method. You can extend the\n  capablilties of checkbox inputs in your applications by reopening this class. For example,\n  if you wanted to add a css class to all checkboxes in your application:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  Ember.Checkbox.reopen({\n    classNames: [<span class=\"hljs-string\">'my-app-checkbox'</span>]\n  });</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "input",
    "params": [
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/loc.js",
    "line": 10,
    "description": "<p>Calls <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a> with the\nprovided string.</p>\n<p>This is a convenient way to localize text within a template:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.STRINGS = {\n  <span class=\"hljs-string\">'_welcome_'</span>: <span class=\"hljs-string\">'Bonjour'</span>\n};</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'message'</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">loc</span> '_<span class=\"hljs-variable\">welcome</span>_'}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'message'</span>&gt;</span>\n  Bonjour\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>See <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a> for how to\nset up localized string references.</p>\n",
    "itemtype": "method",
    "name": "loc",
    "params": [
      {
        "name": "str",
        "description": "The string to format",
        "type": "String"
      }
    ],
    "see": [
      "{Ember.String#loc}"
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/log.js",
    "line": 8,
    "description": "<p><code>log</code> allows you to output the value of variables in the current rendering\ncontext. <code>log</code> also accepts primitive types such as strings or numbers.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">log</span></span> <span class=\"hljs-string\">\"myVariable:\"</span> <span class=\"hljs-variable\">myVariable</span> }}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "log",
    "params": [
      {
        "name": "property",
        "description": "",
        "type": "String"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/partial.js",
    "line": 11,
    "description": "<p>The <code>partial</code> helper renders another template without\nchanging the template context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">foo</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">partial</span> <span class=\"hljs-string\">\"nav\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The above example template will render a template named\n&quot;_nav&quot;, which has the same context as the parent template\nit&#39;s rendered into, so if the &quot;_nav&quot; template also referenced\n<code>{{foo}}</code>, it would print the same thing as the <code>{{foo}}</code>\nin the above example.</p>\n<p>If a &quot;_nav&quot; template isn&#39;t found, the <code>partial</code> helper will\nfall back to a template named &quot;nav&quot;.</p>\n<h2 id=\"bound-template-names\">Bound template names</h2>\n<p>The parameter supplied to <code>partial</code> can also be a path\nto a property containing a template name, e.g.:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">partial</span> <span class=\"hljs-variable\">someTemplateName</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The above example will look up the value of <code>someTemplateName</code>\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If <code>someTemplateName</code>\nchanges, the partial will be re-rendered using the new template\nname.</p>\n",
    "itemtype": "method",
    "name": "partial",
    "params": [
      {
        "name": "partialName",
        "description": "the name of the template to render minus the leading underscore",
        "type": "String"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/template.js",
    "line": 8,
    "deprecated": true,
    "itemtype": "method",
    "name": "template",
    "params": [
      {
        "name": "templateName",
        "description": "the template to render",
        "type": "String"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars",
    "description": ""
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/text_area.js",
    "line": 9,
    "description": "<p><code>{{textarea}}</code> inserts a new instance of <code>&lt;textarea&gt;</code> tag into the template.\nThe attributes of <code>{{textarea}}</code> match those of the native HTML tags as\nclosely as possible.</p>\n<p>The following HTML attributes can be set:</p>\n<ul>\n<li><code>value</code></li>\n<li><code>name</code></li>\n<li><code>rows</code></li>\n<li><code>cols</code></li>\n<li><code>placeholder</code></li>\n<li><code>disabled</code></li>\n<li><code>maxlength</code></li>\n<li><code>tabindex</code></li>\n<li><code>selectionEnd</code></li>\n<li><code>selectionStart</code></li>\n<li><code>selectionDirection</code></li>\n<li><code>wrap</code></li>\n<li><code>readonly</code></li>\n<li><code>autofocus</code></li>\n<li><code>form</code></li>\n<li><code>spellcheck</code></li>\n<li><code>required</code></li>\n</ul>\n<p>When set to a quoted string, these value will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate&#39;s current rendering context (most typically a controller instance).</p>\n<p>Unbound:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-string\">\"Lots of static text that ISN'T bound\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of static text that ISN'T bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Bound:</p>\n<p>In the following example, the <code>writtenWords</code> property on <code>App.ApplicationController</code>\nwill be updated live as the user types &#39;Lots of text that IS bound&#39; into\nthe text area of their browser&#39;s window.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: <span class=\"hljs-string\">\"Lots of text that IS bound\"</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">writtenWords</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p> Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>If you wanted a one way binding between the text area and a div tag\nsomewhere else on your screen, you could use <code>Ember.computed.oneWay</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: <span class=\"hljs-string\">\"Lots of text that IS bound\"</span>,\n  outputWrittenWords: Ember.computed.oneWay(<span class=\"hljs-string\">\"writtenWords\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">writtenWords</span>}}</span><span class=\"xml\">\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">outputWrittenWords</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">--</span> <span class=\"hljs-attribute\">the</span> <span class=\"hljs-attribute\">following</span> <span class=\"hljs-attribute\">div</span> <span class=\"hljs-attribute\">will</span> <span class=\"hljs-attribute\">be</span> <span class=\"hljs-attribute\">updated</span> <span class=\"hljs-attribute\">in</span> <span class=\"hljs-attribute\">real</span> <span class=\"hljs-attribute\">time</span> <span class=\"hljs-attribute\">as</span> <span class=\"hljs-attribute\">you</span> <span class=\"hljs-attribute\">type</span> <span class=\"hljs-attribute\">--</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Finally, this example really shows the power and ease of Ember when two\nproperties are bound to eachother via <code>Ember.computed.alias</code>. Type into\neither text area box and they&#39;ll both stay in sync. Note that\n<code>Ember.computed.alias</code> costs more in terms of performance, so only use it when\nyour really binding in both directions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: <span class=\"hljs-string\">\"Lots of text that IS bound\"</span>,\n  twoWayWrittenWords: Ember.computed.alias(<span class=\"hljs-string\">\"writtenWords\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">writtenWords</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">twoWayWrittenWords</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">--</span> <span class=\"hljs-attribute\">both</span> <span class=\"hljs-attribute\">updated</span> <span class=\"hljs-attribute\">in</span> <span class=\"hljs-attribute\">real</span> <span class=\"hljs-attribute\">time</span> <span class=\"hljs-attribute\">--</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"actions\">Actions</h2>\n<p>The helper can send multiple actions based on user events.</p>\n<p>The action property defines the action which is send when\nthe user presses the return key.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"submit\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The helper allows some user events to send actions.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-press</code></li>\n</ul>\n<p>For example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">focus-<span class=\"hljs-keyword\">in</span></span>=<span class=\"hljs-string\">\"alertMessage\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>See more about <a href=\"/api/classes/Ember.TextArea.html\">Text Support Actions</a></p>\n<h2 id=\"extension\">Extension</h2>\n<p>Internally, <code>{{textarea}}</code> creates an instance of <code>Ember.TextArea</code>, passing\narguments from the helper to <code>Ember.TextArea</code>&#39;s <code>create</code> method. You can\nextend the capabilities of text areas in your application by reopening this\nclass. For example, if you are building a Bootstrap project where <code>data-*</code>\nattributes are used, you can globally add support for a <code>data-*</code> attribute\non all <code>{{textarea}}</code>s&#39; in your app by reopening <code>Ember.TextArea</code> or\n<code>Ember.TextSupport</code> and adding it to the <code>attributeBindings</code> concatenated\nproperty:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.TextArea.reopen({\n  attributeBindings: [<span class=\"hljs-string\">'data-error'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>Keep in mind when writing <code>Ember.TextArea</code> subclasses that <code>Ember.TextArea</code>\nitself extends <code>Ember.Component</code>, meaning that it does NOT inherit\nthe <code>controller</code> of the parent view.</p>\n<p>See more about <a href=\"/api/classes/Ember.Component.html\">Ember components</a></p>\n",
    "itemtype": "method",
    "name": "textarea",
    "params": [
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/unbound.js",
    "line": 11,
    "description": "<p><code>unbound</code> allows you to output a property without binding. <em>Important:</em> The\noutput will not be updated if the property changes. Use with caution.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">unbound</span></span> <span class=\"hljs-variable\">somePropertyThatDoesntChange</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p><code>unbound</code> can also be used in conjunction with a bound helper to\nrender it in its unbound form:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">unbound</span></span> <span class=\"hljs-variable\">helperName</span> <span class=\"hljs-variable\">somePropertyThatDoesntChange</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "unbound",
    "params": [
      {
        "name": "property",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/view.js",
    "line": 13,
    "description": "<p><code>{{view}}</code> inserts a new instance of an <code>Ember.View</code> into a template passing its\noptions to the <code>Ember.View</code>&#39;s <code>create</code> method and using the supplied block as\nthe view&#39;s own template.</p>\n<p>An empty <code>&lt;body&gt;</code> and the following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">A span:\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> tagName</span>=<span class=\"hljs-string\">\"span\"</span>}}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Will result in HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Note: the handlebars template script\n       also results in a rendered Ember.View\n       which is the outer &lt;div&gt; here --&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    A span:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n      Hello.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-parentview-setting\"><code>parentView</code> setting</h3>\n<p>The <code>parentView</code> property of the new <code>Ember.View</code> instance created through\n<code>{{view}}</code> will be set to the <code>Ember.View</code> instance of the template where\n<code>{{view}}</code> was called.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aView = Ember.View.create({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"{{#view}} my parent: {{parentView.elementId}} {{/view}}\"</span>)\n});\n\naView.appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Will result in HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    my parent: ember1\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"setting-css-id-and-class-attributes\">Setting CSS id and class attributes</h3>\n<p>The HTML <code>id</code> attribute can be set on the <code>{{view}}</code>&#39;s resulting element with\nthe <code>id</code> option. This option will <em>not</em> be passed to <code>Ember.View.create</code>.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> tagName</span>=<span class=\"hljs-string\">\"span\"</span> <span class=\"hljs-variable\">id</span>=<span class=\"hljs-string\">\"a-custom-id\"</span>}}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Results in the following HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"a-custom-id\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    hello.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The HTML <code>class</code> attribute can be set on the <code>{{view}}</code>&#39;s resulting element\nwith the <code>class</code> or <code>classNameBindings</code> options. The <code>class</code> option will\ndirectly set the CSS <code>class</code> attribute and will not be passed to\n<code>Ember.View.create</code>. <code>classNameBindings</code> will be passed to <code>create</code> and use\n<code>Ember.View</code>&#39;s class name binding functionality:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> tagName</span>=<span class=\"hljs-string\">\"span\"</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\"a-custom-class\"</span>}}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Results in the following HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view a-custom-class\"</span>&gt;</span>\n    hello.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-a-different-view-class\">Supplying a different view class</h3>\n<p><code>{{view}}</code> can take an optional first argument before its supplied options to\nspecify a path to a custom view class.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> </span><span class=\"hljs-string\">\"custom\"</span>}}</span><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">will</span> <span class=\"hljs-variable\">look</span> <span class=\"hljs-variable\">up</span> <span class=\"hljs-variable\">App.CustomView</span> }}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The first argument can also be a relative path accessible from the current\ncontext.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyApp = Ember.Application.create({});\nMyApp.OuterView = Ember.View.extend({\n  innerViewClass: Ember.View.extend({\n    classNames: [<span class=\"hljs-string\">'a-custom-view-class-as-property'</span>]\n  }),\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{#view view.innerViewClass}} hi {{/view}}'</span>)\n});\n\nMyApp.OuterView.create().appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view a-custom-view-class-as-property\"</span>&gt;</span>\n    hi\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"blockless-use\">Blockless use</h3>\n<p>If you supply a custom <code>Ember.View</code> subclass that specifies its own template\nor provide a <code>templateName</code> option to <code>{{view}}</code> it can be used without\nsupplying a block. Attempts to use both a <code>templateName</code> option and supply a\nblock will throw an error.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\nApp.WithTemplateDefinedView = Ember.View.extend({\n  templateName: <span class=\"hljs-string\">'defined-template'</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> '<span class=\"hljs-variable\"><span class=\"hljs-keyword\">with</span>-<span class=\"hljs-keyword\">template</span>-defined</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">defined-<span class=\"hljs-keyword\">template</span>.hbs</span> }}</span><span class=\"xml\">\nSome content for the defined template view.</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-viewname-property\"><code>viewName</code> property</h3>\n<p>You can supply a <code>viewName</code> option to <code>{{view}}</code>. The <code>Ember.View</code> instance\nwill be referenced as a property of its parent view by this name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aView = Ember.View.create({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{#view viewName=\"aChildByName\"}} hi {{/view}}'</span>)\n});\n\naView.appendTo(<span class=\"hljs-string\">'body'</span>);\naView.get(<span class=\"hljs-string\">'aChildByName'</span>) <span class=\"hljs-comment\">// the instance of Ember.View created by {{view}} helper</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "view",
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/with.js",
    "line": 9,
    "description": "<p>Use the <code>{{with}}</code> helper when you want to aliases the to a new name. It&#39;s helpful\nfor semantic clarity and to retain default scope or to reference from another\n<code>{{with}}</code> block.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">// posts might not be\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">with</span> user.posts as blogPosts</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"notice\"</span>&gt;</span>\n    There are </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">blogPosts.length</span>}}</span><span class=\"xml\"> blog posts written by </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">user.name</span>}}</span><span class=\"xml\">.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> post <span class=\"hljs-keyword\">in</span> blogPosts</span>}}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">post.title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">with</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Without the <code>as</code> operator, it would be impossible to reference <code>user.name</code> in the example above.</p>\n<p>NOTE: The alias should not reuse a name from the bound property path.\nFor example: <code>{{#with foo.bar as foo}}</code> is not supported because it attempts to alias using\nthe first part of the property path, <code>foo</code>. Instead, use <code>{{#with foo.bar as baz}}</code>.</p>\n<h3 id=\"-controller-option\"><code>controller</code> option</h3>\n<p>Adding <code>controller=&#39;something&#39;</code> instructs the <code>{{with}}</code> helper to create and use an instance of\nthe specified controller wrapping the aliased keyword.</p>\n<p>This is very similar to using an <code>itemController</code> option with the <code>{{each}}</code> helper.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">with</span> users.posts as posts controller</span>='<span class=\"hljs-variable\">userBlogPosts</span>'}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{!<span class=\"hljs-variable\">-</span> `<span class=\"hljs-variable\">posts</span>` <span class=\"hljs-variable\">is</span> <span class=\"hljs-variable\">wrapped</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">in</span></span> <span class=\"hljs-variable\">our</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-variable\">instance</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">with</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>In the above example, the <code>posts</code> keyword is now wrapped in the <code>userBlogPost</code> controller,\nwhich provides an elegant way to decorate the context with custom\nfunctions/properties.</p>\n",
    "itemtype": "method",
    "name": "with",
    "params": [
      {
        "name": "context",
        "description": "",
        "type": "Function"
      },
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-htmlbars/lib/helpers/yield.js",
    "line": 10,
    "description": "<p><code>{{yield}}</code> denotes an area of a template that will be rendered inside\nof another template. It has two main uses:</p>\n<h3 id=\"use-with-layout-\">Use with <code>layout</code></h3>\n<p>When used in a Handlebars template that is assigned to an <code>Ember.View</code>\ninstance&#39;s <code>layout</code> property Ember will render the layout template first,\ninserting the view&#39;s own rendered output at the <code>{{yield}}</code> location.</p>\n<p>An empty <code>&lt;body&gt;</code> and the following application code:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  classNames: [<span class=\"hljs-string\">'a-view-with-layout'</span>],\n  layout: Ember.Handlebars.compile(<span class=\"hljs-string\">'&lt;div class=\"wrapper\"&gt;{{yield}}&lt;/div&gt;'</span>),\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'&lt;span&gt;I am wrapped&lt;/span&gt;'</span>)\n});\n\naView = AView.create();\naView.appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'ember-view a-view-with-layout'</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"wrapper\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span>&gt;</span>I am wrapped<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The <code>yield</code> helper cannot be used outside of a template assigned to an\n<code>Ember.View</code>&#39;s <code>layout</code> property and will throw an error if attempted.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">BView = Ember.View.extend({\n  classNames: [<span class=\"hljs-string\">'a-view-with-layout'</span>],\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{yield}}'</span>)\n});\n\nbView = BView.create();\nbView.appendTo(<span class=\"hljs-string\">'body'</span>);\n\n<span class=\"hljs-comment\">// throws</span>\n<span class=\"hljs-comment\">// Uncaught Error: assertion failed:</span>\n<span class=\"hljs-comment\">// You called yield in a template that was not a layout</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"use-with-ember-component\">Use with Ember.Component</h3>\n<p>When designing components <code>{{yield}}</code> is used to denote where, inside the component&#39;s\ntemplate, an optional block passed to the component should render:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- application.hbs --&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#labeled-textfield value</span>=<span class=\"hljs-variable\">someProperty</span>}}</span><span class=\"xml\">\n  First name:\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/labeled-textfield</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- components/labeled-textfield.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">label</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">yield</span></span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">value</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">label</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">label</span>&gt;</span>\n  First name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">label</span>&gt;</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "yield",
    "params": [
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-htmlbars"
  },
  {
    "file": "packages/ember-routing-htmlbars/lib/helpers/action.js",
    "line": 118,
    "description": "<p>The <code>{{action}}</code> helper provides a useful shortcut for registering an HTML\nelement within a template for a single DOM event and forwarding that\ninteraction to the template&#39;s controller or specified <code>target</code> option.</p>\n<p>If the controller does not implement the specified action, the event is sent\nto the current route, and it bubbles up the route hierarchy from there.</p>\n<p>For more advanced event handling see <a href=\"/api/classes/Ember.Component.html\">Ember.Component</a></p>\n<h3 id=\"use\">Use</h3>\n<p>Given the following application Handlebars template on the page</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">anActionName</span>'}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>And application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    anActionName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in the following rendered HTML</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">data-ember-action</span>=<span class=\"hljs-value\">\"1\"</span>&gt;</span>\n    click me\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Clicking &quot;click me&quot; will trigger the <code>anActionName</code> action of the\n<code>App.ApplicationController</code>. In this case, no additional parameters will be passed.</p>\n<p>If you provide additional parameters to the helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">edit</span>' <span class=\"hljs-variable\">post</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Those parameters will be passed along as arguments to the JavaScript\nfunction implementing the action.</p>\n<h3 id=\"event-propagation\">Event Propagation</h3>\n<p>Events triggered through the action helper will automatically have\n<code>.preventDefault()</code> called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the <code>preventDefault=false</code> option to the <code>{{action}}</code> helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"sayHello\"</span> <span class=\"hljs-variable\">preventDefault</span>=<span class=\"hljs-variable\">false</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"file\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"checkbox\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>To disable bubbling, pass <code>bubbles=false</code> to the helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">edit</span>' <span class=\"hljs-variable\">post</span> <span class=\"hljs-variable\">bubbles</span>=<span class=\"hljs-variable\">false</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>If you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See <a href=\"/api/classes/Ember.View.html\">Ember.View</a>\n&#39;Responding to Browser Events&#39; for more information.</p>\n<h3 id=\"specifying-dom-event-type\">Specifying DOM event type</h3>\n<p>By default the <code>{{action}}</code> helper registers for DOM <code>click</code> events. You can\nsupply an <code>on</code> option to the helper to specify a different DOM event name:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">on</span>=<span class=\"hljs-string\">\"doubleClick\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>See <code>Ember.View</code> &#39;Responding to Browser Events&#39; for a list of\nacceptable DOM event names.</p>\n<h3 id=\"specifying-whitelisted-modifier-keys\">Specifying whitelisted modifier keys</h3>\n<p>By default the <code>{{action}}</code> helper will ignore click event with pressed modifier\nkeys. You can supply an <code>allowedKeys</code> option to specify which keys should not be ignored.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">allowedKeys</span>=<span class=\"hljs-string\">\"alt\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>This way the <code>{{action}}</code> will fire when clicking with the alt key pressed down.</p>\n<p>Alternatively, supply &quot;any&quot; to the <code>allowedKeys</code> option to accept any combination of modifier keys.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">allowedKeys</span>=<span class=\"hljs-string\">\"any\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me with any key pressed\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-a-target\">Specifying a Target</h3>\n<p>There are several possible target objects for <code>{{action}}</code> helpers:</p>\n<p>In a typical Ember application, where templates are managed through use of the\n<code>{{outlet}}</code> helper, actions will bubble to the current controller, then\nto the current route, and then up the route hierarchy.</p>\n<p>Alternatively, a <code>target</code> option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">the</span> <span class=\"hljs-variable\">application</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">template</span></span> }}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">target</span>=<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationView = Ember.View.extend({\n  actions: {\n    anActionName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{}\n  }\n});</pre></td>      </tr>    </table>  </div></div><h3 id=\"additional-parameters\">Additional Parameters</h3>\n<p>You may specify additional parameters to the <code>{{action}}</code> helper. These\nparameters are passed along as the arguments to the JavaScript function\nimplementing the action.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> people</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"edit\"</span> <span class=\"hljs-variable\">person</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n    click me\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Clicking &quot;click me&quot; will trigger the <code>edit</code> method on the current controller\nwith the value of <code>person</code> as a parameter.</p>\n",
    "itemtype": "method",
    "name": "action",
    "params": [
      {
        "name": "actionName",
        "description": "",
        "type": "String"
      },
      {
        "name": "context",
        "description": "",
        "type": "Object",
        "optional": true,
        "multiple": true
      },
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-routing-htmlbars"
  },
  {
    "file": "packages/ember-routing-htmlbars/lib/helpers/link-to.js",
    "line": 17,
    "description": "<p>The <code>{{link-to}}</code> helper renders a link to the supplied\n<code>routeName</code> passing an optionally supplied model to the\nroute as its <code>model</code> context of the route. The block\nfor <code>{{link-to}}</code> becomes the innerHTML of the rendered\nelement:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>'}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>You can also use an inline form of <code>{{link-to}}</code> helper by\npassing the link text as the first argument\nto the helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">link-to</span> '<span class=\"hljs-variable\">Great</span> <span class=\"hljs-variable\">Hamster</span> <span class=\"hljs-variable\">Photos</span>' '<span class=\"hljs-variable\">photoGallery</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Both will result in:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos\"</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-a-tagname\">Supplying a tagName</h3>\n<p>By default <code>{{link-to}}</code> renders an <code>&lt;a&gt;</code> element. This can\nbe overridden for a single use of <code>{{link-to}}</code> by supplying\na <code>tagName</code> option:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">tagName</span>=<span class=\"hljs-string\">\"li\"</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"disabling-the-link-to-helper\">Disabling the <code>link-to</code> helper</h3>\n<p>By default <code>{{link-to}}</code> is enabled.\nany passed value to <code>disabled</code> helper property will disable the <code>link-to</code> helper.</p>\n<p>static use: the <code>disabled</code> option:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">disabled</span>=<span class=\"hljs-variable\">true</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>dynamic use: the <code>disabledWhen</code> option:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">disabledWhen</span>=<span class=\"hljs-variable\">controller.someProperty</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>any passed value to <code>disabled</code> will disable it except <code>undefined</code>.\nto ensure that only <code>true</code> disable the <code>link-to</code> helper you can\noverride the global behaviour of <code>Ember.LinkView</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.LinkView.reopen({\n  disabled: Ember.computed(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, value)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (value !== <span class=\"hljs-literal\">undefined</span>) {\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'_isDisabled'</span>, value === <span class=\"hljs-literal\">true</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> value === <span class=\"hljs-literal\">true</span> ? get(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">'disabledClass'</span>) : <span class=\"hljs-literal\">false</span>;\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>see &quot;Overriding Application-wide Defaults&quot; for more.</p>\n<h3 id=\"handling-href-\">Handling <code>href</code></h3>\n<p><code>{{link-to}}</code> will use your application&#39;s Router to\nfill the element&#39;s <code>href</code> property with a url that\nmatches the path to the supplied <code>routeName</code> for your\nrouter&#39;s configured <code>Location</code> scheme, which defaults\nto Ember.HashLocation.</p>\n<h3 id=\"handling-current-route\">Handling current route</h3>\n<p><code>{{link-to}}</code> will apply a CSS class name of &#39;active&#39;\nwhen the application&#39;s current route matches\nthe supplied routeName. For example, if the application&#39;s\ncurrent route is &#39;photoGallery.recent&#39; the following\nuse of <code>{{link-to}}</code>:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery.recent</span>'}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>will result in</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/this-week\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"active\"</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The CSS class name used for active classes can be customized\nfor a single use of <code>{{link-to}}</code> by passing an <code>activeClass</code>\noption:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery.recent</span>' <span class=\"hljs-variable\">activeClass</span>=<span class=\"hljs-string\">\"current-url\"</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/this-week\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"current-url\"</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"supplying-a-model\">Supplying a model</h3>\n<p>An optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"photoGallery\"</span>, {path: <span class=\"hljs-string\">\"hamster-photos/:photo_id\"</span>});\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">aPhoto</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">aPhoto.title</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/42\"</span>&gt;</span>\n  Tomster\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-multiple-models\">Supplying multiple models</h3>\n<p>For deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"photoGallery\"</span>, {path: <span class=\"hljs-string\">\"hamster-photos/:photo_id\"</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"comment\"</span>, {path: <span class=\"hljs-string\">\"comments/:comment_id\"</span>});\n  });\n});</pre></td>      </tr>    </table>  </div></div><p>This argument will become the model context of the linked route:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery.comment</span>' <span class=\"hljs-variable\">aPhoto</span> <span class=\"hljs-variable\">comment</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">comment.body</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/42/comments/718\"</span>&gt;</span>\n  A+++ would snuggle again.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-an-explicit-dynamic-segment-value\">Supplying an explicit dynamic segment value</h3>\n<p>If you don&#39;t have a model object available to pass to <code>{{link-to}}</code>,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"photoGallery\"</span>, {path: <span class=\"hljs-string\">\"hamster-photos/:photo_id\"</span>});\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">aPhotoId</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">aPhoto.title</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/42\"</span>&gt;</span>\n  Tomster\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>When transitioning into the linked route, the <code>model</code> hook will\nbe triggered with parameters including this passed identifier.</p>\n<h3 id=\"allowing-default-action\">Allowing Default Action</h3>\n<p> By default the <code>{{link-to}}</code> helper prevents the default browser action\n by calling <code>preventDefault()</code> as this sort of action bubbling is normally\n handled internally and we do not want to take the browser to a new URL (for\n example).</p>\n<p> If you need to override this behavior specify <code>preventDefault=false</code> in\n your template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">aPhotoId</span> <span class=\"hljs-variable\">preventDefault</span>=<span class=\"hljs-variable\">false</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">aPhotoId.title</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"overriding-attributes\">Overriding attributes</h3>\n<p>You can override any given property of the Ember.LinkView\nthat is generated by the <code>{{link-to}}</code> helper by passing\nkey/value pairs, like so:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to  aPhoto tagName</span>='<span class=\"hljs-variable\">li</span>' <span class=\"hljs-variable\">title</span>='<span class=\"hljs-variable\">Following</span> <span class=\"hljs-variable\">this</span> <span class=\"hljs-variable\">link</span> <span class=\"hljs-variable\">will</span> <span class=\"hljs-variable\">change</span> <span class=\"hljs-variable\">your</span> <span class=\"hljs-variable\">life</span>' <span class=\"hljs-variable\">classNames</span>='<span class=\"hljs-variable\">pic</span> <span class=\"hljs-variable\">sweet</span>'}}</span><span class=\"xml\">\n  Uh-mazing!\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>See <a href=\"/api/classes/Ember.LinkView.html\">Ember.LinkView</a> for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of <code>LinkView</code>.</p>\n<h3 id=\"overriding-application-wide-defaults\">Overriding Application-wide Defaults</h3>\n<p><code>{{link-to}}</code> creates an instance of Ember.LinkView\nfor rendering. To override options for your entire\napplication, reopen Ember.LinkView and supply the\ndesired values:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.LinkView.reopen({\n  activeClass: <span class=\"hljs-string\">\"is-active\"</span>,\n  tagName: <span class=\"hljs-string\">'li'</span>\n})</pre></td>      </tr>    </table>  </div></div><p>It is also possible to override the default event in\nthis manner:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.LinkView.reopen({\n  eventName: <span class=\"hljs-string\">'customEventName'</span>\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "link-to",
    "params": [
      {
        "name": "routeName",
        "description": "",
        "type": "String"
      },
      {
        "name": "context",
        "description": "",
        "type": "Object",
        "optional": true,
        "multiple": true
      },
      {
        "name": "options",
        "description": "Handlebars key/value pairs of options, you can override any property of Ember.LinkView",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "see": [
      "{Ember.LinkView}"
    ],
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-routing-htmlbars"
  },
  {
    "file": "packages/ember-routing-htmlbars/lib/helpers/link-to.js",
    "line": 342,
    "description": "<p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_link-to\">link-to</a></p>\n",
    "itemtype": "method",
    "name": "linkTo",
    "deprecated": true,
    "params": [
      {
        "name": "routeName",
        "description": "",
        "type": "String"
      },
      {
        "name": "context",
        "description": "",
        "type": "Object",
        "optional": true,
        "multiple": true
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-routing-htmlbars"
  },
  {
    "file": "packages/ember-routing-htmlbars/lib/helpers/outlet.js",
    "line": 8,
    "description": "<p>The <code>outlet</code> helper is a placeholder that the router will fill in with\nthe appropriate template based on the current state of the application.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>By default, a template based on Ember&#39;s naming conventions will be rendered\ninto the <code>outlet</code> (e.g. <code>App.PostsRoute</code> will render the <code>posts</code> template).</p>\n<p>You can render a different template by using the <code>render()</code> method in the\nroute&#39;s <code>renderTemplate</code> hook. The following will render the <code>favoritePost</code>\ntemplate into the <code>outlet</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'favoritePost'</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>You can create custom named outlets for more control.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> '<span class=\"hljs-variable\">favoritePost</span>'}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> '<span class=\"hljs-variable\">posts</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Then you can define what template is rendered into each outlet in your\nroute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'favoritePost'</span>, { outlet: <span class=\"hljs-string\">'favoritePost'</span> });\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'posts'</span>, { outlet: <span class=\"hljs-string\">'posts'</span> });\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>You can specify the view that the outlet uses to contain and manage the\ntemplates rendered into it.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span>='<span class=\"hljs-variable\">sectionContainer</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SectionContainer = Ember.ContainerView.extend({\n  tagName: <span class=\"hljs-string\">'section'</span>,\n  classNames: [<span class=\"hljs-string\">'special'</span>]\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "outlet",
    "params": [
      {
        "name": "property",
        "description": "the property on the controller\n  that holds the view for this outlet",
        "type": "String"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-routing-htmlbars"
  },
  {
    "file": "packages/ember-routing-htmlbars/lib/helpers/query-params.js",
    "line": 9,
    "description": "<p>This is a sub-expression to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.</p>\n<p>Example</p>\n<p>{{#link-to &#39;posts&#39; (query-params direction=&quot;asc&quot;)}}Sort{{/link-to}}</p>\n",
    "itemtype": "method",
    "name": "query-params",
    "params": [
      {
        "name": "hash",
        "description": "takes a hash of query parameters",
        "type": "Object"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-routing-htmlbars"
  },
  {
    "file": "packages/ember-routing-htmlbars/lib/helpers/render.js",
    "line": 18,
    "description": "<p>Calling <code>{{render}}</code> from within a template will insert another\ntemplate that matches the provided name. The inserted template will\naccess its properties on its own controller (rather than the controller\nof the parent template).</p>\n<p>If a view class with the same name exists, the view class also will be used.</p>\n<p>Note: A given controller may only be used <em>once</em> in your app in this manner.\nA singleton instance of the controller will be created for you.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NavigationController = Ember.Controller.extend({\n  who: <span class=\"hljs-string\">\"world\"</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- navigation.hbs --&gt;</span>\nHello, </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">who</span>}}</span><span class=\"xml\">.</span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- application.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span>My great app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">render</span> <span class=\"hljs-string\">\"navigation\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span>My great app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'ember-view'</span>&gt;</span>\n  Hello, world.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Optionally you may provide a second argument: a property path\nthat will be bound to the <code>model</code> property of the controller.</p>\n<p>If a <code>model</code> property path is specified, then a new instance of the\ncontroller will be created and <code>{{render}}</code> can be used multiple times\nwith the same name.</p>\n<p> For example if you had this <code>author</code> template.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"author\"</span>&gt;</span>\nWritten by </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">firstName</span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">lastName</span>}}</span><span class=\"xml\">.\nTotal Posts: </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">postCount</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>You could render it inside the <code>post</code> template using the <code>render</code> helper.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"post\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">body</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">render</span> <span class=\"hljs-string\">\"author\"</span> <span class=\"hljs-variable\">author</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "render",
    "params": [
      {
        "name": "name",
        "description": "",
        "type": "String"
      },
      {
        "name": "context",
        "description": "",
        "type": "Object?"
      },
      {
        "name": "options",
        "description": "",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "HTML string",
      "type": "String"
    },
    "class": "Ember.Handlebars.helpers",
    "module": "ember",
    "submodule": "ember-routing-htmlbars"
  }
]