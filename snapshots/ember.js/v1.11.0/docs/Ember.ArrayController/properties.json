[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 276,
    "description": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
    "itemtype": "property",
    "name": "concatenatedProperties",
    "type": "Array",
    "default": "null",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 344,
    "description": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
    "itemtype": "property",
    "name": "isDestroyed",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 355,
    "description": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
    "itemtype": "property",
    "name": "isDestroying",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 131,
    "description": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "firstObject",
    "return": {
      "description": "the object or undefined",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 166,
    "description": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "lastObject",
    "return": {
      "description": "the last object or undefined",
      "type": "Object"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 954,
    "description": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
    "itemtype": "property",
    "name": "[]",
    "type": "Array",
    "return": {
      "description": "this"
    },
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/enumerable.js",
    "line": 1029,
    "description": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
    "itemtype": "property",
    "name": "hasEnumerableObservers",
    "type": "Boolean",
    "class": "Ember.Enumerable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Enumerable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/array.js",
    "line": 95,
    "description": "<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n",
    "itemtype": "property",
    "name": "length",
    "type": "Number",
    "class": "Ember.Array",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Array"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/array.js",
    "line": 372,
    "description": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
    "itemtype": "property",
    "name": "hasArrayObservers",
    "type": "Boolean",
    "class": "Ember.Array",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Array"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/array.js",
    "line": 502,
    "description": "<p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n",
    "itemtype": "property",
    "name": "@each",
    "class": "Ember.Array",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Array"
  },
  {
    "file": "packages/ember-runtime/lib/system/array_proxy.js",
    "line": 73,
    "description": "<p>The content array. Must be an object that implements <code>Ember.Array</code> and/or\n<code>Ember.MutableArray.</code></p>\n",
    "itemtype": "property",
    "name": "content",
    "type": "Ember.Array",
    "class": "Ember.ArrayProxy",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ArrayProxy"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/sortable.js",
    "line": 158,
    "description": "<p>Overrides the default <code>arrangedContent</code> from <code>ArrayProxy</code> in order to sort by <code>sortFunction</code>.\nAlso sets up observers for each <code>sortProperty</code> on each item in the content Array.</p>\n",
    "itemtype": "property",
    "name": "arrangedContent",
    "class": "Ember.SortableMixin",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.SortableMixin"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/sortable.js",
    "line": 78,
    "description": "<p>Specifies which properties dictate the <code>arrangedContent</code>&#39;s sort order.</p>\n<p>When specifying multiple properties the sorting will use properties\nfrom the <code>sortProperties</code> array prioritized from first to last.</p>\n",
    "itemtype": "property",
    "name": "sortProperties",
    "type": "Array",
    "class": "Ember.SortableMixin",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.SortableMixin"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/sortable.js",
    "line": 88,
    "description": "<p>Specifies the <code>arrangedContent</code>&#39;s sort direction.\nSorts the content in ascending order by default. Set to <code>false</code> to\nuse descending order.</p>\n",
    "itemtype": "property",
    "name": "sortAscending",
    "type": "Boolean",
    "default": "true",
    "class": "Ember.SortableMixin",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.SortableMixin"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/sortable.js",
    "line": 98,
    "description": "<p>The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.,</p>\n<ul>\n<li>return 0 if the two parameters are equal,</li>\n<li>return a negative value if the first parameter is smaller than the second or</li>\n<li>return a positive value otherwise:</li>\n</ul>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(x, y)</span> </span>{ <span class=\"hljs-comment\">// These are assumed to be integers</span>\n  <span class=\"hljs-keyword\">if</span> (x === y)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> x &lt; y ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n}</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "sortFunction",
    "type": "{Function}",
    "default": "Ember.compare",
    "class": "Ember.SortableMixin",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.SortableMixin"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 28,
    "description": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "actions",
    "type": "Hash",
    "default": "null",
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ActionHandler"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/controller.js",
    "line": 19,
    "description": "<p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&#39;s controller&#39;s <code>target</code>.</p>\n<p>By default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an <code>itemController</code>. In most\ncases the <code>target</code> property will automatically be set to the logical\nconsumer of actions for the controller.</p>\n",
    "itemtype": "property",
    "name": "target",
    "default": "null",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/controller.js",
    "line": 45,
    "description": "<p>The controller&#39;s current model. When retrieving or modifying a controller&#39;s\nmodel, this property should be used instead of the <code>content</code> property.</p>\n",
    "itemtype": "property",
    "name": "model",
    "access": "public",
    "tagname": "",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-routing/lib/ext/controller.js",
    "line": 23,
    "description": "<p>Defines which query parameters the controller accepts.\nIf you give the names [&#39;category&#39;,&#39;page&#39;] it will bind\nthe values of these query parameters to the variables\n<code>this.category</code> and <code>this.page</code></p>\n",
    "itemtype": "property",
    "name": "queryParams",
    "access": "public",
    "tagname": "",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "submodule": "ember-routing",
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-routing/lib/ext/controller.js",
    "line": 34,
    "itemtype": "property",
    "name": "_qpDelegate",
    "access": "private",
    "tagname": "",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "submodule": "ember-routing",
    "description": "",
    "isPrivate": true,
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-routing/lib/ext/controller.js",
    "line": 40,
    "itemtype": "property",
    "name": "_normalizedQueryParams",
    "access": "private",
    "tagname": "",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "submodule": "ember-routing",
    "description": "",
    "isPrivate": true,
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-routing/lib/ext/controller.js",
    "line": 64,
    "itemtype": "property",
    "name": "_cacheMeta",
    "access": "private",
    "tagname": "",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "submodule": "ember-routing",
    "description": "",
    "isPrivate": true,
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-application/lib/ext/controller.js",
    "line": 77,
    "description": "<p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>The application&#39;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span></pre></td>      </tr>    </table>  </div></div><p>Given that you have a nested controller (nested resource):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsNewController = Ember.ObjectController.extend({\n});</pre></td>      </tr>    </table>  </div></div><p>When you define a controller that requires access to a nested one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.IndexController = Ember.ObjectController.extend({\n  needs: [<span class=\"hljs-string\">'commentsNew'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>You will be able to get access to it:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.commentsNew'</span>); <span class=\"hljs-comment\">// instance of App.CommentsNewController</span></pre></td>      </tr>    </table>  </div></div><p>This is only available for singleton controllers.</p>\n",
    "itemtype": "property",
    "name": "needs",
    "type": "Array",
    "default": "[]",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-application/lib/ext/controller.js",
    "line": 157,
    "description": "<p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>],\n  postTitle: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> currentPost = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span>\n    <span class=\"hljs-keyword\">return</span> currentPost.get(<span class=\"hljs-string\">'title'</span>);\n  }.property(<span class=\"hljs-string\">'controllers.post.title'</span>)\n});</pre></td>      </tr>    </table>  </div></div>",
    "see": [
      "{Ember.ControllerMixin#needs}"
    ],
    "itemtype": "property",
    "name": "controllers",
    "type": "Object",
    "default": "null",
    "class": "Ember.ControllerMixin",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ControllerMixin"
  },
  {
    "file": "packages/ember-runtime/lib/controllers/array_controller.js",
    "line": 108,
    "description": "<p>A string containing the controller name used to wrap items.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyArrayController = Ember.ArrayController.extend({\n  itemController: <span class=\"hljs-string\">'myItem'</span> <span class=\"hljs-comment\">// use App.MyItemController</span>\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "itemController",
    "type": "String",
    "default": "null",
    "class": "Ember.ArrayController",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/controllers/array_controller.js",
    "line": 221,
    "description": "<p>Flag to mark as being &quot;virtual&quot;. Used to keep this instance\nfrom participating in the parentController hierarchy.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_isVirtual",
    "type": "Boolean",
    "class": "Ember.ArrayController",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true
  }
]