{
  "name": "Ember.MutableArray",
  "description": "<p>This mixin defines the API for modifying array-like objects. These methods\ncan be applied only to a collection that keeps its items in an ordered set.\nIt builds upon the Array mixin and adds methods to modify the array.\nConcrete implementations of this class include ArrayProxy and ArrayController.</p>\n<p>It is important to use the methods in this class to modify arrays so that\nchanges are observable. This allows the binding system in Ember to function\ncorrectly.</p>\n<p>Note that an Array can change even if it does not implement this mixin.\nFor example, one might implement a SparseArray that cannot be directly\nmodified, but if its underlying enumerable changes, it will change also.</p>\n",
  "line": 31,
  "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
  "methods": [
    {
      "name": "nextObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "contains",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "forEach",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "getEach",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "setEach",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "map",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "mapBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "mapProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "filter",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "reject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "filterBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "filterProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "rejectBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "rejectProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "find",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "findBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "findProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "every",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "everyBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "everyProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "isEvery",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "any",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "some",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "isAny",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "anyBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "someProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "reduce",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "invoke",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "toArray",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "compact",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "without",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "uniq",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "addEnumerableObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "removeEnumerableObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "enumerableContentWillChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "enumerableContentDidChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "sortBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "objectAt",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "objectsAt",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "slice",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "indexOf",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "lastIndexOf",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "addArrayObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "removeArrayObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "arrayContentWillChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "arrayContentDidChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "addObject",
      "isPrivate": false
    },
    {
      "name": "addObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableEnumerable"
    },
    {
      "name": "removeObject",
      "isPrivate": false
    },
    {
      "name": "removeObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableEnumerable"
    },
    {
      "name": "replace",
      "isPrivate": false
    },
    {
      "name": "clear",
      "isPrivate": false
    },
    {
      "name": "insertAt",
      "isPrivate": false
    },
    {
      "name": "removeAt",
      "isPrivate": false
    },
    {
      "name": "pushObject",
      "isPrivate": false
    },
    {
      "name": "pushObjects",
      "isPrivate": false
    },
    {
      "name": "popObject",
      "isPrivate": false
    },
    {
      "name": "shiftObject",
      "isPrivate": false
    },
    {
      "name": "unshiftObject",
      "isPrivate": false
    },
    {
      "name": "unshiftObjects",
      "isPrivate": false
    },
    {
      "name": "reverseObjects",
      "isPrivate": false
    },
    {
      "name": "setObjects",
      "isPrivate": false
    }
  ],
  "properties": [
    {
      "name": "firstObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "lastObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "[]",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "hasEnumerableObservers",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "length",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "hasArrayObservers",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "@each",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    }
  ],
  "events": [],
  "isPrivate": false,
  "constType": "Class"
}