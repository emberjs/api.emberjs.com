[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 276,
    "description": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
    "itemtype": "property",
    "name": "concatenatedProperties",
    "type": "Array",
    "default": "null",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 344,
    "description": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
    "itemtype": "property",
    "name": "isDestroyed",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 355,
    "description": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
    "itemtype": "property",
    "name": "isDestroying",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 28,
    "description": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "actions",
    "type": "Hash",
    "default": "null",
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ActionHandler"
  },
  {
    "file": "packages/ember-views/lib/views/core_view.js",
    "line": 60,
    "description": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
    "itemtype": "property",
    "name": "parentView",
    "type": "Ember.View",
    "default": "null",
    "class": "Ember.CoreView",
    "module": "ember",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreView"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 681,
    "itemtype": "property",
    "name": "isView",
    "type": "Boolean",
    "default": "true",
    "static": 1,
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/component.js",
    "line": 160,
    "description": "<p>Specifying a components <code>templateName</code> is deprecated without also\nproviding the <code>layout</code> or <code>layoutName</code> properties.</p>\n",
    "deprecated": true,
    "itemtype": "property",
    "name": "templateName",
    "class": "Ember.Component",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Component"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 705,
    "description": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
    "itemtype": "property",
    "name": "layoutName",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/component.js",
    "line": 130,
    "description": "<p>A components template property is set by passing a block\nduring its invocation. It is executed within the parent context.</p>\n<p>Example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#my-component</span>}}</span><span class=\"xml\">\n  // something that is run in the context\n  // of the parent context\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/my-component</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Specifying a template directly to a component is deprecated without\nalso specifying the layout property.</p>\n",
    "deprecated": true,
    "itemtype": "property",
    "name": "template",
    "class": "Ember.Component",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Component"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 739,
    "description": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
    "itemtype": "property",
    "name": "layout",
    "type": "Function",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 921,
    "description": "<p>Returns the current DOM element for the view.</p>\n",
    "itemtype": "property",
    "name": "element",
    "type": "DOMElement",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1052,
    "description": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
    "itemtype": "property",
    "name": "elementId",
    "type": "String",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1202,
    "description": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
    "itemtype": "property",
    "name": "tagName",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1218,
    "description": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
    "itemtype": "property",
    "name": "ariaRole",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1395,
    "description": "<p>Global views hash</p>\n",
    "itemtype": "property",
    "name": "views",
    "static": 1,
    "type": "Hash",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/component.js",
    "line": 192,
    "description": "<p>If the component is currently inserted into the DOM of a parent view, this\nproperty will point to the controller of the parent view.</p>\n",
    "itemtype": "property",
    "name": "targetObject",
    "type": "Ember.Controller",
    "default": "null",
    "class": "Ember.Component",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Component"
  },
  {
    "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
    "line": 13,
    "description": "<p>A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the type attribute to the element</span>\n<span class=\"hljs-comment\">// with the value \"button\", like &lt;div type=\"button\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'type'</span>],\n  type: <span class=\"hljs-string\">'button'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as an attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Renders something like &lt;div enabled=\"enabled\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'enabled'</span>],\n  enabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "attributeBindings",
    "class": "Ember.TextSupport",
    "module": "ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/mixins/class_names_support.js",
    "line": 33,
    "description": "<p>Standard CSS class names to apply to the view&#39;s outer element. This\nproperty automatically inherits any class names defined by the view&#39;s\nsuperclasses as well.</p>\n",
    "itemtype": "property",
    "name": "classNames",
    "type": "Array",
    "default": "['ember-view']",
    "class": "Ember.TextSupport",
    "module": "ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/mixins/class_names_support.js",
    "line": 44,
    "description": "<p>A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'high' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'priority'</span>]\n  priority: <span class=\"hljs-string\">'high'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'is-urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent:urgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This list of properties is inherited from the view&#39;s superclasses as well.</p>\n",
    "itemtype": "property",
    "name": "classNameBindings",
    "type": "Array",
    "default": "[]",
    "class": "Ember.TextSupport",
    "module": "ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/mixins/instrumentation_support.js",
    "line": 6,
    "description": "<p>Used to identify this view during debugging</p>\n",
    "itemtype": "property",
    "name": "instrumentDisplay",
    "type": "String",
    "class": "Ember.TextSupport",
    "module": "ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/mixins/text_support.js",
    "line": 134,
    "description": "<p>The action to be sent when the user presses the return key.</p>\n<p>This is similar to the <code>{{action}}</code> helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.</p>\n",
    "itemtype": "property",
    "name": "action",
    "type": "String",
    "default": "null",
    "class": "Ember.TextSupport",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/mixins/text_support.js",
    "line": 147,
    "description": "<p>The event that should send the action.</p>\n<p>Options are:</p>\n<ul>\n<li><code>enter</code>: the user pressed enter</li>\n<li><code>keyPress</code>: the user pressed a key</li>\n</ul>\n",
    "itemtype": "property",
    "name": "onEvent",
    "type": "String",
    "default": "enter",
    "class": "Ember.TextSupport",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/mixins/text_support.js",
    "line": 161,
    "description": "<p>Whether the <code>keyUp</code> event that triggers an <code>action</code> to be sent continues\npropagating to other views.</p>\n<p>By default, when the user presses the return key on their keyboard and\nthe text field has an <code>action</code> set, the action will be sent to the view&#39;s\ncontroller and the key event will stop propagating.</p>\n<p>If you would like parent views to receive the <code>keyUp</code> event even after an\naction has been dispatched, set <code>bubbles</code> to true.</p>\n",
    "itemtype": "property",
    "name": "bubbles",
    "type": "Boolean",
    "default": "false",
    "class": "Ember.TextSupport",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.TextSupport"
  },
  {
    "file": "packages/ember-views/lib/views/text_field.js",
    "line": 59,
    "description": "<p>The <code>value</code> attribute of the input element. As the user inputs text, this\nproperty is updated live.</p>\n",
    "itemtype": "property",
    "name": "value",
    "type": "String",
    "default": "\"\"",
    "class": "Ember.TextField",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/views/text_field.js",
    "line": 69,
    "description": "<p>The <code>type</code> attribute of the input element.</p>\n",
    "itemtype": "property",
    "name": "type",
    "type": "String",
    "default": "\"text\"",
    "class": "Ember.TextField",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/views/text_field.js",
    "line": 78,
    "description": "<p>The <code>size</code> of the text field in characters.</p>\n",
    "itemtype": "property",
    "name": "size",
    "type": "String",
    "default": "null",
    "class": "Ember.TextField",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/views/text_field.js",
    "line": 87,
    "description": "<p>The <code>pattern</code> attribute of input element.</p>\n",
    "itemtype": "property",
    "name": "pattern",
    "type": "String",
    "default": "null",
    "class": "Ember.TextField",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/views/text_field.js",
    "line": 96,
    "description": "<p>The <code>min</code> attribute of input element used with <code>type=&quot;number&quot;</code> or <code>type=&quot;range&quot;</code>.</p>\n",
    "itemtype": "property",
    "name": "min",
    "type": "String",
    "default": "null",
    "since": "1.4.0",
    "class": "Ember.TextField",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/views/text_field.js",
    "line": 106,
    "description": "<p>The <code>max</code> attribute of input element used with <code>type=&quot;number&quot;</code> or <code>type=&quot;range&quot;</code>.</p>\n",
    "itemtype": "property",
    "name": "max",
    "type": "String",
    "default": "null",
    "since": "1.4.0",
    "class": "Ember.TextField",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  }
]