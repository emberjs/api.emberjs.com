[
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 28,
    "description": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "actions",
    "type": "Hash",
    "default": "null",
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  }
]