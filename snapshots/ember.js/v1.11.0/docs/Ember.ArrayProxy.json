{
  "name": "Ember.ArrayProxy",
  "description": "<p>An ArrayProxy wraps any other object that implements <code>Ember.Array</code> and/or\n<code>Ember.MutableArray,</code> forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.</p>\n<p>A simple example of usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> pets = [<span class=\"hljs-string\">'dog'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'fish'</span>];\n<span class=\"hljs-keyword\">var</span> ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\nap.get(<span class=\"hljs-string\">'firstObject'</span>);                        <span class=\"hljs-comment\">// 'dog'</span>\nap.set(<span class=\"hljs-string\">'content'</span>, [<span class=\"hljs-string\">'amoeba'</span>, <span class=\"hljs-string\">'paramecium'</span>]);\nap.get(<span class=\"hljs-string\">'firstObject'</span>);                        <span class=\"hljs-comment\">// 'amoeba'</span></pre></td>      </tr>    </table>  </div></div><p>This class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n<code>objectAtContent</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> pets = [<span class=\"hljs-string\">'dog'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'fish'</span>];\n<span class=\"hljs-keyword\">var</span> ap = Ember.ArrayProxy.create({\n    content: Ember.A(pets),\n    objectAtContent: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(idx)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'content'</span>).objectAt(idx).toUpperCase();\n    }\n});\n\nap.get(<span class=\"hljs-string\">'firstObject'</span>); <span class=\"hljs-comment\">// . 'DOG'</span></pre></td>      </tr>    </table>  </div></div>",
  "line": 33,
  "file": "packages/ember-runtime/lib/system/array_proxy.js",
  "methods": [
    {
      "name": "init",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "destroy",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "willDestroy",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "_scheduledDestroy",
      "isPrivate": true,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "toString",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "extend",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "createWithMixins",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "create",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "reopen",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "reopenClass",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "metaForProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "eachComputedProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "_onLookup",
      "isPrivate": true,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "_lazyInjections",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "get",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "getProperties",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "set",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "setProperties",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "beginPropertyChanges",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "endPropertyChanges",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "propertyWillChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "propertyDidChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "notifyPropertyChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "addObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "removeObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "hasObserverFor",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "getWithDefault",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "incrementProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "decrementProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "toggleProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "cacheFor",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "nextObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "contains",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "forEach",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "getEach",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "setEach",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "map",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "mapBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "mapProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "filter",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "reject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "filterBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "filterProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "rejectBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "rejectProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "find",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "findBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "findProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "every",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "everyBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "everyProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "isEvery",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "any",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "some",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "isAny",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "anyBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "someProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "reduce",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "invoke",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "toArray",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "compact",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "without",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "uniq",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "addEnumerableObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "removeEnumerableObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "enumerableContentWillChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "enumerableContentDidChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "sortBy",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "objectAt",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "objectsAt",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "slice",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "indexOf",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "lastIndexOf",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "addArrayObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "removeArrayObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "arrayContentWillChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "arrayContentDidChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "addObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "addObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableEnumerable"
    },
    {
      "name": "removeObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "removeObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableEnumerable"
    },
    {
      "name": "replace",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "clear",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "insertAt",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "removeAt",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "pushObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "pushObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "popObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "shiftObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "unshiftObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "unshiftObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "reverseObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "setObjects",
      "isPrivate": false,
      "inheritedFrom": "Ember.MutableArray"
    },
    {
      "name": "objectAtContent",
      "isPrivate": false
    },
    {
      "name": "replaceContent",
      "isPrivate": false
    },
    {
      "name": "_contentWillChange",
      "isPrivate": true
    },
    {
      "name": "contentArrayWillChange",
      "isPrivate": false
    },
    {
      "name": "contentArrayDidChange",
      "isPrivate": false
    },
    {
      "name": "_contentDidChange",
      "isPrivate": true
    }
  ],
  "properties": [
    {
      "name": "concatenatedProperties",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "isDestroyed",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "isDestroying",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "firstObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "lastObject",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "[]",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "hasEnumerableObservers",
      "isPrivate": false,
      "inheritedFrom": "Ember.Enumerable"
    },
    {
      "name": "length",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "hasArrayObservers",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "@each",
      "isPrivate": false,
      "inheritedFrom": "Ember.Array"
    },
    {
      "name": "content",
      "isPrivate": false
    },
    {
      "name": "arrangedContent",
      "isPrivate": false
    }
  ],
  "events": [],
  "isPrivate": false,
  "constType": "Class"
}