{
  "name": "RSVP.Promise",
  "description": "<p>Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its <code>then</code> method, which\nregisters callbacks to receive either a promiseâ€™s eventual value or the reason\nwhy the promise cannot be fulfilled.</p>\n<h2 id=\"terminology\">Terminology</h2>\n<ul>\n<li><code>promise</code> is an object or function with a <code>then</code> method whose behavior conforms to this specification.</li>\n<li><code>thenable</code> is an object or function that defines a <code>then</code> method.</li>\n<li><code>value</code> is any legal JavaScript value (including undefined, a thenable, or a promise).</li>\n<li><code>exception</code> is a value that is thrown using the throw statement.</li>\n<li><code>reason</code> is a value that indicates why a promise was rejected.</li>\n<li><code>settled</code> the final resting state of a promise, fulfilled or rejected.</li>\n</ul>\n<p>A promise can be in one of three states: pending, fulfilled, or rejected.</p>\n<p>Promises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.</p>\n<p>Promises can also be said to <em>resolve</em> a value.  If this value is also a\npromise, then the original promise&#39;s settled state will match the value&#39;s\nsettled state.  So a promise that <em>resolves</em> a promise that rejects will\nitself reject, and a promise that <em>resolves</em> a promise that fulfills will\nitself fulfill.</p>\n<h2 id=\"basic-usage-\">Basic Usage:</h2>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(resolve, reject)</span> </span>{\n  <span class=\"hljs-comment\">// on success</span>\n  resolve(value);\n\n  <span class=\"hljs-comment\">// on failure</span>\n  reject(reason);\n});\n\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value)</span> </span>{\n  <span class=\"hljs-comment\">// on fulfillment</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// on rejection</span>\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"advanced-usage-\">Advanced Usage:</h2>\n<p>Promises shine when abstracting away asynchronous interactions such as\n<code>XMLHttpRequest</code>s.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getJSON</span><span class=\"hljs-params\">(url)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(resolve, reject)</span></span>{\n    <span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n\n    xhr.open(<span class=\"hljs-string\">'GET'</span>, url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = <span class=\"hljs-string\">'json'</span>;\n    xhr.setRequestHeader(<span class=\"hljs-string\">'Accept'</span>, <span class=\"hljs-string\">'application/json'</span>);\n    xhr.send();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.readyState === <span class=\"hljs-keyword\">this</span>.DONE) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.status === <span class=\"hljs-number\">200</span>) {\n          resolve(<span class=\"hljs-keyword\">this</span>.response);\n        } <span class=\"hljs-keyword\">else</span> {\n          reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'getJSON: `'</span> + url + <span class=\"hljs-string\">'` failed with status: ['</span> + <span class=\"hljs-keyword\">this</span>.status + <span class=\"hljs-string\">']'</span>));\n        }\n      }\n    };\n  });\n}\n\ngetJSON(<span class=\"hljs-string\">'/posts.json'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(json)</span> </span>{\n  <span class=\"hljs-comment\">// on fulfillment</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// on rejection</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Unlike callbacks, promises are great composable primitives.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-built_in\">Promise</span>.all([\n  getJSON(<span class=\"hljs-string\">'/posts'</span>),\n  getJSON(<span class=\"hljs-string\">'/comments'</span>)\n]).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(values)</span></span>{\n  values[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// =&gt; postsJSON</span>\n  values[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// =&gt; commentsJSON</span>\n\n  <span class=\"hljs-keyword\">return</span> values;\n});</pre></td>      </tr>    </table>  </div></div>",
  "line": 34,
  "file": "bower_components/rsvp/lib/rsvp/promise.js",
  "methods": [
    {
      "name": "then",
      "isPrivate": false
    },
    {
      "name": "catch",
      "isPrivate": false
    },
    {
      "name": "finally",
      "isPrivate": false
    }
  ],
  "properties": [],
  "events": [],
  "isPrivate": false,
  "constType": "Class"
}