[
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1237,
    "description": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
    "itemtype": "method",
    "name": "init",
    "access": "private",
    "tagname": "",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1280,
    "description": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
    "itemtype": "method",
    "name": "destroy",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 388,
    "description": "<p>Override to implement teardown.</p>\n",
    "itemtype": "method",
    "name": "willDestroy",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 395,
    "description": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_scheduledDestroy",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 414,
    "description": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "toString",
    "return": {
      "description": "string representation",
      "type": "String"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 478,
    "description": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
    "itemtype": "method",
    "name": "extend",
    "static": 1,
    "params": [
      {
        "name": "mixins",
        "description": "One or more Mixin classes",
        "type": "Mixin",
        "optional": true,
        "multiple": true
      },
      {
        "name": "arguments",
        "description": "Object containing values to use within the new class",
        "type": "Object",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 581,
    "description": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
    "itemtype": "method",
    "name": "createWithMixins",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 602,
    "description": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
    "itemtype": "method",
    "name": "create",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 652,
    "description": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
    "itemtype": "method",
    "name": "reopen",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 696,
    "description": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
    "itemtype": "method",
    "name": "reopenClass",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 778,
    "description": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
    "static": 1,
    "itemtype": "method",
    "name": "metaForProperty",
    "params": [
      {
        "name": "key",
        "description": "property name",
        "type": "String"
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 834,
    "description": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
    "static": 1,
    "itemtype": "method",
    "name": "eachComputedProperty",
    "params": [
      {
        "name": "callback",
        "description": "",
        "type": "Function"
      },
      {
        "name": "binding",
        "description": "",
        "type": "Object"
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 862,
    "description": "<p>Provides lookup-time type validation for injected properties.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_onLookup",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 871,
    "description": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
    "itemtype": "method",
    "name": "_lazyInjections",
    "return": {
      "description": "Hash of all lazy injected property keys to container names",
      "type": "Object"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 101,
    "description": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
    "itemtype": "method",
    "name": "get",
    "params": [
      {
        "name": "keyName",
        "description": "The property to retrieve",
        "type": "String"
      }
    ],
    "return": {
      "description": "The property value or undefined.",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 143,
    "description": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "getProperties",
    "params": [
      {
        "name": "list",
        "description": "of keys to get",
        "type": "String...|Array"
      }
    ],
    "return": {
      "description": "",
      "type": "Hash"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 167,
    "description": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "set",
    "params": [
      {
        "name": "keyName",
        "description": "The property to set",
        "type": "String"
      },
      {
        "name": "value",
        "description": "The value to set or `null`.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 221,
    "description": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "setProperties",
    "params": [
      {
        "name": "hash",
        "description": "the hash of keys and values to set",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 238,
    "description": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
    "itemtype": "method",
    "name": "beginPropertyChanges",
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 257,
    "description": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
    "itemtype": "method",
    "name": "endPropertyChanges",
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 275,
    "description": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
    "itemtype": "method",
    "name": "propertyWillChange",
    "params": [
      {
        "name": "keyName",
        "description": "The property key that is about to change.",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 298,
    "description": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
    "itemtype": "method",
    "name": "propertyDidChange",
    "params": [
      {
        "name": "keyName",
        "description": "The property key that has just changed.",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 321,
    "description": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
    "itemtype": "method",
    "name": "notifyPropertyChange",
    "params": [
      {
        "name": "keyName",
        "description": "The property key to be notified about.",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 344,
    "description": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
    "itemtype": "method",
    "name": "addObserver",
    "params": [
      {
        "name": "key",
        "description": "The key to observer",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The target object to invoke",
        "type": "Object"
      },
      {
        "name": "method",
        "description": "The method to invoke.",
        "type": "String|Function"
      }
    ],
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 395,
    "description": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
    "itemtype": "method",
    "name": "removeObserver",
    "params": [
      {
        "name": "key",
        "description": "The key to observer",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The target object to invoke",
        "type": "Object"
      },
      {
        "name": "method",
        "description": "The method to invoke.",
        "type": "String|Function"
      }
    ],
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 409,
    "description": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
    "itemtype": "method",
    "name": "hasObserverFor",
    "params": [
      {
        "name": "key",
        "description": "Key to check",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 423,
    "description": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "getWithDefault",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to retrieve",
        "type": "String"
      },
      {
        "name": "defaultValue",
        "description": "The value to return if the property value is undefined",
        "type": "Object"
      }
    ],
    "return": {
      "description": "The property value or the defaultValue.",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 440,
    "description": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "incrementProperty",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to increment",
        "type": "String"
      },
      {
        "name": "increment",
        "description": "The amount to increment by. Defaults to 1",
        "type": "Number"
      }
    ],
    "return": {
      "description": "The new property value",
      "type": "Number"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 460,
    "description": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "decrementProperty",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to decrement",
        "type": "String"
      },
      {
        "name": "decrement",
        "description": "The amount to decrement by. Defaults to 1",
        "type": "Number"
      }
    ],
    "return": {
      "description": "The new property value",
      "type": "Number"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 480,
    "description": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "toggleProperty",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to toggle",
        "type": "String"
      }
    ],
    "return": {
      "description": "The new property value",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 497,
    "description": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
    "itemtype": "method",
    "name": "cacheFor",
    "params": [
      {
        "name": "keyName",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "The cached value of the computed property, if any",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/evented.js",
    "line": 51,
    "description": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
    "itemtype": "method",
    "name": "on",
    "params": [
      {
        "name": "name",
        "description": "The name of the event",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The \"this\" binding for the callback",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The callback to execute",
        "type": "Function"
      }
    ],
    "return": {
      "description": "this"
    },
    "class": "Ember.Evented",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Evented"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/evented.js",
    "line": 76,
    "description": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
    "itemtype": "method",
    "name": "one",
    "params": [
      {
        "name": "name",
        "description": "The name of the event",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The \"this\" binding for the callback",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The callback to execute",
        "type": "Function"
      }
    ],
    "return": {
      "description": "this"
    },
    "class": "Ember.Evented",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Evented"
  },
  {
    "file": "packages/ember-views/lib/views/core_view.js",
    "line": 99,
    "description": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
    "itemtype": "method",
    "name": "trigger",
    "params": [
      {
        "name": "name",
        "description": "",
        "type": "String"
      }
    ],
    "access": "private",
    "tagname": "",
    "class": "Ember.CoreView",
    "module": "ember",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreView"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/evented.js",
    "line": 130,
    "description": "<p>Cancels subscription for given name, target, and method.</p>\n",
    "itemtype": "method",
    "name": "off",
    "params": [
      {
        "name": "name",
        "description": "The name of the event",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The target of the subscription",
        "type": "Object"
      },
      {
        "name": "method",
        "description": "The function of the subscription",
        "type": "Function"
      }
    ],
    "return": {
      "description": "this"
    },
    "class": "Ember.Evented",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Evented"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/evented.js",
    "line": 144,
    "description": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
    "itemtype": "method",
    "name": "has",
    "params": [
      {
        "name": "name",
        "description": "The name of the event",
        "type": "String"
      }
    ],
    "return": {
      "description": "does the object have a subscription for event",
      "type": "Boolean"
    },
    "class": "Ember.Evented",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Evented"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 148,
    "description": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "willMergeMixin",
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.ActionHandler"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 178,
    "description": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "send",
    "params": [
      {
        "name": "actionName",
        "description": "The action to trigger",
        "type": "String"
      },
      {
        "name": "context",
        "description": "a context to send with the action",
        "type": "*"
      }
    ],
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ActionHandler"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 789,
    "description": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
    "itemtype": "method",
    "name": "_contextDidChange",
    "access": "private",
    "tagname": "",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 818,
    "description": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
    "itemtype": "method",
    "name": "nearestOfType",
    "params": [
      {
        "name": "klass",
        "description": "Subclass of Ember.View (or Ember.View itself),\n       or an instance of Ember.Mixin.",
        "type": "Class,Mixin"
      }
    ],
    "return": {
      "description": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 839,
    "description": "<p>Return the nearest ancestor that has a given property.</p>\n",
    "itemtype": "method",
    "name": "nearestWithProperty",
    "params": [
      {
        "name": "property",
        "description": "A property name",
        "type": "String"
      }
    ],
    "return": {
      "description": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 855,
    "description": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
    "itemtype": "method",
    "name": "_parentViewDidChange",
    "access": "private",
    "tagname": "",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 882,
    "description": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
    "itemtype": "method",
    "name": "rerender",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 902,
    "description": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
    "itemtype": "method",
    "name": "_classStringForProperty",
    "params": [
      {
        "name": "property",
        "description": ""
      }
    ],
    "access": "private",
    "tagname": "",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 929,
    "description": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
    "itemtype": "method",
    "name": "$",
    "params": [
      {
        "name": "selector",
        "description": "a jQuery-compatible selector string",
        "type": "String",
        "optional": true
      }
    ],
    "return": {
      "description": "the jQuery object for the DOM node",
      "type": "JQuery"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 962,
    "description": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
    "itemtype": "method",
    "name": "appendTo",
    "params": [
      {
        "name": "A",
        "description": "selector, element, HTML string, or jQuery object",
        "type": "String|DOMElement|jQuery"
      }
    ],
    "return": {
      "description": "receiver",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 993,
    "description": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
    "itemtype": "method",
    "name": "replaceIn",
    "params": [
      {
        "name": "target",
        "description": "A selector, element, HTML string, or jQuery object",
        "type": "String|DOMElement|jQuery"
      }
    ],
    "return": {
      "description": "received",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1017,
    "description": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
    "itemtype": "method",
    "name": "append",
    "return": {
      "description": "receiver",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1037,
    "description": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
    "itemtype": "method",
    "name": "remove",
    "return": {
      "description": "receiver",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1070,
    "description": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
    "itemtype": "method",
    "name": "findElementInParentElement",
    "params": [
      {
        "name": "parentElement",
        "description": "The parent's DOM element",
        "type": "DOMElement"
      }
    ],
    "return": {
      "description": "The discovered element",
      "type": "DOMElement"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1086,
    "description": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
    "itemtype": "method",
    "name": "createElement",
    "return": {
      "description": "receiver",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1133,
    "description": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
    "itemtype": "method",
    "name": "destroyElement",
    "return": {
      "description": "receiver",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1263,
    "description": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
    "itemtype": "method",
    "name": "removeFromParent",
    "return": {
      "description": "receiver",
      "type": "Ember.View"
    },
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1307,
    "description": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
    "itemtype": "method",
    "name": "handleEvent",
    "params": [
      {
        "name": "eventName",
        "description": "",
        "type": "String"
      },
      {
        "name": "evt",
        "description": "",
        "type": "Event"
      }
    ],
    "access": "private",
    "tagname": "",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/container_view.js",
    "line": 259,
    "description": "<p>Instructs each child view to render to the passed render buffer.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "render",
    "params": [
      {
        "name": "buffer",
        "description": "the buffer to render to",
        "type": "Ember.RenderBuffer"
      }
    ],
    "class": "Ember.ContainerView",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-views/lib/views/container_view.js",
    "line": 283,
    "description": "<p>When a child view is removed, destroy its element so that\nit is removed from the DOM.</p>\n<p>The array observer that triggers this action is set up in the\n<code>renderToBuffer</code> method.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "childViewsWillChange",
    "params": [
      {
        "name": "views",
        "description": "the child views array before mutation",
        "type": "Ember.Array"
      },
      {
        "name": "start",
        "description": "the start position of the mutation",
        "type": "Number"
      },
      {
        "name": "removed",
        "description": "the number of child views removed",
        "type": "Number"
      }
    ],
    "class": "Ember.ContainerView",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-views/lib/views/container_view.js",
    "line": 312,
    "description": "<p>When a child view is added, make sure the DOM gets updated appropriately.</p>\n<p>If the view has already rendered an element, we tell the child view to\ncreate an element and insert it into the DOM. If the enclosing container\nview has already written to a buffer, but not yet converted that buffer\ninto an element, we insert the string representation of the child into the\nappropriate place in the buffer.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "childViewsDidChange",
    "params": [
      {
        "name": "views",
        "description": "the array of child views after the mutation has occurred",
        "type": "Ember.Array"
      },
      {
        "name": "start",
        "description": "the start position of the mutation",
        "type": "Number"
      },
      {
        "name": "removed",
        "description": "the number of child views removed",
        "type": "Number"
      },
      {
        "name": "added",
        "description": "the number of child views added",
        "type": "Number"
      }
    ],
    "class": "Ember.ContainerView",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true
  }
]