{
  "name": "Ember.Namespace",
  "description": "<p>A Namespace is an object usually used to contain other objects or methods\nsuch as an application or framework. Create a namespace anytime you want\nto define one of these new containers.</p>\n<h1 id=\"example-usage\">Example Usage</h1>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyFramework = Ember.Namespace.create({\n  VERSION: <span class=\"hljs-string\">'1.0.0'</span>\n});</pre></td>      </tr>    </table>  </div></div>",
  "line": 18,
  "file": "packages/ember-runtime/lib/system/namespace.js",
  "methods": [
    {
      "name": "init",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "destroy",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "willDestroy",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "_scheduledDestroy",
      "isPrivate": true,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "toString",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "extend",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "createWithMixins",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "create",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "reopen",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "reopenClass",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "metaForProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "eachComputedProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "_onLookup",
      "isPrivate": true,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "_lazyInjections",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "get",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "getProperties",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "set",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "setProperties",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "beginPropertyChanges",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "endPropertyChanges",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "propertyWillChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "propertyDidChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "notifyPropertyChange",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "addObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "removeObserver",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "hasObserverFor",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "getWithDefault",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "incrementProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "decrementProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "toggleProperty",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    },
    {
      "name": "cacheFor",
      "isPrivate": false,
      "inheritedFrom": "Ember.Observable"
    }
  ],
  "properties": [
    {
      "name": "concatenatedProperties",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "isDestroyed",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    },
    {
      "name": "isDestroying",
      "isPrivate": false,
      "inheritedFrom": "Ember.CoreObject"
    }
  ],
  "events": [],
  "isPrivate": false,
  "constType": "Class"
}