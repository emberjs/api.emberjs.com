[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 276,
    "description": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
    "itemtype": "property",
    "name": "concatenatedProperties",
    "type": "Array",
    "default": "null",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 344,
    "description": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
    "itemtype": "property",
    "name": "isDestroyed",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 355,
    "description": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
    "itemtype": "property",
    "name": "isDestroying",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 28,
    "description": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "actions",
    "type": "Hash",
    "default": "null",
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ActionHandler"
  },
  {
    "file": "packages/ember-views/lib/views/core_view.js",
    "line": 60,
    "description": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
    "itemtype": "property",
    "name": "parentView",
    "type": "Ember.View",
    "default": "null",
    "class": "Ember.CoreView",
    "module": "ember",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreView"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 681,
    "itemtype": "property",
    "name": "isView",
    "type": "Boolean",
    "default": "true",
    "static": 1,
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 693,
    "description": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
    "itemtype": "property",
    "name": "templateName",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 705,
    "description": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
    "itemtype": "property",
    "name": "layoutName",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 717,
    "description": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
    "itemtype": "property",
    "name": "template",
    "type": "Function",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 739,
    "description": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
    "itemtype": "property",
    "name": "layout",
    "type": "Function",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 183,
    "description": "<p>The id in of the element, to be applied in the id attribute.</p>\n<p>You should not set this property yourself, rather, you should use\nthe <code>id()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
    "itemtype": "property",
    "name": "elementId",
    "type": "String",
    "default": "null",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1202,
    "description": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
    "itemtype": "property",
    "name": "tagName",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1218,
    "description": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
    "itemtype": "property",
    "name": "ariaRole",
    "type": "String",
    "default": "null",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/views/view.js",
    "line": 1395,
    "description": "<p>Global views hash</p>\n",
    "itemtype": "property",
    "name": "views",
    "static": 1,
    "type": "Hash",
    "class": "Ember.View",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "inheritedFrom": "Ember.View"
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 159,
    "description": "<p>An internal set used to de-dupe class names when <code>addClass()</code> is\nused. After each call to <code>addClass()</code>, the <code>classes</code> property\nwill be updated.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "elementClasses",
    "type": "Array",
    "default": "null",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 171,
    "description": "<p>Array of class names which will be applied in the class attribute.</p>\n<p>You can use <code>setClasses()</code> to set this property directly. If you\nuse <code>addClass()</code>, it will be maintained for you.</p>\n",
    "itemtype": "property",
    "name": "classes",
    "type": "Array",
    "default": "null",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 195,
    "description": "<p>A hash keyed on the name of the attribute and whose value will be\napplied to that attribute. For example, if you wanted to apply a\n<code>data-view=&quot;Foo.bar&quot;</code> property to an element, you would set the\nelementAttributes hash to <code>{&#39;data-view&#39;:&#39;Foo.bar&#39;}</code>.</p>\n<p>You should not maintain this hash yourself, rather, you should use\nthe <code>attr()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
    "itemtype": "property",
    "name": "elementAttributes",
    "type": "Hash",
    "default": "{}",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 210,
    "description": "<p>A hash keyed on the name of the properties and whose value will be\napplied to that property. For example, if you wanted to apply a\n<code>checked=true</code> property to an element, you would set the\nelementProperties hash to <code>{&#39;checked&#39;:true}</code>.</p>\n<p>You should not maintain this hash yourself, rather, you should use\nthe <code>prop()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
    "itemtype": "property",
    "name": "elementProperties",
    "type": "Hash",
    "default": "{}",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 225,
    "description": "<p>The tagname of the element an instance of <code>Ember.RenderBuffer</code> represents.</p>\n<p>Usually, this gets set as the first parameter to <code>Ember.RenderBuffer</code>. For\nexample, if you wanted to create a <code>p</code> tag, then you would call</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.RenderBuffer(<span class=\"hljs-string\">'p'</span>, contextualElement)</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "elementTag",
    "type": "String",
    "default": "null",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-views/lib/system/render_buffer.js",
    "line": 241,
    "description": "<p>A hash keyed on the name of the style attribute and whose value will\nbe applied to that attribute. For example, if you wanted to apply a\n<code>background-color:black;</code> style to an element, you would set the\nelementStyle hash to <code>{&#39;background-color&#39;:&#39;black&#39;}</code>.</p>\n<p>You should not maintain this hash yourself, rather, you should use\nthe <code>style()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
    "itemtype": "property",
    "name": "elementStyle",
    "type": "Hash",
    "default": "{}",
    "class": "Ember.Checkbox",
    "module": "ember",
    "submodule": "ember-views",
    "namespace": "Ember"
  }
]