[
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 72,
    "description": "<p>If no run-loop is present, it creates a new one. If a run loop is\npresent it will queue itself to run on the existing run-loops action\nqueue.</p>\n<p>Please note: This is not for normal usage, and should be used sparingly.</p>\n<p>If invoked when not within a run loop:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.join(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// creates a new run-loop</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Alternatively, if called within an existing run loop:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// creates a new run-loop</span>\n  run.join(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// joins with the existing run-loop, and queues for invocation on</span>\n    <span class=\"hljs-comment\">// the existing run-loops action queue.</span>\n  });\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "join",
    "params": [
      {
        "name": "target",
        "description": "target of method to call",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Any additional arguments you wish to pass to the method.",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "Return value from invoking the passed function. Please note,\nwhen called within an existing loop, no return value is possible.",
      "type": "Object"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 113,
    "description": "<p>Allows you to specify which context to call the specified function in while\nadding the execution of that function to the Ember run loop. This ability\nmakes this method a great way to asynchronously integrate third-party libraries\ninto your Ember application.</p>\n<p><code>run.bind</code> takes two main arguments, the desired context and the function to\ninvoke in that context. Any additional arguments will be supplied as arguments\nto the function that is passed in.</p>\n<p>Let&#39;s use the creation of a TinyMCE component as an example. Currently,\nTinyMCE provides a setup configuration option we can use to do some processing\nafter the TinyMCE instance is initialized but before it is actually rendered.\nWe can use that setup option to do some additional setup for our component.\nThe component itself could look something like the following:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.RichTextEditorComponent = Ember.Component.extend({\n  initializeTinyMCE: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    tinymce.init({\n      selector: <span class=\"hljs-string\">'#'</span> + <span class=\"hljs-keyword\">this</span>.$().prop(<span class=\"hljs-string\">'id'</span>),\n      setup: Ember.run.bind(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-keyword\">this</span>.setupEditor)\n    });\n  }.on(<span class=\"hljs-string\">'didInsertElement'</span>),\n\n  setupEditor: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(editor)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'editor'</span>, editor);\n\n    editor.on(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'content changed!'</span>);\n    });\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>In this example, we use Ember.run.bind to bind the setupEditor message to the\ncontext of the App.RichTextEditorComponent and to have the invocation of that\nmethod be safely handled and executed by the Ember run loop.</p>\n",
    "itemtype": "method",
    "name": "bind",
    "params": [
      {
        "name": "target",
        "description": "target of method to call",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Any additional arguments you wish to pass to the method.",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "returns a new function that will always have a particular context",
      "type": "Function"
    },
    "since": "1.4.0",
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 173,
    "description": "<p>Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to <code>run.end()</code>. This is\na lower-level way to use a RunLoop instead of using <code>run()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.begin();\n<span class=\"hljs-comment\">// code to be executed within a RunLoop</span>\nrun.end();</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "begin",
    "return": {
      "description": "",
      "type": "Void"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 191,
    "description": "<p>Ends a RunLoop. This must be called sometime after you call\n<code>run.begin()</code> to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using <code>run()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.begin();\n<span class=\"hljs-comment\">// code to be executed within a RunLoop</span>\nrun.end();</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "end",
    "return": {
      "description": "",
      "type": "Void"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 220,
    "description": "<p>Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.</p>\n<p>At the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe <code>run.queues</code> property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.schedule(<span class=\"hljs-string\">'sync'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// this will be executed in the first RunLoop queue, when bindings are synced</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'scheduled on sync queue'</span>);\n});\n\nrun.schedule(<span class=\"hljs-string\">'actions'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// this will be executed in the 'actions' queue, after bindings have synced.</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'scheduled on actions queue'</span>);\n});\n\n<span class=\"hljs-comment\">// Note the functions will be run in order based on the run queues order.</span>\n<span class=\"hljs-comment\">// Output would be:</span>\n<span class=\"hljs-comment\">//   scheduled on sync queue</span>\n<span class=\"hljs-comment\">//   scheduled on actions queue</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "schedule",
    "params": [
      {
        "name": "queue",
        "description": "The name of the queue to schedule against.\n  Default queues are 'sync' and 'actions'",
        "type": "String"
      },
      {
        "name": "target",
        "description": "target object to use as the context when invoking a method.",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke. If you pass a string it\n  will be resolved on the target object at the time the scheduled item is\n  invoked allowing you to change the target function.",
        "type": "String|Function"
      },
      {
        "name": "arguments*",
        "description": "Optional arguments to be passed to the queued method.",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "",
      "type": "Void"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 272,
    "description": "<p>Immediately flushes any events scheduled in the &#39;sync&#39; queue. Bindings\nuse this queue so this method is a useful way to immediately force all\nbindings in the application to sync.</p>\n<p>You should call this method anytime you need any changed state to propagate\nthroughout the app immediately without repainting the UI (which happens\nin the later &#39;render&#39; queue added by the <code>ember-views</code> package).</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.sync();</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "sync",
    "return": {
      "description": "",
      "type": "Void"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 294,
    "description": "<p>Invokes the passed target/method and optional arguments after a specified\nperiod of time. The last parameter of this method must always be a number\nof milliseconds.</p>\n<p>You should use this method whenever you need to run some action after a\nperiod of time instead of using <code>setTimeout()</code>. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.later(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// code here will execute within a RunLoop in about 500ms with this == myContext</span>\n}, <span class=\"hljs-number\">500</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "later",
    "params": [
      {
        "name": "target",
        "description": "target of method to invoke",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Optional arguments to pass to the timeout.",
        "type": "Object",
        "optional": true
      },
      {
        "name": "wait",
        "description": "Number of milliseconds to wait.",
        "type": "Number"
      }
    ],
    "return": {
      "description": "Timer information for use in cancelling, see `run.cancel`.",
      "type": "*"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 323,
    "description": "<p>Schedule a function to run one time during the current RunLoop. This is equivalent\nto calling <code>scheduleOnce</code> with the &quot;actions&quot; queue.</p>\n",
    "itemtype": "method",
    "name": "once",
    "params": [
      {
        "name": "target",
        "description": "The target of the method to invoke.",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Optional arguments to pass to the timeout.",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "Timer information for use in cancelling, see `run.cancel`.",
      "type": "Object"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 346,
    "description": "<p>Schedules a function to run one time in a given queue of the current RunLoop.\nCalling this method with the same queue/target/method combination will have\nno effect (past the initial call).</p>\n<p>Note that although you can pass optional arguments these will not be\nconsidered when looking for duplicates. New arguments will replace previous\ncalls.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hi'</span>);\n}\n\nrun(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  run.scheduleOnce(<span class=\"hljs-string\">'afterRender'</span>, myContext, sayHi);\n  run.scheduleOnce(<span class=\"hljs-string\">'afterRender'</span>, myContext, sayHi);\n  <span class=\"hljs-comment\">// sayHi will only be executed once, in the afterRender queue of the RunLoop</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Also note that passing an anonymous function to <code>run.scheduleOnce</code> will\nnot prevent additional calls with an identical anonymous function from\nscheduling the items multiple times, e.g.:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scheduleIt</span><span class=\"hljs-params\">()</span> </span>{\n  run.scheduleOnce(<span class=\"hljs-string\">'actions'</span>, myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Closure'</span>);\n  });\n}\n\nscheduleIt();\nscheduleIt();\n\n<span class=\"hljs-comment\">// \"Closure\" will print twice, even though we're using `run.scheduleOnce`,</span>\n<span class=\"hljs-comment\">// because the function we pass to it is anonymous and won't match the</span>\n<span class=\"hljs-comment\">// previously scheduled operation.</span></pre></td>      </tr>    </table>  </div></div><p>Available queues, and their order, can be found at <code>run.queues</code></p>\n",
    "itemtype": "method",
    "name": "scheduleOnce",
    "params": [
      {
        "name": "queue",
        "description": "The name of the queue to schedule against. Default queues are 'sync' and 'actions'.",
        "type": "String",
        "optional": true
      },
      {
        "name": "target",
        "description": "The target of the method to invoke.",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Optional arguments to pass to the timeout.",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "Timer information for use in cancelling, see `run.cancel`.",
      "type": "Object"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 402,
    "description": "<p>Schedules an item to run from within a separate run loop, after\ncontrol has been returned to the system. This is equivalent to calling\n<code>run.later</code> with a wait time of 1ms.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.next(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// code to be executed in the next run loop,</span>\n  <span class=\"hljs-comment\">// which will be scheduled after the current one</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Multiple operations scheduled with <code>run.next</code> will coalesce\ninto the same later run loop, along with any other operations\nscheduled by <code>run.later</code> that expire right around the same\ntime that <code>run.next</code> operations will fire.</p>\n<p>Note that there are often alternatives to using <code>run.next</code>.\nFor instance, if you&#39;d like to schedule an operation to happen\nafter all DOM element operations have completed within the current\nrun loop, you can make use of the <code>afterRender</code> run loop queue (added\nby the <code>ember-views</code> package, along with the preceding <code>render</code> queue\nwhere all the DOM element operations happen). Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyCollectionView = Ember.CollectionView.extend({\n  didInsertElement: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    run.scheduleOnce(<span class=\"hljs-string\">'afterRender'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">'processChildElements'</span>);\n  },\n  processChildElements: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// ... do something with collectionView's child view</span>\n    <span class=\"hljs-comment\">// elements after they've finished rendering, which</span>\n    <span class=\"hljs-comment\">// can't be done within the CollectionView's</span>\n    <span class=\"hljs-comment\">// `didInsertElement` hook because that gets run</span>\n    <span class=\"hljs-comment\">// before the child elements have been added to the DOM.</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>One benefit of the above approach compared to using <code>run.next</code> is\nthat you will be able to perform DOM/CSS operations before unprocessed\nelements are rendered to the screen, which may prevent flickering or\nother artifacts caused by delaying processing until after rendering.</p>\n<p>The other major benefit to the above approach is that <code>run.next</code>\nintroduces an element of non-determinism, which can make things much\nharder to test, due to its reliance on <code>setTimeout</code>; it&#39;s much harder\nto guarantee the order of scheduled operations when they are scheduled\noutside of the current run loop, i.e. with <code>run.next</code>.</p>\n",
    "itemtype": "method",
    "name": "next",
    "params": [
      {
        "name": "target",
        "description": "target of method to invoke",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Optional arguments to pass to the timeout.",
        "type": "Object",
        "optional": true
      }
    ],
    "return": {
      "description": "Timer information for use in cancelling, see `run.cancel`.",
      "type": "Object"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 466,
    "description": "<p>Cancels a scheduled item. Must be a value returned by <code>run.later()</code>,\n<code>run.once()</code>, <code>run.next()</code>, <code>run.debounce()</code>, or\n<code>run.throttle()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> runNext = run.next(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n});\n\nrun.cancel(runNext);\n\n<span class=\"hljs-keyword\">var</span> runLater = run.later(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n}, <span class=\"hljs-number\">500</span>);\n\nrun.cancel(runLater);\n\n<span class=\"hljs-keyword\">var</span> runOnce = run.once(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n});\n\nrun.cancel(runOnce);\n\n<span class=\"hljs-keyword\">var</span> throttle = run.throttle(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n}, <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>);\n\nrun.cancel(throttle);\n\n<span class=\"hljs-keyword\">var</span> debounce = run.debounce(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n}, <span class=\"hljs-number\">1</span>);\n\nrun.cancel(debounce);\n\n<span class=\"hljs-keyword\">var</span> debounceImmediate = run.debounce(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will be executed since we passed in true (immediate)</span>\n}, <span class=\"hljs-number\">100</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// the 100ms delay until this method can be called again will be cancelled</span>\nrun.cancel(debounceImmediate);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "cancel",
    "params": [
      {
        "name": "timer",
        "description": "Timer object to cancel",
        "type": "Object"
      }
    ],
    "return": {
      "description": "true if cancelled or false/undefined if it wasn't found",
      "type": "Boolean"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 518,
    "description": "<p>Delay calling the target method until the debounce period has elapsed\nwith no additional debounce calls. If <code>debounce</code> is called again before\nthe specified time has elapsed, the timer is reset and the entire period\nmust pass again before the target method is called.</p>\n<p>This method should be used when an event may be called multiple times\nbut the action should only be called once when the event is done firing.\nA common example is for scroll events where you only want updates to\nhappen once scrolling has ceased.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whoRan</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">' ran.'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myContext = { name: <span class=\"hljs-string\">'debounce'</span> };\n\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// less than 150ms passes</span>\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// 150ms passes</span>\n<span class=\"hljs-comment\">// whoRan is invoked with context myContext</span>\n<span class=\"hljs-comment\">// console logs 'debounce ran.' one time.</span></pre></td>      </tr>    </table>  </div></div><p>Immediate allows you to run the function immediately, but debounce\nother calls for this function until the wait time has elapsed. If\n<code>debounce</code> is called again before the specified time has elapsed,\nthe timer is reset and the entire period must pass again before\nthe method can be called again.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whoRan</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">' ran.'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myContext = { name: <span class=\"hljs-string\">'debounce'</span> };\n\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// console logs 'debounce ran.' one time immediately.</span>\n<span class=\"hljs-comment\">// 100ms passes</span>\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// 150ms passes and nothing else is logged to the console and</span>\n<span class=\"hljs-comment\">// the debouncee is no longer being watched</span>\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// console logs 'debounce ran.' one time immediately.</span>\n<span class=\"hljs-comment\">// 150ms passes and nothing else is logged to the console and</span>\n<span class=\"hljs-comment\">// the debouncee is no longer being watched</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "debounce",
    "params": [
      {
        "name": "target",
        "description": "target of method to invoke",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Optional arguments to pass to the timeout.",
        "type": "Object",
        "optional": true
      },
      {
        "name": "wait",
        "description": "Number of milliseconds to wait.",
        "type": "Number"
      },
      {
        "name": "immediate",
        "description": "Trigger the function on the leading instead\n  of the trailing edge of the wait interval. Defaults to false.",
        "type": "Boolean"
      }
    ],
    "return": {
      "description": "Timer information for use in cancelling, see `run.cancel`.",
      "type": "Array"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 590,
    "description": "<p>Ensure that the target method is never called more frequently than\nthe specified spacing period. The target method is called immediately.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whoRan</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">' ran.'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myContext = { name: <span class=\"hljs-string\">'throttle'</span> };\n\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n<span class=\"hljs-comment\">// whoRan is invoked with context myContext</span>\n<span class=\"hljs-comment\">// console logs 'throttle ran.'</span>\n\n<span class=\"hljs-comment\">// 50ms passes</span>\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// 50ms passes</span>\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// 150ms passes</span>\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n<span class=\"hljs-comment\">// whoRan is invoked with context myContext</span>\n<span class=\"hljs-comment\">// console logs 'throttle ran.'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "throttle",
    "params": [
      {
        "name": "target",
        "description": "target of method to invoke",
        "type": "Object",
        "optional": true
      },
      {
        "name": "method",
        "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
        "type": "Function|String"
      },
      {
        "name": "args*",
        "description": "Optional arguments to pass to the timeout.",
        "type": "Object",
        "optional": true
      },
      {
        "name": "spacing",
        "description": "Number of milliseconds to space out requests.",
        "type": "Number"
      },
      {
        "name": "immediate",
        "description": "Trigger the function on the leading instead\n  of the trailing edge of the wait interval. Defaults to true.",
        "type": "Boolean"
      }
    ],
    "return": {
      "description": "Timer information for use in cancelling, see `run.cancel`.",
      "type": "Array"
    },
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/run_loop.js",
    "line": 640,
    "description": "<p>Add a new named queue after the specified queue.</p>\n<p>The queue to add will only be added once.</p>\n",
    "itemtype": "method",
    "name": "_addQueue",
    "params": [
      {
        "name": "name",
        "description": "the name of the queue to add.",
        "type": "String"
      },
      {
        "name": "after",
        "description": "the name of the queue to add after.",
        "type": "String"
      }
    ],
    "access": "private",
    "tagname": "",
    "class": "Ember.run",
    "module": "ember-metal",
    "namespace": "Ember",
    "isPrivate": true
  }
]