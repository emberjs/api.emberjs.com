[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 276,
    "description": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
    "itemtype": "property",
    "name": "concatenatedProperties",
    "type": "Array",
    "default": "null",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 344,
    "description": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
    "itemtype": "property",
    "name": "isDestroyed",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 355,
    "description": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
    "itemtype": "property",
    "name": "isDestroying",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/action_handler.js",
    "line": 28,
    "description": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "actions",
    "type": "Hash",
    "default": "null",
    "class": "Ember.ActionHandler",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.ActionHandler"
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 46,
    "description": "<p>Configuration hash for this route&#39;s queryParams. The possible\nconfiguration options and their defaults are as follows\n(assuming a query param whose URL key is <code>page</code>):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">queryParams: {\n  page: {\n    <span class=\"hljs-comment\">// By default, controller query param properties don't</span>\n    <span class=\"hljs-comment\">// cause a full transition when they are changed, but</span>\n    <span class=\"hljs-comment\">// rather only cause the URL to update. Setting</span>\n    <span class=\"hljs-comment\">// `refreshModel` to true will cause an \"in-place\"</span>\n    <span class=\"hljs-comment\">// transition to occur, whereby the model hooks for</span>\n    <span class=\"hljs-comment\">// this route (and any child routes) will re-fire, allowing</span>\n    <span class=\"hljs-comment\">// you to reload models (e.g., from the server) using the</span>\n    <span class=\"hljs-comment\">// updated query param values.</span>\n    refreshModel: <span class=\"hljs-literal\">false</span>,\n\n    <span class=\"hljs-comment\">// By default, changes to controller query param properties</span>\n    <span class=\"hljs-comment\">// cause the URL to update via `pushState`, which means an</span>\n    <span class=\"hljs-comment\">// item will be added to the browser's history, allowing</span>\n    <span class=\"hljs-comment\">// you to use the back button to restore the app to the</span>\n    <span class=\"hljs-comment\">// previous state before the query param property was changed.</span>\n    <span class=\"hljs-comment\">// Setting `replace` to true will use `replaceState` (or its</span>\n    <span class=\"hljs-comment\">// hash location equivalent), which causes no browser history</span>\n    <span class=\"hljs-comment\">// item to be added. This options name and default value are</span>\n    <span class=\"hljs-comment\">// the same as the `link-to` helper's `replace` option.</span>\n    replace: <span class=\"hljs-literal\">false</span>\n  }\n}</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "queryParams",
    "type": "Hash",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 84,
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_qp",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 154,
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_names",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 194,
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_updateSerializedQPValue",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 204,
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_activeQPChanged",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 308,
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_fireQueryParamTransition",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 317,
    "access": "private",
    "tagname": "",
    "itemtype": "property",
    "name": "_optionsForQueryParam",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 386,
    "description": "<p>The name of the view to use by default when rendering this routes template.</p>\n<p>When rendering a template, the route will, by default, determine the\ntemplate and view to use from the name of the route itself. If you need to\ndefine a specific view, set this property.</p>\n<p>This is useful when multiple routes would benefit from using the same view\nbecause it doesn&#39;t require a custom <code>renderTemplate</code> method. For example,\nthe following routes will all render using the <code>App.PostsListView</code> view:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> PostsList = Ember.Route.extend({\n  viewName: <span class=\"hljs-string\">'postsList'</span>\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "viewName",
    "type": "String",
    "default": "null",
    "since": "1.4.0",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 413,
    "description": "<p>The name of the template to use by default when rendering this routes\ntemplate.</p>\n<p>This is similar with <code>viewName</code>, but is useful when you just want a custom\ntemplate without a view.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> PostsList = Ember.Route.extend({\n  templateName: <span class=\"hljs-string\">'posts/list'</span>\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "templateName",
    "type": "String",
    "default": "null",
    "since": "1.4.0",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 436,
    "description": "<p>The name of the controller to associate with this route.</p>\n<p>By default, Ember will lookup a route&#39;s controller that matches the name\nof the route (i.e. <code>App.PostController</code> for <code>App.PostRoute</code>). However,\nif you would like to define a specific controller to use, you can do so\nusing this property.</p>\n<p>This is useful in many ways, as the controller specified will be:</p>\n<ul>\n<li>passed to the <code>setupController</code> method.</li>\n<li>used as the controller for the view being rendered by the route.</li>\n<li>returned from a call to <code>controllerFor</code> for the route.</li>\n</ul>\n",
    "itemtype": "property",
    "name": "controllerName",
    "type": "String",
    "default": "null",
    "since": "1.4.0",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-routing/lib/system/route.js",
    "line": 632,
    "description": "<p>The controller associated with this route.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.FormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(transition)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.controller.get(<span class=\"hljs-string\">'userHasEnteredData'</span>) &amp;&amp;\n          !confirm(<span class=\"hljs-string\">'Are you sure you want to abandon progress?'</span>)) {\n        transition.abort();\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Bubble the `willTransition` action so that</span>\n        <span class=\"hljs-comment\">// parent routes can decide whether or not to abort.</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "controller",
    "type": "Ember.Controller",
    "since": "1.6.0",
    "class": "Ember.Route",
    "module": "ember",
    "submodule": "ember-routing",
    "namespace": "Ember"
  }
]