[
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 35,
    "description": "<p>A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> ToDoList = Ember.Object.extend({\n  isDone: Ember.computed.empty(<span class=\"hljs-string\">'todos'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> todoList = ToDoList.create({\n  todos: [<span class=\"hljs-string\">'Unit Test'</span>, <span class=\"hljs-string\">'Documentation'</span>, <span class=\"hljs-string\">'Release'</span>]\n});\n\ntodoList.get(<span class=\"hljs-string\">'isDone'</span>); <span class=\"hljs-comment\">// false</span>\ntodoList.get(<span class=\"hljs-string\">'todos'</span>).clear();\ntodoList.get(<span class=\"hljs-string\">'isDone'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "since": "1.6.0",
    "itemtype": "method",
    "name": "empty",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which negate\nthe original value for property",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 68,
    "description": "<p>A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasStuff: Ember.computed.notEmpty(<span class=\"hljs-string\">'backpack'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({ backpack: [<span class=\"hljs-string\">'Food'</span>, <span class=\"hljs-string\">'Sleeping Bag'</span>, <span class=\"hljs-string\">'Tent'</span>] });\n\nhamster.get(<span class=\"hljs-string\">'hasStuff'</span>);         <span class=\"hljs-comment\">// true</span>\nhamster.get(<span class=\"hljs-string\">'backpack'</span>).clear(); <span class=\"hljs-comment\">// []</span>\nhamster.get(<span class=\"hljs-string\">'hasStuff'</span>);         <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "notEmpty",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which returns true if\noriginal value for property is not empty.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 98,
    "description": "<p>A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  isHungry: Ember.computed.none(<span class=\"hljs-string\">'food'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'isHungry'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'food'</span>, <span class=\"hljs-string\">'Banana'</span>);\nhamster.get(<span class=\"hljs-string\">'isHungry'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'food'</span>, <span class=\"hljs-literal\">null</span>);\nhamster.get(<span class=\"hljs-string\">'isHungry'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "none",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which\nreturns true if original value for property is null or undefined.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 131,
    "description": "<p>A computed property that returns the inverse boolean value\nof the original value for the dependent property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  isAnonymous: Ember.computed.not(<span class=\"hljs-string\">'loggedIn'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> user = User.create({loggedIn: <span class=\"hljs-literal\">false</span>});\n\nuser.get(<span class=\"hljs-string\">'isAnonymous'</span>); <span class=\"hljs-comment\">// true</span>\nuser.set(<span class=\"hljs-string\">'loggedIn'</span>, <span class=\"hljs-literal\">true</span>);\nuser.get(<span class=\"hljs-string\">'isAnonymous'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "not",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which returns\ninverse of the original value for property",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 161,
    "description": "<p>A computed property that converts the provided dependent property\ninto a boolean value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasBananas: Ember.computed.bool(<span class=\"hljs-string\">'numBananas'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">0</span>);\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">1</span>);\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-literal\">null</span>);\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "bool",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which converts\nto boolean the original value for property",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 193,
    "description": "<p>A computed property which matches the original value for the\ndependent property against a given RegExp, returning <code>true</code>\nif they values matches the RegExp and <code>false</code> if it does not.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  hasValidEmail: Ember.computed.match(<span class=\"hljs-string\">'email'</span>, <span class=\"hljs-regexp\">/^.+@.+\\..+$/</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> user = User.create({loggedIn: <span class=\"hljs-literal\">false</span>});\n\nuser.get(<span class=\"hljs-string\">'hasValidEmail'</span>); <span class=\"hljs-comment\">// false</span>\nuser.set(<span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">''</span>);\nuser.get(<span class=\"hljs-string\">'hasValidEmail'</span>); <span class=\"hljs-comment\">// false</span>\nuser.set(<span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'ember_hamster@example.com'</span>);\nuser.get(<span class=\"hljs-string\">'hasValidEmail'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "match",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "regexp",
        "description": "",
        "type": "RegExp"
      }
    ],
    "return": {
      "description": "computed property which match\nthe original value for property against a given RegExp",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 229,
    "description": "<p>A computed property that returns true if the provided dependent property\nis equal to the given value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  napTime: Ember.computed.equal(<span class=\"hljs-string\">'state'</span>, <span class=\"hljs-string\">'sleepy'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'napTime'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'state'</span>, <span class=\"hljs-string\">'sleepy'</span>);\nhamster.get(<span class=\"hljs-string\">'napTime'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'state'</span>, <span class=\"hljs-string\">'hungry'</span>);\nhamster.get(<span class=\"hljs-string\">'napTime'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "equal",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "value",
        "description": "",
        "type": "String|Number|Object"
      }
    ],
    "return": {
      "description": "computed property which returns true if\nthe original value for property is equal to the given value.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 262,
    "description": "<p>A computed property that returns true if the provided dependent property\nis greater than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gt(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">10</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">11</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "gt",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "value",
        "description": "",
        "type": "Number"
      }
    ],
    "return": {
      "description": "computed property which returns true if\nthe original value for property is greater than given value.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 295,
    "description": "<p>A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gte(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">10</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">10</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "gte",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "value",
        "description": "",
        "type": "Number"
      }
    ],
    "return": {
      "description": "computed property which returns true if\nthe original value for property is greater or equal then given value.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 328,
    "description": "<p>A computed property that returns true if the provided dependent property\nis less than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lt(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">2</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "lt",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "value",
        "description": "",
        "type": "Number"
      }
    ],
    "return": {
      "description": "computed property which returns true if\nthe original value for property is less then given value.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 361,
    "description": "<p>A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lte(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">5</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "lte",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "value",
        "description": "",
        "type": "Number"
      }
    ],
    "return": {
      "description": "computed property which returns true if\nthe original value for property is less or equal than given value.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 394,
    "description": "<p>A computed property that performs a logical <code>and</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  readyForCamp: Ember.computed.and(<span class=\"hljs-string\">'hasTent'</span>, <span class=\"hljs-string\">'hasBackpack'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'hasTent'</span>, <span class=\"hljs-literal\">true</span>);\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'hasBackpack'</span>, <span class=\"hljs-literal\">true</span>);\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'hasBackpack'</span>, <span class=\"hljs-string\">'Yes'</span>);\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// 'Yes'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "and",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computed property which performs\na logical `and` on the values of all the original values for properties.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 433,
    "description": "<p>A computed property which performs a logical <code>or</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  readyForRain: Ember.computed.or(<span class=\"hljs-string\">'hasJacket'</span>, <span class=\"hljs-string\">'hasUmbrella'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'readyForRain'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'hasUmbrella'</span>, <span class=\"hljs-literal\">true</span>);\nhamster.get(<span class=\"hljs-string\">'readyForRain'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'hasJacket'</span>, <span class=\"hljs-string\">'Yes'</span>);\nhamster.get(<span class=\"hljs-string\">'readyForRain'</span>); <span class=\"hljs-comment\">// 'Yes'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "or",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computed property which performs\na logical `or` on the values of all the original values for properties.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 468,
    "description": "<p>A computed property that returns the first truthy value\nfrom a list of dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasClothes: Ember.computed.any(<span class=\"hljs-string\">'hat'</span>, <span class=\"hljs-string\">'shirt'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasClothes'</span>); <span class=\"hljs-comment\">// null</span>\nhamster.set(<span class=\"hljs-string\">'shirt'</span>, <span class=\"hljs-string\">'Hawaiian Shirt'</span>);\nhamster.get(<span class=\"hljs-string\">'hasClothes'</span>); <span class=\"hljs-comment\">// 'Hawaiian Shirt'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "any",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computed property which returns\nthe first truthy value of given list of properties.",
      "type": "Ember.ComputedProperty"
    },
    "deprecated": true,
    "deprecationMessage": "Use `Ember.computed.or` instead.",
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 502,
    "description": "<p>A computed property that returns the array of values\nfor the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  clothes: Ember.computed.collect(<span class=\"hljs-string\">'hat'</span>, <span class=\"hljs-string\">'shirt'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'clothes'</span>); <span class=\"hljs-comment\">// [null, null]</span>\nhamster.set(<span class=\"hljs-string\">'hat'</span>, <span class=\"hljs-string\">'Camp Hat'</span>);\nhamster.set(<span class=\"hljs-string\">'shirt'</span>, <span class=\"hljs-string\">'Camp Shirt'</span>);\nhamster.get(<span class=\"hljs-string\">'clothes'</span>); <span class=\"hljs-comment\">// ['Camp Hat', 'Camp Shirt']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "collect",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computed property which maps\nvalues of all passed in properties to an array.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 541,
    "description": "<p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'Alex Matchneer'</span>,\n  nomen: Ember.computed.alias(<span class=\"hljs-string\">'name'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> alex = Person.create();\n\nalex.get(<span class=\"hljs-string\">'nomen'</span>); <span class=\"hljs-comment\">// 'Alex Matchneer'</span>\nalex.get(<span class=\"hljs-string\">'name'</span>);  <span class=\"hljs-comment\">// 'Alex Matchneer'</span>\n\nalex.set(<span class=\"hljs-string\">'nomen'</span>, <span class=\"hljs-string\">'@machty'</span>);\nalex.get(<span class=\"hljs-string\">'name'</span>);  <span class=\"hljs-comment\">// '@machty'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "alias",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which creates an\nalias to the original value for property.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 568,
    "description": "<p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional\ndata flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permanently\ndiverge from the upstream property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n  nickName: Ember.computed.oneWay(<span class=\"hljs-string\">'firstName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> teddy = User.create({\n  firstName: <span class=\"hljs-string\">'Teddy'</span>,\n  lastName:  <span class=\"hljs-string\">'Zeenny'</span>\n});\n\nteddy.get(<span class=\"hljs-string\">'nickName'</span>);              <span class=\"hljs-comment\">// 'Teddy'</span>\nteddy.set(<span class=\"hljs-string\">'nickName'</span>, <span class=\"hljs-string\">'TeddyBear'</span>); <span class=\"hljs-comment\">// 'TeddyBear'</span>\nteddy.get(<span class=\"hljs-string\">'firstName'</span>);             <span class=\"hljs-comment\">// 'Teddy'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "oneWay",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which creates a\none way computed property to the original value for property.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 604,
    "description": "<p>This is a more semantically meaningful alias of <code>computed.oneWay</code>,\nwhose name is somewhat ambiguous as to which direction the data flows.</p>\n",
    "itemtype": "method",
    "name": "reads",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which creates a\n  one way computed property to the original value for property.",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 615,
    "description": "<p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides\na readOnly one way binding. Very often when using <code>computed.oneWay</code> one does\nnot also want changes to propagate back up, as they will replace the value.</p>\n<p>This prevents the reverse flow, and also throws an exception when it occurs.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n  nickName: Ember.computed.readOnly(<span class=\"hljs-string\">'firstName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> teddy = User.create({\n  firstName: <span class=\"hljs-string\">'Teddy'</span>,\n  lastName:  <span class=\"hljs-string\">'Zeenny'</span>\n});\n\nteddy.get(<span class=\"hljs-string\">'nickName'</span>);              <span class=\"hljs-comment\">// 'Teddy'</span>\nteddy.set(<span class=\"hljs-string\">'nickName'</span>, <span class=\"hljs-string\">'TeddyBear'</span>); <span class=\"hljs-comment\">// throws Exception</span>\n<span class=\"hljs-comment\">// throw new Ember.Error('Cannot Set: nickName on: &lt;User:ember27288&gt;' );`</span>\nteddy.get(<span class=\"hljs-string\">'firstName'</span>);             <span class=\"hljs-comment\">// 'Teddy'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "readOnly",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which creates a\none way computed property to the original value for property.",
      "type": "Ember.ComputedProperty"
    },
    "since": "1.5.0",
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 653,
    "description": "<p>A computed property that acts like a standard getter and setter,\nbut returns the value at the provided <code>defaultPath</code> if the\nproperty itself has not been set to a value</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  wishList: Ember.computed.defaultTo(<span class=\"hljs-string\">'favoriteFood'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({ favoriteFood: <span class=\"hljs-string\">'Banana'</span> });\n\nhamster.get(<span class=\"hljs-string\">'wishList'</span>);                     <span class=\"hljs-comment\">// 'Banana'</span>\nhamster.set(<span class=\"hljs-string\">'wishList'</span>, <span class=\"hljs-string\">'More Unit Tests'</span>);\nhamster.get(<span class=\"hljs-string\">'wishList'</span>);                     <span class=\"hljs-comment\">// 'More Unit Tests'</span>\nhamster.get(<span class=\"hljs-string\">'favoriteFood'</span>);                 <span class=\"hljs-comment\">// 'Banana'</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "defaultTo",
    "params": [
      {
        "name": "defaultPath",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which acts like\na standard getter and setter, but defaults to the value from `defaultPath`.",
      "type": "Ember.ComputedProperty"
    },
    "deprecated": true,
    "deprecationMessage": "Use `Ember.computed.oneWay` or custom CP with default instead.",
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-metal/lib/computed_macros.js",
    "line": 691,
    "description": "<p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property, but also\nprint a deprecation warning.</p>\n",
    "itemtype": "method",
    "name": "deprecatingAlias",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computed property which creates an\nalias with a deprecation to the original value for property.",
      "type": "Ember.ComputedProperty"
    },
    "since": "1.7.0",
    "class": "Ember.computed",
    "module": "ember-metal",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 26,
    "description": "<p>A computed property that returns the sum of the value\nin the dependent array.</p>\n",
    "itemtype": "method",
    "name": "sum",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computes the sum of all values in the dependentKey's array",
      "type": "Ember.ComputedProperty"
    },
    "since": "1.4.0",
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 51,
    "description": "<p>A computed property that calculates the maximum value in the\ndependent array. This will return <code>-Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy(<span class=\"hljs-string\">'children'</span>, <span class=\"hljs-string\">'age'</span>),\n  maxChildAge: Ember.computed.max(<span class=\"hljs-string\">'childAges'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> lordByron = Person.create({ children: [] });\n\nlordByron.get(<span class=\"hljs-string\">'maxChildAge'</span>); <span class=\"hljs-comment\">// -Infinity</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObject({\n  name: <span class=\"hljs-string\">'Augusta Ada Byron'</span>, age: <span class=\"hljs-number\">7</span>\n});\nlordByron.get(<span class=\"hljs-string\">'maxChildAge'</span>); <span class=\"hljs-comment\">// 7</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObjects([{\n  name: <span class=\"hljs-string\">'Allegra Byron'</span>,\n  age: <span class=\"hljs-number\">5</span>\n}, {\n  name: <span class=\"hljs-string\">'Elizabeth Medora Leigh'</span>,\n  age: <span class=\"hljs-number\">8</span>\n}]);\nlordByron.get(<span class=\"hljs-string\">'maxChildAge'</span>); <span class=\"hljs-comment\">// 8</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "max",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computes the largest value in the dependentKey's array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 100,
    "description": "<p>A computed property that calculates the minimum value in the\ndependent array. This will return <code>Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy(<span class=\"hljs-string\">'children'</span>, <span class=\"hljs-string\">'age'</span>),\n  minChildAge: Ember.computed.min(<span class=\"hljs-string\">'childAges'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> lordByron = Person.create({ children: [] });\n\nlordByron.get(<span class=\"hljs-string\">'minChildAge'</span>); <span class=\"hljs-comment\">// Infinity</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObject({\n  name: <span class=\"hljs-string\">'Augusta Ada Byron'</span>, age: <span class=\"hljs-number\">7</span>\n});\nlordByron.get(<span class=\"hljs-string\">'minChildAge'</span>); <span class=\"hljs-comment\">// 7</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObjects([{\n  name: <span class=\"hljs-string\">'Allegra Byron'</span>,\n  age: <span class=\"hljs-number\">5</span>\n}, {\n  name: <span class=\"hljs-string\">'Elizabeth Medora Leigh'</span>,\n  age: <span class=\"hljs-number\">8</span>\n}]);\nlordByron.get(<span class=\"hljs-string\">'minChildAge'</span>); <span class=\"hljs-comment\">// 5</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "min",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computes the smallest value in the dependentKey's array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 149,
    "description": "<p>Returns an array mapped via the callback</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index)</span>;</span></pre></td>      </tr>    </table>  </div></div><p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  excitingChores: Ember.computed.map(<span class=\"hljs-string\">'chores'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(chore, index)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> chore.toUpperCase() + <span class=\"hljs-string\">'!'</span>;\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  chores: [<span class=\"hljs-string\">'clean'</span>, <span class=\"hljs-string\">'write more unit tests'</span>]\n});\n\nhamster.get(<span class=\"hljs-string\">'excitingChores'</span>); <span class=\"hljs-comment\">// ['CLEAN!', 'WRITE MORE UNIT TESTS!']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "map",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "callback",
        "description": "",
        "type": "Function"
      }
    ],
    "return": {
      "description": "an array mapped via the callback",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 198,
    "description": "<p>Returns an array mapped to the specified key.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy(<span class=\"hljs-string\">'children'</span>, <span class=\"hljs-string\">'age'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> lordByron = Person.create({ children: [] });\n\nlordByron.get(<span class=\"hljs-string\">'childAges'</span>); <span class=\"hljs-comment\">// []</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObject({ name: <span class=\"hljs-string\">'Augusta Ada Byron'</span>, age: <span class=\"hljs-number\">7</span> });\nlordByron.get(<span class=\"hljs-string\">'childAges'</span>); <span class=\"hljs-comment\">// [7]</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObjects([{\n  name: <span class=\"hljs-string\">'Allegra Byron'</span>,\n  age: <span class=\"hljs-number\">5</span>\n}, {\n  name: <span class=\"hljs-string\">'Elizabeth Medora Leigh'</span>,\n  age: <span class=\"hljs-number\">8</span>\n}]);\nlordByron.get(<span class=\"hljs-string\">'childAges'</span>); <span class=\"hljs-comment\">// [7, 5, 8]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "mapBy",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "propertyKey",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "an array mapped to the specified key",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 232,
    "itemtype": "method",
    "name": "mapProperty",
    "deprecated": true,
    "deprecationMessage": "Use `Ember.computed.mapBy` instead",
    "params": [
      {
        "name": "dependentKey",
        "description": ""
      },
      {
        "name": "propertyKey",
        "description": ""
      }
    ],
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "description": ""
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 241,
    "description": "<p>Filters the array by the callback.</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.\n<code>array</code> is the dependant array itself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, array)</span>;</span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filter(<span class=\"hljs-string\">'chores'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(chore, index, array)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> !chore.done;\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  chores: [\n    { name: <span class=\"hljs-string\">'cook'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'clean'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'write more unit tests'</span>, done: <span class=\"hljs-literal\">false</span> }\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'remainingChores'</span>); <span class=\"hljs-comment\">// [{name: 'write more unit tests', done: false}]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "filter",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "callback",
        "description": "",
        "type": "Function"
      }
    ],
    "return": {
      "description": "the filtered array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 308,
    "description": "<p>Filters the array by the property and value</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filterBy(<span class=\"hljs-string\">'chores'</span>, <span class=\"hljs-string\">'done'</span>, <span class=\"hljs-literal\">false</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  chores: [\n    { name: <span class=\"hljs-string\">'cook'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'clean'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'write more unit tests'</span>, done: <span class=\"hljs-literal\">false</span> }\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'remainingChores'</span>); <span class=\"hljs-comment\">// [{ name: 'write more unit tests', done: false }]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "filterBy",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "propertyKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "value",
        "description": "",
        "type": "*"
      }
    ],
    "return": {
      "description": "the filtered array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 350,
    "itemtype": "method",
    "name": "filterProperty",
    "params": [
      {
        "name": "dependentKey",
        "description": ""
      },
      {
        "name": "propertyKey",
        "description": ""
      },
      {
        "name": "value",
        "description": ""
      }
    ],
    "deprecated": true,
    "deprecationMessage": "Use `Ember.computed.filterBy` instead",
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "description": ""
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 360,
    "description": "<p>A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uniq(<span class=\"hljs-string\">'fruits'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  fruits: [\n    <span class=\"hljs-string\">'banana'</span>,\n    <span class=\"hljs-string\">'grape'</span>,\n    <span class=\"hljs-string\">'kale'</span>,\n    <span class=\"hljs-string\">'banana'</span>\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'uniqueFruits'</span>); <span class=\"hljs-comment\">// ['banana', 'grape', 'kale']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "uniq",
    "params": [
      {
        "name": "propertyKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computes a new array with all the\nunique elements from the dependent array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 424,
    "description": "<p>Alias for <a href=\"/api/#method_computed_uniq\">Ember.computed.uniq</a>.</p>\n",
    "itemtype": "method",
    "name": "union",
    "params": [
      {
        "name": "propertyKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computes a new array with all the\nunique elements from the dependent array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 435,
    "description": "<p>A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> obj = Ember.Object.createWithMixins({\n  adaFriends: [<span class=\"hljs-string\">'Charles Babbage'</span>, <span class=\"hljs-string\">'John Hobhouse'</span>, <span class=\"hljs-string\">'William King'</span>, <span class=\"hljs-string\">'Mary Somerville'</span>],\n  charlesFriends: [<span class=\"hljs-string\">'William King'</span>, <span class=\"hljs-string\">'Mary Somerville'</span>, <span class=\"hljs-string\">'Ada Lovelace'</span>, <span class=\"hljs-string\">'George Peacock'</span>],\n  friendsInCommon: Ember.computed.intersect(<span class=\"hljs-string\">'adaFriends'</span>, <span class=\"hljs-string\">'charlesFriends'</span>)\n});\n\nobj.get(<span class=\"hljs-string\">'friendsInCommon'</span>); <span class=\"hljs-comment\">// ['William King', 'Mary Somerville']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "intersect",
    "params": [
      {
        "name": "propertyKey",
        "description": "",
        "type": "String",
        "multiple": true
      }
    ],
    "return": {
      "description": "computes a new array with all the\nduplicated elements from the dependent arrays",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 515,
    "description": "<p>A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  likes: [<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'grape'</span>, <span class=\"hljs-string\">'kale'</span>],\n  wants: Ember.computed.setDiff(<span class=\"hljs-string\">'likes'</span>, <span class=\"hljs-string\">'fruits'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  fruits: [\n    <span class=\"hljs-string\">'grape'</span>,\n    <span class=\"hljs-string\">'kale'</span>,\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'wants'</span>); <span class=\"hljs-comment\">// ['banana']</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "setDiff",
    "params": [
      {
        "name": "setAProperty",
        "description": "",
        "type": "String"
      },
      {
        "name": "setBProperty",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "computes a new array with all the\nitems from the first dependent array that are not in the second\ndependent array",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
    "line": 626,
    "description": "<p>A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.</p>\n<p>The callback method you provide should have the following signature:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(itemA, itemB)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>itemA</code> the first item to compare.</li>\n<li><code>itemB</code> the second item to compare.</li>\n</ul>\n<p>This function should return negative number (e.g. <code>-1</code>) when <code>itemA</code> should come before\n<code>itemB</code>. It should return positive number (e.g. <code>1</code>) when <code>itemA</code> should come after\n<code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function should return <code>0</code>.</p>\n<p>Therefore, if this function is comparing some numeric values, simple <code>itemA - itemB</code> or\n<code>itemA.get( &#39;foo&#39; ) - itemB.get( &#39;foo&#39; )</code> can be used instead of series of <code>if</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> ToDoList = Ember.Object.extend({\n  <span class=\"hljs-comment\">// using standard ascending sort</span>\n  todosSorting: [<span class=\"hljs-string\">'name'</span>],\n  sortedTodos: Ember.computed.sort(<span class=\"hljs-string\">'todos'</span>, <span class=\"hljs-string\">'todosSorting'</span>),\n\n  <span class=\"hljs-comment\">// using descending sort</span>\n  todosSortingDesc: [<span class=\"hljs-string\">'name:desc'</span>],\n  sortedTodosDesc: Ember.computed.sort(<span class=\"hljs-string\">'todos'</span>, <span class=\"hljs-string\">'todosSortingDesc'</span>),\n\n  <span class=\"hljs-comment\">// using a custom sort function</span>\n  priorityTodos: Ember.computed.sort(<span class=\"hljs-string\">'todos'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>{\n    <span class=\"hljs-keyword\">if</span> (a.priority &gt; b.priority) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a.priority &lt; b.priority) {\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> todoList = ToDoList.create({todos: [\n  { name: <span class=\"hljs-string\">'Unit Test'</span>, priority: <span class=\"hljs-number\">2</span> },\n  { name: <span class=\"hljs-string\">'Documentation'</span>, priority: <span class=\"hljs-number\">3</span> },\n  { name: <span class=\"hljs-string\">'Release'</span>, priority: <span class=\"hljs-number\">1</span> }\n]});\n\ntodoList.get(<span class=\"hljs-string\">'sortedTodos'</span>);      <span class=\"hljs-comment\">// [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]</span>\ntodoList.get(<span class=\"hljs-string\">'sortedTodosDesc'</span>);  <span class=\"hljs-comment\">// [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]</span>\ntodoList.get(<span class=\"hljs-string\">'priorityTodos'</span>);    <span class=\"hljs-comment\">// [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "sort",
    "params": [
      {
        "name": "dependentKey",
        "description": "",
        "type": "String"
      },
      {
        "name": "sortDefinition",
        "description": "a dependent key to an\narray of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting",
        "type": "String or Function"
      }
    ],
    "return": {
      "description": "computes a new sorted array based\non the sort property array or callback function",
      "type": "Ember.ComputedProperty"
    },
    "class": "Ember.computed",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  }
]