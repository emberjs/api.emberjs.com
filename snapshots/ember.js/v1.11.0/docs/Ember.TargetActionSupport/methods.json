[
  {
    "file": "packages/ember-metal/lib/mixin.js",
    "line": 588,
    "itemtype": "method",
    "name": "create",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "multiple": true
      }
    ],
    "class": "Ember.Mixin",
    "module": "ember",
    "submodule": "ember-metal",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Mixin"
  },
  {
    "file": "packages/ember-metal/lib/mixin.js",
    "line": 607,
    "itemtype": "method",
    "name": "reopen",
    "params": [
      {
        "name": "arguments",
        "description": "",
        "multiple": true
      }
    ],
    "class": "Ember.Mixin",
    "module": "ember",
    "submodule": "ember-metal",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Mixin"
  },
  {
    "file": "packages/ember-metal/lib/mixin.js",
    "line": 642,
    "itemtype": "method",
    "name": "apply",
    "params": [
      {
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "description": "applied object"
    },
    "class": "Ember.Mixin",
    "module": "ember",
    "submodule": "ember-metal",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Mixin"
  },
  {
    "file": "packages/ember-metal/lib/mixin.js",
    "line": 670,
    "itemtype": "method",
    "name": "detect",
    "params": [
      {
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Mixin",
    "module": "ember",
    "submodule": "ember-metal",
    "namespace": "Ember",
    "description": "",
    "inheritedFrom": "Ember.Mixin"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
    "line": 58,
    "description": "<p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  action: <span class=\"hljs-string\">'save'</span>,\n  actionContext: Ember.computed.alias(<span class=\"hljs-string\">'context'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>,\n      target: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controller'</span>),\n      actionContext: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'context'</span>)\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "triggerAction",
    "params": [
      {
        "name": "opts",
        "description": "(optional, with the optional keys action, target and/or actionContext)",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "true if the action was sent successfully and did not return false",
      "type": "Boolean"
    },
    "class": "Ember.TargetActionSupport",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember"
  }
]