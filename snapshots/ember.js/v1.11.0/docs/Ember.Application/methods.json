[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 242,
    "description": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
    "itemtype": "method",
    "name": "init",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 366,
    "description": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
    "itemtype": "method",
    "name": "destroy",
    "return": {
      "description": "receiver",
      "type": "Ember.Object"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 388,
    "description": "<p>Override to implement teardown.</p>\n",
    "itemtype": "method",
    "name": "willDestroy",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 395,
    "description": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_scheduledDestroy",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 414,
    "description": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "toString",
    "return": {
      "description": "string representation",
      "type": "String"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 478,
    "description": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
    "itemtype": "method",
    "name": "extend",
    "static": 1,
    "params": [
      {
        "name": "mixins",
        "description": "One or more Mixin classes",
        "type": "Mixin",
        "optional": true,
        "multiple": true
      },
      {
        "name": "arguments",
        "description": "Object containing values to use within the new class",
        "type": "Object",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 581,
    "description": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
    "itemtype": "method",
    "name": "createWithMixins",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 602,
    "description": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
    "itemtype": "method",
    "name": "create",
    "static": 1,
    "params": [
      {
        "name": "arguments",
        "description": "",
        "optional": true,
        "multiple": true
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 652,
    "description": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
    "itemtype": "method",
    "name": "reopen",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 696,
    "description": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
    "itemtype": "method",
    "name": "reopenClass",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 778,
    "description": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
    "static": 1,
    "itemtype": "method",
    "name": "metaForProperty",
    "params": [
      {
        "name": "key",
        "description": "property name",
        "type": "String"
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 834,
    "description": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
    "static": 1,
    "itemtype": "method",
    "name": "eachComputedProperty",
    "params": [
      {
        "name": "callback",
        "description": "",
        "type": "Function"
      },
      {
        "name": "binding",
        "description": "",
        "type": "Object"
      }
    ],
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 862,
    "description": "<p>Provides lookup-time type validation for injected properties.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_onLookup",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "isPrivate": true,
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 871,
    "description": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
    "itemtype": "method",
    "name": "_lazyInjections",
    "return": {
      "description": "Hash of all lazy injected property keys to container names",
      "type": "Object"
    },
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 101,
    "description": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
    "itemtype": "method",
    "name": "get",
    "params": [
      {
        "name": "keyName",
        "description": "The property to retrieve",
        "type": "String"
      }
    ],
    "return": {
      "description": "The property value or undefined.",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 143,
    "description": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "getProperties",
    "params": [
      {
        "name": "list",
        "description": "of keys to get",
        "type": "String...|Array"
      }
    ],
    "return": {
      "description": "",
      "type": "Hash"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 167,
    "description": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "set",
    "params": [
      {
        "name": "keyName",
        "description": "The property to set",
        "type": "String"
      },
      {
        "name": "value",
        "description": "The value to set or `null`.",
        "type": "Object"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 221,
    "description": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "setProperties",
    "params": [
      {
        "name": "hash",
        "description": "the hash of keys and values to set",
        "type": "Hash"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 238,
    "description": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
    "itemtype": "method",
    "name": "beginPropertyChanges",
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 257,
    "description": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
    "itemtype": "method",
    "name": "endPropertyChanges",
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 275,
    "description": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
    "itemtype": "method",
    "name": "propertyWillChange",
    "params": [
      {
        "name": "keyName",
        "description": "The property key that is about to change.",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 298,
    "description": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
    "itemtype": "method",
    "name": "propertyDidChange",
    "params": [
      {
        "name": "keyName",
        "description": "The property key that has just changed.",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 321,
    "description": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
    "itemtype": "method",
    "name": "notifyPropertyChange",
    "params": [
      {
        "name": "keyName",
        "description": "The property key to be notified about.",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Ember.Observable"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 344,
    "description": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
    "itemtype": "method",
    "name": "addObserver",
    "params": [
      {
        "name": "key",
        "description": "The key to observer",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The target object to invoke",
        "type": "Object"
      },
      {
        "name": "method",
        "description": "The method to invoke.",
        "type": "String|Function"
      }
    ],
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 395,
    "description": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
    "itemtype": "method",
    "name": "removeObserver",
    "params": [
      {
        "name": "key",
        "description": "The key to observer",
        "type": "String"
      },
      {
        "name": "target",
        "description": "The target object to invoke",
        "type": "Object"
      },
      {
        "name": "method",
        "description": "The method to invoke.",
        "type": "String|Function"
      }
    ],
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 409,
    "description": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
    "itemtype": "method",
    "name": "hasObserverFor",
    "params": [
      {
        "name": "key",
        "description": "Key to check",
        "type": "String"
      }
    ],
    "return": {
      "description": "",
      "type": "Boolean"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 423,
    "description": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "getWithDefault",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to retrieve",
        "type": "String"
      },
      {
        "name": "defaultValue",
        "description": "The value to return if the property value is undefined",
        "type": "Object"
      }
    ],
    "return": {
      "description": "The property value or the defaultValue.",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 440,
    "description": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "incrementProperty",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to increment",
        "type": "String"
      },
      {
        "name": "increment",
        "description": "The amount to increment by. Defaults to 1",
        "type": "Number"
      }
    ],
    "return": {
      "description": "The new property value",
      "type": "Number"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 460,
    "description": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "decrementProperty",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to decrement",
        "type": "String"
      },
      {
        "name": "decrement",
        "description": "The amount to decrement by. Defaults to 1",
        "type": "Number"
      }
    ],
    "return": {
      "description": "The new property value",
      "type": "Number"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 480,
    "description": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "toggleProperty",
    "params": [
      {
        "name": "keyName",
        "description": "The name of the property to toggle",
        "type": "String"
      }
    ],
    "return": {
      "description": "The new property value",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-runtime/lib/mixins/observable.js",
    "line": 497,
    "description": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
    "itemtype": "method",
    "name": "cacheFor",
    "params": [
      {
        "name": "keyName",
        "description": "",
        "type": "String"
      }
    ],
    "return": {
      "description": "The cached value of the computed property, if any",
      "type": "Object"
    },
    "class": "Ember.Observable",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.Observable"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 962,
    "description": "<p>This creates a registry with the default Ember naming conventions.</p>\n<p>It also configures the registry:</p>\n<ul>\n<li>registered views are created every time they are looked up (they are\nnot singletons)</li>\n<li>registered templates are not factories; the registered value is\nreturned directly.</li>\n<li>the router receives the application as its <code>namespace</code> property</li>\n<li>all controllers receive the router as their <code>target</code> and <code>controllers</code>\nproperties</li>\n<li>all controllers receive the application as their <code>namespace</code> property</li>\n<li>the application view receives the application controller as its\n<code>controller</code> property</li>\n<li>the application view receives the application template as its\n<code>defaultTemplate</code> property</li>\n</ul>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "buildRegistry",
    "static": 1,
    "params": [
      {
        "name": "namespace",
        "description": "the application for which to\n  build the registry",
        "type": "Ember.Application"
      }
    ],
    "return": {
      "description": "the built registry",
      "type": "Ember.Registry"
    },
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 316,
    "description": "<p>Create a container for the current application&#39;s registry.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "buildInstance",
    "return": {
      "description": "the configured container",
      "type": "Ember.Container"
    },
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 343,
    "description": "<p>Automatically initialize the application once the DOM has\nbecome ready.</p>\n<p>The initialization itself is scheduled on the actions queue\nwhich ensures that application loading finishes before\nbooting.</p>\n<p>If you are asynchronously loading code, you should call\n<code>deferReadiness()</code> to defer booting, and then call\n<code>advanceReadiness()</code> once all of your code has finished\nloading.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "scheduleInitialize",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 367,
    "description": "<p>Use this to defer readiness until some condition is true.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n\nApp.deferReadiness();\n<span class=\"hljs-comment\">// Ember.$ is a reference to the jQuery object/function</span>\nEmber.$.getJSON(<span class=\"hljs-string\">'/auth-token'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(token)</span> </span>{\n  App.token = token;\n  App.advanceReadiness();\n});</pre></td>      </tr>    </table>  </div></div><p>This allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.</p>\n<p>However, if the setup requires a loading UI, it might be better\nto use the router for this purpose.</p>\n",
    "itemtype": "method",
    "name": "deferReadiness",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 397,
    "description": "<p>Call <code>advanceReadiness</code> after any asynchronous setup logic has completed.\nEach call to <code>deferReadiness</code> must be matched by a call to <code>advanceReadiness</code>\nor the application will never become ready and routing will not begin.</p>\n",
    "itemtype": "method",
    "name": "advanceReadiness",
    "see": [
      "{Ember.Application#deferReadiness}"
    ],
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 414,
    "description": "<p>Registers a factory that can be used for dependency injection (with\n<code>App.inject</code>) or for service lookup. Each factory is registered with\na full name including two parts: <code>type:name</code>.</p>\n<p>A simple example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n\nApp.Orange = Ember.Object.extend();\nApp.register(<span class=\"hljs-string\">'fruit:favorite'</span>, App.Orange);</pre></td>      </tr>    </table>  </div></div><p>Ember will resolve factories from the <code>App</code> namespace automatically.\nFor example <code>App.CarsController</code> will be discovered and returned if\nan application requests <code>controller:cars</code>.</p>\n<p>An example of registering a controller with a non-standard name:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n<span class=\"hljs-keyword\">var</span> Session = Ember.Controller.extend();\n\nApp.register(<span class=\"hljs-string\">'controller:session'</span>, Session);\n\n<span class=\"hljs-comment\">// The Session controller can now be treated like a normal controller,</span>\n<span class=\"hljs-comment\">// despite its non-standard name.</span>\nApp.ApplicationController = Ember.Controller.extend({\n  needs: [<span class=\"hljs-string\">'session'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>Registered factories are <strong>instantiated</strong> by having <code>create</code>\ncalled on them. Additionally they are <strong>singletons</strong>, each time\nthey are looked up they return the same instance.</p>\n<p>Some examples modifying that default behavior:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n\nApp.Person  = Ember.Object.extend();\nApp.Orange  = Ember.Object.extend();\nApp.Email   = Ember.Object.extend();\nApp.session = Ember.Object.create();\n\nApp.register(<span class=\"hljs-string\">'model:user'</span>, App.Person, { singleton: <span class=\"hljs-literal\">false</span> });\nApp.register(<span class=\"hljs-string\">'fruit:favorite'</span>, App.Orange);\nApp.register(<span class=\"hljs-string\">'communication:main'</span>, App.Email, { singleton: <span class=\"hljs-literal\">false</span> });\nApp.register(<span class=\"hljs-string\">'session'</span>, App.session, { instantiate: <span class=\"hljs-literal\">false</span> });</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "register",
    "params": [
      {
        "name": "fullName",
        "description": "type:name (e.g., 'model:user')",
        "type": "String"
      },
      {
        "name": "factory",
        "description": "(e.g., App.Person)",
        "type": "Function"
      },
      {
        "name": "options",
        "description": "(optional) disable instantiation or singleton usage",
        "type": "Object"
      }
    ],
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 476,
    "description": "<p>Define a dependency injection onto a specific factory or all factories\nof a type.</p>\n<p>When Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.</p>\n<p>An example of providing a session object to all controllers:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n<span class=\"hljs-keyword\">var</span> Session = Ember.Object.extend({ isAuthenticated: <span class=\"hljs-literal\">false</span> });\n\n<span class=\"hljs-comment\">// A factory must be registered before it can be injected</span>\nApp.register(<span class=\"hljs-string\">'session:main'</span>, Session);\n\n<span class=\"hljs-comment\">// Inject 'session:main' onto all factories of the type 'controller'</span>\n<span class=\"hljs-comment\">// with the name 'session'</span>\nApp.inject(<span class=\"hljs-string\">'controller'</span>, <span class=\"hljs-string\">'session'</span>, <span class=\"hljs-string\">'session:main'</span>);\n\nApp.IndexController = Ember.Controller.extend({\n  isLoggedIn: Ember.computed.alias(<span class=\"hljs-string\">'session.isAuthenticated'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Injections can also be performed on specific factories.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.inject(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">full_name</span> <span class=\"hljs-attribute\">or</span> <span class=\"hljs-attribute\">type</span>&gt;</span>, <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>&gt;</span>, <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">full_name</span>&gt;</span>)</span>\nApp.inject(<span class=\"hljs-string\">'route'</span>, <span class=\"hljs-string\">'source'</span>, <span class=\"hljs-string\">'source:main'</span>)\nApp.inject(<span class=\"hljs-string\">'route:application'</span>, <span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'model:email'</span>)</pre></td>      </tr>    </table>  </div></div><p>It is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via <code>create</code> or <code>new</code>) bypasses the dependency injection\nsystem.</p>\n<p><strong>Note:</strong> Ember-Data instantiates its models in a unique manner, and consequently\ninjections onto models (or all models) will not work as expected. Injections\non models can be enabled by setting <code>Ember.MODEL_FACTORY_INJECTIONS</code>\nto <code>true</code>.</p>\n",
    "itemtype": "method",
    "name": "inject",
    "params": [
      {
        "name": "factoryNameOrType",
        "description": "",
        "type": "String"
      },
      {
        "name": "property",
        "description": "",
        "type": "String"
      },
      {
        "name": "injectionName",
        "description": "",
        "type": "String"
      }
    ],
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 529,
    "description": "<p>Calling initialize manually is not supported.</p>\n<p>Please see Ember.Application#advanceReadiness and\nEmber.Application#deferReadiness.</p>\n",
    "access": "private",
    "tagname": "",
    "deprecated": true,
    "itemtype": "method",
    "name": "initialize",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 543,
    "description": "<p>Initialize the application. This happens automatically.</p>\n<p>Run any initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want\nto defer readiness until the auth token has been retrieved.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "_initialize",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 580,
    "description": "<p>Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:</p>\n<ol>\n<li>Deactivate existing routes</li>\n<li>Destroy all objects in the container</li>\n<li>Create a new application container</li>\n<li>Re-route to the existing url</li>\n</ol>\n<p>Typical Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App;\n\nrun(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  App = Ember.Application.create();\n});\n\n<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'acceptance test'</span>, {\n  setup: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    App.reset();\n  }\n});\n\ntest(<span class=\"hljs-string\">'first test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// App is freshly reset</span>\n});\n\ntest(<span class=\"hljs-string\">'second test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// App is again freshly reset</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Advanced Example:</p>\n<p>Occasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App;\n\nrun(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  App = Ember.Application.create();\n});\n\n<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'acceptance test'</span>, {\n  setup: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest(<span class=\"hljs-string\">'first test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  ok(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'something before app is initialized'</span>);\n\n  run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    App.advanceReadiness();\n  });\n\n  ok(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'something after app is initialized'</span>);\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "reset",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 666,
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "runInitializers",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 707,
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "didBecomeReady",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 768,
    "itemtype": "method",
    "name": "then",
    "access": "private",
    "tagname": "",
    "deprecated": true,
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "description": "",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 798,
    "description": "<p>Creates a new instance of the application and instructs it to route to the\nspecified initial URL. This method returns a promise that will be resolved\nonce rendering is complete. That promise is resolved with the instance.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.visit(<span class=\"hljs-string\">'/users'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(instance)</span> </span>{\n  <span class=\"hljs-keyword\">var</span> view = instance.view;\n  view.appendTo(<span class=\"hljs-string\">'#qunit-test-fixtures'</span>);\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "visit",
    "access": "private",
    "tagname": "",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 837,
    "description": "<p>Initializer receives an object which has the following attributes:\n<code>name</code>, <code>before</code>, <code>after</code>, <code>initialize</code>. The only required attribute is\n`initialize, all others are optional.</p>\n<ul>\n<li><code>name</code> allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.</li>\n</ul>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'namedInitializer'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Running namedInitializer!'</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>before</code> and <code>after</code> are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the <code>name</code> of other initializers.</li>\n</ul>\n<p>An example of ordering initializers, we create an initializer named <code>first</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'first'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'First initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span></pre></td>      </tr>    </table>  </div></div><p>We add another initializer named <code>second</code>, specifying that it should run\nafter the initializer named <code>first</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'second'</span>,\n  after: <span class=\"hljs-string\">'first'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Second initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Second initializer!</span></pre></td>      </tr>    </table>  </div></div><p>Afterwards we add a further initializer named <code>pre</code>, this time specifying\nthat it should run before the initializer named <code>first</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'pre'</span>,\n  before: <span class=\"hljs-string\">'first'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Pre initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: Pre initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Second initializer!</span></pre></td>      </tr>    </table>  </div></div><p>Finally we add an initializer named <code>post</code>, specifying it should run after\nboth the <code>first</code> and the <code>second</code> initializers:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'post'</span>,\n  after: [<span class=\"hljs-string\">'first'</span>, <span class=\"hljs-string\">'second'</span>],\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Post initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: Pre initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Second initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Post initializer!</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>initialize</code> is a callback function that receives two arguments, <code>container</code>\nand <code>application</code> on which you can operate.</li>\n</ul>\n<p>Example of using <code>container</code> to preload data into the store:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'preload-data'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> store = container.lookup(<span class=\"hljs-string\">'store:main'</span>);\n\n    store.pushPayload(preloadedData);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Example of using <code>application</code> to register an adapter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'api-adapter'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    application.register(<span class=\"hljs-string\">'api-adapter:main'</span>, ApiAdapter);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "method",
    "name": "initializer",
    "params": [
      {
        "name": "initializer",
        "description": "",
        "type": "Object"
      }
    ],
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 1050,
    "description": "<p>This function defines the default lookup rules for container lookups:</p>\n<ul>\n<li>templates are looked up on <code>Ember.TEMPLATES</code></li>\n<li>other names are looked up on the application after classifying the name.\nFor example, <code>controller:post</code> looks up <code>App.PostController</code> by default.</li>\n<li>if the default lookup fails, look for registered classes on the container</li>\n</ul>\n<p>This allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.</p>\n",
    "access": "private",
    "tagname": "",
    "itemtype": "method",
    "name": "resolverFor",
    "params": [
      {
        "name": "namespace",
        "description": "the namespace to look for classes",
        "type": "Ember.Namespace"
      }
    ],
    "return": {
      "description": "the resolved value for a given lookup",
      "type": "*"
    },
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  }
]