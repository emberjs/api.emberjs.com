[
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 276,
    "description": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
    "itemtype": "property",
    "name": "concatenatedProperties",
    "type": "Array",
    "default": "null",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 344,
    "description": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
    "itemtype": "property",
    "name": "isDestroyed",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-runtime/lib/system/core_object.js",
    "line": 355,
    "description": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
    "itemtype": "property",
    "name": "isDestroying",
    "default": "false",
    "class": "Ember.CoreObject",
    "module": "ember",
    "submodule": "ember-runtime",
    "namespace": "Ember",
    "inheritedFrom": "Ember.CoreObject"
  },
  {
    "file": "packages/ember-application/lib/system/application-instance.js",
    "line": 34,
    "description": "<p>The application instance&#39;s container. The container stores all of the\ninstance-specific state for this application run.</p>\n",
    "itemtype": "property",
    "name": "container",
    "type": "Ember.Container",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application"
  },
  {
    "file": "packages/ember-application/lib/system/application-instance.js",
    "line": 50,
    "description": "<p>The registry for this application instance. It should use the\n<code>applicationRegistry</code> as a fallback.</p>\n",
    "itemtype": "property",
    "name": "registry",
    "type": "Ember.Registry",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 230,
    "description": "<p>The DOM events for which the event dispatcher should listen.</p>\n<p>By default, the application&#39;s <code>Ember.EventDispatcher</code> listens\nfor a set of standard DOM events, such as <code>mousedown</code> and\n<code>keyup</code>, and delegates them to your application&#39;s <code>Ember.View</code>\ninstances.</p>\n<p>If you would like additional bubbling events to be delegated to your\nviews, set your <code>Ember.Application</code>&#39;s <code>customEvents</code> property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create({\n  customEvents: {\n    <span class=\"hljs-comment\">// add support for the paste event</span>\n    paste: <span class=\"hljs-string\">'paste'</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
    "itemtype": "property",
    "name": "customEvents",
    "type": "Object",
    "default": "null",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 199,
    "description": "<p>The root DOM element of the Application. This can be specified as an\nelement or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector string</a>.</p>\n<p>This is the element that will be passed to the Application&#39;s,\n<code>eventDispatcher</code>, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.</p>\n",
    "itemtype": "property",
    "name": "rootElement",
    "type": "DOMElement",
    "default": "'body'",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 214,
    "description": "<p>The <code>Ember.EventDispatcher</code> responsible for delegating events to this\napplication&#39;s views.</p>\n<p>The event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication&#39;s <code>rootElement</code> property.</p>\n<p>See the documentation for <code>Ember.EventDispatcher</code> for more information.</p>\n",
    "itemtype": "property",
    "name": "eventDispatcher",
    "type": "Ember.EventDispatcher",
    "default": "null",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 258,
    "description": "<p>Whether the application should automatically start routing and render\ntemplates to the <code>rootElement</code> on DOM ready. While default by true,\nother environments such as FastBoot or a testing harness can set this\nproperty to <code>false</code> and control the precise timing and behavior of the boot\nprocess.</p>\n",
    "itemtype": "property",
    "name": "autoboot",
    "type": "Boolean",
    "default": "true",
    "access": "private",
    "tagname": "",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember",
    "isPrivate": true
  },
  {
    "file": "packages/ember-application/lib/system/application.js",
    "line": 749,
    "description": "<p>Set this to provide an alternate class to <code>Ember.DefaultResolver</code></p>\n",
    "itemtype": "property",
    "name": "resolver",
    "class": "Ember.Application",
    "module": "ember",
    "submodule": "ember-application",
    "namespace": "Ember"
  }
]