{
  "documents": [
    {
      "external_id": "Ember",
      "fields": [
        {
          "name": "name",
          "value": "Ember",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>All Ember methods and functions are defined inside of this namespace. You\ngenerally should not add new properties to this namespace as it may be\noverwritten by future versions of Ember.</p>\n<p>You can also use the shorthand <code>Em</code> instead of <code>Ember</code>.</p>\n<p>Ember-Runtime is a framework that provides core functions for Ember including\ncross-platform functions, support for property observing and objects. Its\nfocus is on small size and performance. You can use this in place of or\nalong-side other cross-platform libraries such as jQuery.</p>\n<p>The core Runtime framework is based on the jQuery API with a number of\nperformance optimizations.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember#assert",
      "fields": [
        {
          "name": "name",
          "value": "assert",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Define an assertion that will throw an exception if the condition is not\nmet. Ember build tools will remove any calls to <code>Ember.assert()</code> when\ndoing a production build. Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Test for truthiness</span>\nEmber.assert(<span class=\"hljs-string\">'Must pass a valid object'</span>, obj);\n\n<span class=\"hljs-comment\">// Fail unconditionally</span>\nEmber.assert(<span class=\"hljs-string\">'This code path should never be run'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#warn",
      "fields": [
        {
          "name": "name",
          "value": "warn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Display a warning with the provided message. Ember build tools will\nremove any calls to <code>Ember.warn()</code> when doing a production build.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#debug",
      "fields": [
        {
          "name": "name",
          "value": "debug",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Display a debug notice. Ember build tools will remove any calls to\n<code>Ember.debug()</code> when doing a production build.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.debug(<span class=\"hljs-string\">'I\\'m a debug notice!'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#deprecate",
      "fields": [
        {
          "name": "name",
          "value": "deprecate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only). Ember build tools will remove any calls to\n<code>Ember.deprecate()</code> when doing a production build.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#deprecateFunc",
      "fields": [
        {
          "name": "name",
          "value": "deprecateFunc",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias an old, deprecated method with its new counterpart.</p>\n<p>Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.</p>\n<p>Ember build tools will not remove calls to <code>Ember.deprecateFunc()</code>, though\nno warnings will be shown in production.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.oldMethod = Ember.deprecateFunc(<span class=\"hljs-string\">'Please use the new, updated method'</span>, Ember.newMethod);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#runInDebug",
      "fields": [
        {
          "name": "name",
          "value": "runInDebug",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Run a function meant for debugging. Ember build tools will remove any calls to\n<code>Ember.runInDebug()</code> when doing a production build.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.runInDebug(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  Ember.Handlebars.EachView.reopen({\n    didInsertElement: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'I\\'m happy'</span>);\n    }\n  });\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#_warnIfUsingStrippedFeatureFlags",
      "fields": [
        {
          "name": "name",
          "value": "_warnIfUsingStrippedFeatureFlags",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Will call <code>Ember.warn()</code> if ENABLE_ALL_FEATURES, ENABLE_OPTIONAL_FEATURES, or\nany specific FEATURES flag is truthy.</p>\n<p>This method is called automatically in debug canary builds.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Identical to <code>Object.create()</code>. Implements if not available natively.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isGlobalPath",
      "fields": [
        {
          "name": "name",
          "value": "isGlobalPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns true if the provided path is global (e.g., <code>MyApp.fooController.bar</code>)\ninstead of local (<code>foo.bar.baz</code>).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#bind",
      "fields": [
        {
          "name": "name",
          "value": "bind",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global helper method to create a new binding. Just pass the root object\nalong with a <code>to</code> and <code>from</code> path to create and connect the binding.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#oneWay",
      "fields": [
        {
          "name": "name",
          "value": "oneWay",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value for a property, if one exists.\nThis can be useful for peeking at the value of a computed\nproperty that is generated lazily, without accidentally causing\nit to be created.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#K",
      "fields": [
        {
          "name": "name",
          "value": "K",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Empty function. Useful for some operations. Always returns <code>this</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#addListener",
      "fields": [
        {
          "name": "name",
          "value": "addListener",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add an event listener</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#removeListener",
      "fields": [
        {
          "name": "name",
          "value": "removeListener",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an event listener</p>\n<p>Arguments should match those passed to <code>Ember.addListener</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#suspendListener",
      "fields": [
        {
          "name": "name",
          "value": "suspendListener",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Suspend listener during callback.</p>\n<p>This should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#suspendListeners",
      "fields": [
        {
          "name": "name",
          "value": "suspendListeners",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Suspends multiple listeners during a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#watchedEvents",
      "fields": [
        {
          "name": "name",
          "value": "watchedEvents",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return a list of currently watched events</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#sendEvent",
      "fields": [
        {
          "name": "name",
          "value": "sendEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#hasListeners",
      "fields": [
        {
          "name": "name",
          "value": "hasListeners",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#listenersFor",
      "fields": [
        {
          "name": "name",
          "value": "listenersFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Define a property as a function that should be executed when\na specified event or events are triggered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Job = Ember.Object.extend({\n  logCompleted: Ember.on(<span class=\"hljs-string\">'completed'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Job completed!'</span>);\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> job = Job.create();\n\nEmber.sendEvent(job, <span class=\"hljs-string\">'completed'</span>); <span class=\"hljs-comment\">// Logs 'Job completed!'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#",
      "fields": [
        {
          "name": "name",
          "value": "",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Expands <code>pattern</code>, invoking <code>callback</code> for each expansion.</p>\n<p>The only pattern supported is brace-expansion, anything else will be passed\nonce to <code>callback</code> directly.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">echo</span><span class=\"hljs-params\">(arg)</span></span>{ <span class=\"hljs-built_in\">console</span>.log(arg); }\n\nEmber.expandProperties(<span class=\"hljs-string\">'foo.bar'</span>, echo);              <span class=\"hljs-comment\">//=&gt; 'foo.bar'</span>\nEmber.expandProperties(<span class=\"hljs-string\">'{foo,bar}'</span>, echo);            <span class=\"hljs-comment\">//=&gt; 'foo', 'bar'</span>\nEmber.expandProperties(<span class=\"hljs-string\">'foo.{bar,baz}'</span>, echo);        <span class=\"hljs-comment\">//=&gt; 'foo.bar', 'foo.baz'</span>\nEmber.expandProperties(<span class=\"hljs-string\">'{foo,bar}.baz'</span>, echo);        <span class=\"hljs-comment\">//=&gt; '{foo,bar}.baz'</span>\nEmber.expandProperties(<span class=\"hljs-string\">'foo.{bar,baz}.@each'</span>, echo)   <span class=\"hljs-comment\">//=&gt; 'foo.bar.@each', 'foo.baz.@each'</span>\nEmber.expandProperties(<span class=\"hljs-string\">'{foo,bar}.{spam,eggs}'</span>, echo) <span class=\"hljs-comment\">//=&gt; 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'</span>\nEmber.expandProperties(<span class=\"hljs-string\">'{foo}.bar.{baz}'</span>)             <span class=\"hljs-comment\">//=&gt; 'foo.bar.baz'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get multiple properties at once, call <code>Ember.getProperties</code>\nwith an object followed by a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.getProperties(record, <span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.getProperties(record, [<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isBlank",
      "fields": [
        {
          "name": "name",
          "value": "isBlank",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A value is blank if it is empty or a whitespace string.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.isBlank();                <span class=\"hljs-comment\">// true</span>\nEmber.isBlank(<span class=\"hljs-literal\">null</span>);            <span class=\"hljs-comment\">// true</span>\nEmber.isBlank(<span class=\"hljs-literal\">undefined</span>);       <span class=\"hljs-comment\">// true</span>\nEmber.isBlank(<span class=\"hljs-string\">''</span>);              <span class=\"hljs-comment\">// true</span>\nEmber.isBlank([]);              <span class=\"hljs-comment\">// true</span>\nEmber.isBlank(<span class=\"hljs-string\">'\\n\\t'</span>);          <span class=\"hljs-comment\">// true</span>\nEmber.isBlank(<span class=\"hljs-string\">'  '</span>);            <span class=\"hljs-comment\">// true</span>\nEmber.isBlank({});              <span class=\"hljs-comment\">// false</span>\nEmber.isBlank(<span class=\"hljs-string\">'\\n\\t Hello'</span>);    <span class=\"hljs-comment\">// false</span>\nEmber.isBlank(<span class=\"hljs-string\">'Hello world'</span>);   <span class=\"hljs-comment\">// false</span>\nEmber.isBlank([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);         <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isEmpty",
      "fields": [
        {
          "name": "name",
          "value": "isEmpty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Verifies that a value is <code>null</code> or an empty string, empty array,\nor empty function.</p>\n<p>Constrains the rules on <code>Ember.isNone</code> by returning true for empty\nstring and empty arrays.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.isEmpty();                <span class=\"hljs-comment\">// true</span>\nEmber.isEmpty(<span class=\"hljs-literal\">null</span>);            <span class=\"hljs-comment\">// true</span>\nEmber.isEmpty(<span class=\"hljs-literal\">undefined</span>);       <span class=\"hljs-comment\">// true</span>\nEmber.isEmpty(<span class=\"hljs-string\">''</span>);              <span class=\"hljs-comment\">// true</span>\nEmber.isEmpty([]);              <span class=\"hljs-comment\">// true</span>\nEmber.isEmpty({});              <span class=\"hljs-comment\">// false</span>\nEmber.isEmpty(<span class=\"hljs-string\">'Adam Hawkins'</span>);  <span class=\"hljs-comment\">// false</span>\nEmber.isEmpty([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]);         <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isNone",
      "fields": [
        {
          "name": "name",
          "value": "isNone",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.isNone();              <span class=\"hljs-comment\">// true</span>\nEmber.isNone(<span class=\"hljs-literal\">null</span>);          <span class=\"hljs-comment\">// true</span>\nEmber.isNone(<span class=\"hljs-literal\">undefined</span>);     <span class=\"hljs-comment\">// true</span>\nEmber.isNone(<span class=\"hljs-string\">''</span>);            <span class=\"hljs-comment\">// false</span>\nEmber.isNone([]);            <span class=\"hljs-comment\">// false</span>\nEmber.isNone(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{});  <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isPresent",
      "fields": [
        {
          "name": "name",
          "value": "isPresent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A value is present if it not <code>isBlank</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.isPresent();                <span class=\"hljs-comment\">// false</span>\nEmber.isPresent(<span class=\"hljs-literal\">null</span>);            <span class=\"hljs-comment\">// false</span>\nEmber.isPresent(<span class=\"hljs-literal\">undefined</span>);       <span class=\"hljs-comment\">// false</span>\nEmber.isPresent(<span class=\"hljs-string\">''</span>);              <span class=\"hljs-comment\">// false</span>\nEmber.isPresent([]);              <span class=\"hljs-comment\">// false</span>\nEmber.isPresent(<span class=\"hljs-string\">'\\n\\t'</span>);          <span class=\"hljs-comment\">// false</span>\nEmber.isPresent(<span class=\"hljs-string\">'  '</span>);            <span class=\"hljs-comment\">// false</span>\nEmber.isPresent({});              <span class=\"hljs-comment\">// true</span>\nEmber.isPresent(<span class=\"hljs-string\">'\\n\\t Hello'</span>);    <span class=\"hljs-comment\">// true</span>\nEmber.isPresent(<span class=\"hljs-string\">'Hello world'</span>);   <span class=\"hljs-comment\">// true</span>\nEmber.isPresent([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);         <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#keys",
      "fields": [
        {
          "name": "name",
          "value": "keys",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns all of the keys defined on an object or hash. This is useful\nwhen inspecting objects for debugging. On browsers that support it, this\nuses the native <code>Object.keys</code> implementation.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#merge",
      "fields": [
        {
          "name": "name",
          "value": "merge",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Merge the contents of two objects together into the first object.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.merge({first: <span class=\"hljs-string\">'Tom'</span>}, {last: <span class=\"hljs-string\">'Dale'</span>}); <span class=\"hljs-comment\">// {first: 'Tom', last: 'Dale'}</span>\n<span class=\"hljs-keyword\">var</span> a = {first: <span class=\"hljs-string\">'Yehuda'</span>};\n<span class=\"hljs-keyword\">var</span> b = {last: <span class=\"hljs-string\">'Katz'</span>};\nEmber.merge(a, b); <span class=\"hljs-comment\">// a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#mixin",
      "fields": [
        {
          "name": "name",
          "value": "mixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#required",
      "fields": [
        {
          "name": "name",
          "value": "required",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Denotes a required property for a mixin</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#aliasMethod",
      "fields": [
        {
          "name": "name",
          "value": "aliasMethod",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Makes a method available via an additional name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Tomhuda Katzdale'</span>;\n  },\n  moniker: Ember.aliasMethod(<span class=\"hljs-string\">'name'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> goodGuy = App.Person.create();\n\ngoodGuy.name();    <span class=\"hljs-comment\">// 'Tomhuda Katzdale'</span>\ngoodGuy.moniker(); <span class=\"hljs-comment\">// 'Tomhuda Katzdale'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#observer",
      "fields": [
        {
          "name": "name",
          "value": "observer",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specify a method that observes property changes.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  valueObserver: Ember.observer(<span class=\"hljs-string\">'value'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes whenever the \"value\" property changes</span>\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>In the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use <code>immediateObserver</code>.</p>\n<p>Also available as <code>Function.prototype.observes</code> if prototype extensions are\nenabled.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#immediateObserver",
      "fields": [
        {
          "name": "name",
          "value": "immediateObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specify a method that observes property changes.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  valueObserver: Ember.immediateObserver(<span class=\"hljs-string\">'value'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes whenever the \"value\" property changes</span>\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>In the future, <code>Ember.observer</code> may become asynchronous. In this event,\n<code>Ember.immediateObserver</code> will maintain the synchronous behavior.</p>\n<p>Also available as <code>Function.prototype.observesImmediately</code> if prototype extensions are\nenabled.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#beforeObserver",
      "fields": [
        {
          "name": "name",
          "value": "beforeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When observers fire, they are called with the arguments <code>obj</code>, <code>keyName</code>.</p>\n<p>Note, <code>@each.property</code> observer is called per each add or replace of an element\nand it&#39;s not called with a specific enumeration item.</p>\n<p>A <code>beforeObserver</code> fires before a property changes.</p>\n<p>A <code>beforeObserver</code> is an alternative form of <code>.observesBefore()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  friends: [{ name: <span class=\"hljs-string\">'Tom'</span> }, { name: <span class=\"hljs-string\">'Stefan'</span> }, { name: <span class=\"hljs-string\">'Kris'</span> }],\n\n  valueWillChange: Ember.beforeObserver(<span class=\"hljs-string\">'content.value'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(obj, keyName)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.changingFrom = obj.get(keyName);\n  }),\n\n  valueDidChange: Ember.observer(<span class=\"hljs-string\">'content.value'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(obj, keyName)</span> </span>{\n      <span class=\"hljs-comment\">// only run if updating a value already in the DOM</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'state'</span>) === <span class=\"hljs-string\">'inDOM'</span>) {\n        <span class=\"hljs-keyword\">var</span> color = obj.get(keyName) &gt; <span class=\"hljs-keyword\">this</span>.changingFrom ? <span class=\"hljs-string\">'green'</span> : <span class=\"hljs-string\">'red'</span>;\n        <span class=\"hljs-comment\">// logic</span>\n      }\n  }),\n\n  friendsDidChange: Ember.observer(<span class=\"hljs-string\">'friends.@each.name'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(obj, keyName)</span> </span>{\n    <span class=\"hljs-comment\">// some logic</span>\n    <span class=\"hljs-comment\">// obj.get(keyName) returns friends array</span>\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>Also available as <code>Function.prototype.observesBefore</code> if prototype extensions are\nenabled.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#addBeforeObserver",
      "fields": [
        {
          "name": "name",
          "value": "addBeforeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#removeBeforeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeBeforeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#defineProperty",
      "fields": [
        {
          "name": "name",
          "value": "defineProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n<code>Ember.mixin()</code> to define new properties.</p>\n<p>Defines a property on an object. This method works much like the ES5\n<code>Object.defineProperty()</code> method except that it can also accept computed\nproperties and other special descriptors.</p>\n<p>Normally this method takes only three parameters. However if you pass an\ninstance of <code>Ember.Descriptor</code> as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.</p>\n<h2 id=\"examples\">Examples</h2>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// ES5 compatible mode</span>\nEmber.defineProperty(contact, <span class=\"hljs-string\">'firstName'</span>, {\n  writable: <span class=\"hljs-literal\">true</span>,\n  configurable: <span class=\"hljs-literal\">false</span>,\n  enumerable: <span class=\"hljs-literal\">true</span>,\n  value: <span class=\"hljs-string\">'Charles'</span>\n});\n\n<span class=\"hljs-comment\">// define a simple property</span>\nEmber.defineProperty(contact, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">'Jolley'</span>);\n\n<span class=\"hljs-comment\">// define a computed property</span>\nEmber.defineProperty(contact, <span class=\"hljs-string\">'fullName'</span>, Ember.computed(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.firstName+<span class=\"hljs-string\">' '</span>+<span class=\"hljs-keyword\">this</span>.lastName;\n}).property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>));</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This function is called just before an object property is about to change.\nIt will notify any before observers and prepare caches among other things.</p>\n<p>Normally you will not need to call this method directly but if for some\nreason you can&#39;t directly watch a property you can invoke this method\nmanually along with <code>Ember.propertyDidChange()</code> which you should call just\nafter the property value changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.</p>\n<p>Normally you will not need to call this method directly but if for some\nreason you can&#39;t directly watch a property you can invoke this method\nmanually along with <code>Ember.propertyWillChange()</code> which you should call just\nbefore the property value changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#changeProperties",
      "fields": [
        {
          "name": "name",
          "value": "changeProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Make a series of property changes together in an\nexception-safe way.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.changeProperties(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  obj1.set(<span class=\"hljs-string\">'foo'</span>, mayBlowUpWhenSet);\n  obj2.set(<span class=\"hljs-string\">'bar'</span>, baz);\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the <code>unknownProperty</code> method then that will be invoked.</p>\n<p>If you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don&#39;t\nknow for sure is private. (Properties beginning with an underscore &#39;_&#39;\nare considered private.)</p>\n<p>On all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the <code>unknownProperty</code> handler. Otherwise you can ignore this\nmethod.</p>\n<p>Note that if the object itself is <code>undefined</code>, this method will throw\nan error.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#normalizeTuple",
      "fields": [
        {
          "name": "name",
          "value": "normalizeTuple",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Normalizes a target/path pair to reflect that actual target/path that should\nbe observed, etc. This takes into account passing in global property\npaths (i.e. a path beginning with a capital letter not defined on the\ntarget).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the <code>setUnknownProperty</code>\nmethod then that will be invoked as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#trySet",
      "fields": [
        {
          "name": "name",
          "value": "trySet",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Error-tolerant form of <code>Ember.set</code>. Will not blow up if any part of the\nchain is <code>undefined</code>, <code>null</code>, or destroyed.</p>\n<p>This is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set a list of properties on an object. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> anObject = Ember.Object.create();\n\nanObject.setProperties({\n  firstName: <span class=\"hljs-string\">'Stanley'</span>,\n  lastName: <span class=\"hljs-string\">'Stuart'</span>,\n  age: <span class=\"hljs-number\">21</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#generateGuid",
      "fields": [
        {
          "name": "name",
          "value": "generateGuid",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall <code>Ember.guidFor(obj)</code>, which return an existing guid if available.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#guidFor",
      "fields": [
        {
          "name": "name",
          "value": "guidFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n<code>Ember.Object</code>-based or not, but be aware that it will add a <code>_guid</code>\nproperty.</p>\n<p>You can also use this method on DOM Element objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#meta",
      "fields": [
        {
          "name": "name",
          "value": "meta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the meta hash for an object. If <code>writable</code> is true ensures the\nhash is writable for this object as well.</p>\n<p>The meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#metaPath",
      "fields": [
        {
          "name": "name",
          "value": "metaPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#wrap",
      "fields": [
        {
          "name": "name",
          "value": "wrap",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Wraps the passed function so that <code>this._super</code> will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isArray",
      "fields": [
        {
          "name": "name",
          "value": "isArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns true if the passed object is an array or Array-like.</p>\n<p>Ember Array Protocol:</p>\n<ul>\n<li>the object has an objectAt property</li>\n<li>the object is a native Array</li>\n<li>the object is an Object, and has a length property</li>\n</ul>\n<p>Unlike <code>Ember.typeOf</code> this method returns true even if the passed object is\nnot formally array but appears to be array-like (i.e. implements <code>Ember.Array</code>)</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.isArray();                                          <span class=\"hljs-comment\">// false</span>\nEmber.isArray([]);                                        <span class=\"hljs-comment\">// true</span>\nEmber.isArray(Ember.ArrayProxy.create({ content: [] }));  <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#makeArray",
      "fields": [
        {
          "name": "name",
          "value": "makeArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Forces the passed object to be part of an array. If the object is already\nan array or array-like, it will return the object. Otherwise, it will add the object to\nan array. If obj is <code>null</code> or <code>undefined</code>, it will return an empty array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.makeArray();            <span class=\"hljs-comment\">// []</span>\nEmber.makeArray(<span class=\"hljs-literal\">null</span>);        <span class=\"hljs-comment\">// []</span>\nEmber.makeArray(<span class=\"hljs-literal\">undefined</span>);   <span class=\"hljs-comment\">// []</span>\nEmber.makeArray(<span class=\"hljs-string\">'lindsay'</span>);   <span class=\"hljs-comment\">// ['lindsay']</span>\nEmber.makeArray([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">42</span>]);  <span class=\"hljs-comment\">// [1, 2, 42]</span>\n\n<span class=\"hljs-keyword\">var</span> controller = Ember.ArrayProxy.create({ content: [] });\n\nEmber.makeArray(controller) === controller;  <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#canInvoke",
      "fields": [
        {
          "name": "name",
          "value": "canInvoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if the <code>methodName</code> exists on the <code>obj</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> foo = { bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'bar'</span>; }, baz: <span class=\"hljs-literal\">null</span> };\n\nEmber.canInvoke(foo, <span class=\"hljs-string\">'bar'</span>); <span class=\"hljs-comment\">// true</span>\nEmber.canInvoke(foo, <span class=\"hljs-string\">'baz'</span>); <span class=\"hljs-comment\">// false</span>\nEmber.canInvoke(foo, <span class=\"hljs-string\">'bat'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#tryInvoke",
      "fields": [
        {
          "name": "name",
          "value": "tryInvoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if the <code>methodName</code> exists on the <code>obj</code>,\nand if it does, invokes it with the arguments passed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'03/15/2013'</span>);\n\nEmber.tryInvoke(d, <span class=\"hljs-string\">'getTime'</span>);              <span class=\"hljs-comment\">// 1363320000000</span>\nEmber.tryInvoke(d, <span class=\"hljs-string\">'setFullYear'</span>, [<span class=\"hljs-number\">2014</span>]);  <span class=\"hljs-comment\">// 1394856000000</span>\nEmber.tryInvoke(d, <span class=\"hljs-string\">'noSuchMethod'</span>, [<span class=\"hljs-number\">2014</span>]); <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#tryFinally",
      "fields": [
        {
          "name": "name",
          "value": "tryFinally",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides try/finally functionality, while working\naround Safari&#39;s double finally bug.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> tryable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  someResource.lock();\n  runCallback(); <span class=\"hljs-comment\">// May throw error.</span>\n};\n\n<span class=\"hljs-keyword\">var</span> finalizer = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  someResource.unlock();\n};\n\nEmber.tryFinally(tryable, finalizer);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#tryCatchFinally",
      "fields": [
        {
          "name": "name",
          "value": "tryCatchFinally",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides try/catch/finally functionality, while working\naround Safari&#39;s double finally bug.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> tryable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>, l = listeners.length; i &lt; l; i++) {\n    listener = listeners[i];\n    beforeValues[i] = listener.before(name, time(), payload);\n  }\n\n  <span class=\"hljs-keyword\">return</span> callback.call(binding);\n};\n\n<span class=\"hljs-keyword\">var</span> catchable = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span> </span>{\n  payload = payload || {};\n  payload.exception = e;\n};\n\n<span class=\"hljs-keyword\">var</span> finalizer = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>, l = listeners.length; i &lt; l; i++) {\n    listener = listeners[i];\n    listener.after(name, time(), payload, beforeValues[i]);\n  }\n};\n\nEmber.tryCatchFinally(tryable, catchable, finalizer);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#typeOf",
      "fields": [
        {
          "name": "name",
          "value": "typeOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a consistent type for the passed item.</p>\n<p>Use this instead of the built-in <code>typeof</code> to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">| Return Value  | Meaning                                              |\n|---------------|------------------------------------------------------|\n| 'string'      | String primitive or String object.                   |\n| 'number'      | Number primitive or Number object.                   |\n| 'boolean'     | Boolean primitive or Boolean object.                 |\n| 'null'        | Null value                                           |\n| 'undefined'   | Undefined value                                      |\n| 'function'    | A function                                           |\n| 'array'       | An instance of Array                                 |\n| 'regexp'      | An instance of RegExp                                |\n| 'date'        | An instance of Date                                  |\n| 'class'       | An Ember class (created using Ember.Object.extend()) |\n| 'instance'    | An Ember object instance                             |\n| 'error'       | An instance of the Error object                      |\n| 'object'      | A JavaScript object not inheriting from Ember.Object |</pre></td>      </tr>    </table>  </div></div><p>Examples:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.typeOf();                       <span class=\"hljs-comment\">// 'undefined'</span>\nEmber.typeOf(<span class=\"hljs-literal\">null</span>);                   <span class=\"hljs-comment\">// 'null'</span>\nEmber.typeOf(<span class=\"hljs-literal\">undefined</span>);              <span class=\"hljs-comment\">// 'undefined'</span>\nEmber.typeOf(<span class=\"hljs-string\">'michael'</span>);              <span class=\"hljs-comment\">// 'string'</span>\nEmber.typeOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">'michael'</span>));  <span class=\"hljs-comment\">// 'string'</span>\nEmber.typeOf(<span class=\"hljs-number\">101</span>);                    <span class=\"hljs-comment\">// 'number'</span>\nEmber.typeOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">101</span>));        <span class=\"hljs-comment\">// 'number'</span>\nEmber.typeOf(<span class=\"hljs-literal\">true</span>);                   <span class=\"hljs-comment\">// 'boolean'</span>\nEmber.typeOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">true</span>));      <span class=\"hljs-comment\">// 'boolean'</span>\nEmber.typeOf(Ember.makeArray);        <span class=\"hljs-comment\">// 'function'</span>\nEmber.typeOf([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">90</span>]);             <span class=\"hljs-comment\">// 'array'</span>\nEmber.typeOf(<span class=\"hljs-regexp\">/abc/</span>);                  <span class=\"hljs-comment\">// 'regexp'</span>\nEmber.typeOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());             <span class=\"hljs-comment\">// 'date'</span>\nEmber.typeOf(Ember.Object.extend());  <span class=\"hljs-comment\">// 'class'</span>\nEmber.typeOf(Ember.Object.create());  <span class=\"hljs-comment\">// 'instance'</span>\nEmber.typeOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'teamocil'</span>));  <span class=\"hljs-comment\">// 'error'</span>\n\n<span class=\"hljs-comment\">// 'normal' JavaScript object</span>\nEmber.typeOf({ a: <span class=\"hljs-string\">'b'</span> });             <span class=\"hljs-comment\">// 'object'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#inspect",
      "fields": [
        {
          "name": "name",
          "value": "inspect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.</p>\n<p>It is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: <a href=\"https://github.com/NV/jsDump\">https://github.com/NV/jsDump</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#watch",
      "fields": [
        {
          "name": "name",
          "value": "watch",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Starts watching a property on an object. Whenever the property changes,\ninvokes <code>Ember.propertyWillChange</code> and <code>Ember.propertyDidChange</code>. This is the\nprimitive used by observers and dependent keys; usually you will never call\nthis method directly but instead use higher level methods like\n<code>Ember.addObserver()</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tears down the meta on an object so that it can be garbage collected.\nMultiple calls will have no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#arrayComputed",
      "fields": [
        {
          "name": "name",
          "value": "arrayComputed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a computed property which operates on dependent arrays and\nis updated with &quot;one at a time&quot; semantics. When items are added or\nremoved from the dependent array(s) an array computed only operates\non the change instead of re-evaluating the entire array. This should\nreturn an array, if you&#39;d like to use &quot;one at a time&quot; semantics and\ncompute some value other then an array look at\n<code>Ember.reduceComputed</code>.</p>\n<p>If there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing three properties.</p>\n<p><code>initialize</code> - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.</p>\n<p><code>removedItem</code> - A function that is called each time an element is\nremoved from the array.</p>\n<p><code>addedItem</code> - A function that is called each time an element is\nadded to the array.</p>\n<p>The <code>initialize</code> function has the following signature:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(array, changeMeta, instanceMeta)</span></span></pre></td>      </tr>    </table>  </div></div><p><code>array</code> - The initial value of the arrayComputed, an empty array.</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\ncomputed. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n</ul>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions both have the following signature:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(accumulatedValue, item, changeMeta, instanceMeta)</span></span></pre></td>      </tr>    </table>  </div></div><p><code>accumulatedValue</code> - The value returned from the last time\n<code>removedItem</code> or <code>addedItem</code> was called or an empty array.</p>\n<p><code>item</code> - the element added or removed from the array</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\nchange. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n<li><code>index</code> the index of the added or removed item</li>\n<li><code>item</code> the added or removed item: this is exactly the same as\nthe second arg</li>\n<li><code>arrayChanged</code> the array that triggered the change. Can be\nuseful when depending on multiple arrays.</li>\n</ul>\n<p>For property changes triggered on an item property change (when\ndepKey is something like <code>someArray.@each.someProperty</code>),\n<code>changeMeta</code> will also contain the following property:</p>\n<ul>\n<li><code>previousValues</code> an object whose keys are the properties that changed on\nthe item, and whose values are the item&#39;s previous values.</li>\n</ul>\n<p><code>previousValues</code> is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &amp;\nfiltering).</p>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it&#39;s used in eg max and min.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.computed.map = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(dependentKey, callback)</span> </span>{\n  <span class=\"hljs-keyword\">var</span> options = {\n    addedItem: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(array, item, changeMeta, instanceMeta)</span> </span>{\n      <span class=\"hljs-keyword\">var</span> mapped = callback(item);\n      array.insertAt(changeMeta.index, mapped);\n      <span class=\"hljs-keyword\">return</span> array;\n    },\n    removedItem: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(array, item, changeMeta, instanceMeta)</span> </span>{\n      array.removeAt(changeMeta.index, <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-keyword\">return</span> array;\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> Ember.arrayComputed(dependentKey, options);\n};</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#reduceComputed",
      "fields": [
        {
          "name": "name",
          "value": "reduceComputed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a computed property which operates on dependent arrays and\nis updated with &quot;one at a time&quot; semantics. When items are added or\nremoved from the dependent array(s) a reduce computed only operates\non the change instead of re-evaluating the entire array.</p>\n<p>If there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing four properties:</p>\n<p><code>initialValue</code> - A value or function that will be used as the initial\nvalue for the computed. If this property is a function the result of calling\nthe function will be used as the initial value. This property is required.</p>\n<p><code>initialize</code> - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.</p>\n<p><code>removedItem</code> - A function that is called each time an element is removed\nfrom the array.</p>\n<p><code>addedItem</code> - A function that is called each time an element is added to\nthe array.</p>\n<p>The <code>initialize</code> function has the following signature:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(initialValue, changeMeta, instanceMeta)</span></span></pre></td>      </tr>    </table>  </div></div><p><code>initialValue</code> - The value of the <code>initialValue</code> property from the\noptions object.</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\ncomputed. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n</ul>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions both have the following signature:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(accumulatedValue, item, changeMeta, instanceMeta)</span></span></pre></td>      </tr>    </table>  </div></div><p><code>accumulatedValue</code> - The value returned from the last time\n<code>removedItem</code> or <code>addedItem</code> was called or <code>initialValue</code>.</p>\n<p><code>item</code> - the element added or removed from the array</p>\n<p><code>changeMeta</code> - An object which contains meta information about the\nchange. It contains the following properties:</p>\n<ul>\n<li><code>property</code> the computed property</li>\n<li><code>propertyName</code> the name of the property on the object</li>\n<li><code>index</code> the index of the added or removed item</li>\n<li><code>item</code> the added or removed item: this is exactly the same as\nthe second arg</li>\n<li><code>arrayChanged</code> the array that triggered the change. Can be\nuseful when depending on multiple arrays.</li>\n</ul>\n<p>For property changes triggered on an item property change (when\ndepKey is something like <code>someArray.@each.someProperty</code>),\n<code>changeMeta</code> will also contain the following property:</p>\n<ul>\n<li><code>previousValues</code> an object whose keys are the properties that changed on\nthe item, and whose values are the item&#39;s previous values.</li>\n</ul>\n<p><code>previousValues</code> is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &amp;\nfiltering).</p>\n<p><code>instanceMeta</code> - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.</p>\n<p>The <code>removedItem</code> and <code>addedItem</code> functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it&#39;s used in eg max and min.</p>\n<p>Note that observers will be fired if either of these functions return a value\nthat differs from the accumulated value.  When returning an object that\nmutates in response to array changes, for example an array that maps\neverything from some other array (see <code>Ember.computed.map</code>), it is usually\nimportant that the <em>same</em> array be returned to avoid accidentally triggering observers.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.computed.max = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(dependentKey)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> Ember.reduceComputed(dependentKey, {\n    initialValue: -<span class=\"hljs-literal\">Infinity</span>,\n\n    addedItem: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(accumulatedValue, item, changeMeta, instanceMeta)</span> </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(accumulatedValue, item);\n    },\n\n    removedItem: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(accumulatedValue, item, changeMeta, instanceMeta)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (item &lt; accumulatedValue) {\n        <span class=\"hljs-keyword\">return</span> accumulatedValue;\n      }\n    }\n  });\n};</pre></td>      </tr>    </table>  </div></div><p>Dependent keys may refer to <code>@this</code> to observe changes to the object itself,\nwhich must be array-like, rather than a property of the object.  This is\nmostly useful for array proxies, to ensure objects are retrieved via\n<code>objectAtContent</code>.  This is how you could sort items by properties defined on an item controller.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PeopleController = Ember.ArrayController.extend({\n  itemController: <span class=\"hljs-string\">'person'</span>,\n\n  sortedPeople: Ember.computed.sort(<span class=\"hljs-string\">'@this.@each.reversedName'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(personA, personB)</span> </span>{\n    <span class=\"hljs-comment\">// `reversedName` isn't defined on Person, but we have access to it via</span>\n    <span class=\"hljs-comment\">// the item controller App.PersonController.  If we'd used</span>\n    <span class=\"hljs-comment\">// `content.@each.reversedName` above, we would be getting the objects</span>\n    <span class=\"hljs-comment\">// directly and not have access to `reversedName`.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-keyword\">var</span> reversedNameA = get(personA, <span class=\"hljs-string\">'reversedName'</span>);\n    <span class=\"hljs-keyword\">var</span> reversedNameB = get(personB, <span class=\"hljs-string\">'reversedName'</span>);\n\n    <span class=\"hljs-keyword\">return</span> Ember.compare(reversedNameA, reversedNameB);\n  })\n});\n\nApp.PersonController = Ember.ObjectController.extend({\n  reversedName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> reverse(get(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">'name'</span>));\n  }.property(<span class=\"hljs-string\">'name'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Dependent keys whose values are not arrays are treated as regular\ndependencies: when they change, the computed property is completely\nrecalculated.  It is sometimes useful to have dependent arrays with similar\nsemantics.  Dependent keys which end in <code>.[]</code> do not use &quot;one at a time&quot;\nsemantics.  When an item is added or removed from such a dependency, the\ncomputed property is completely recomputed.</p>\n<p>When the computed property is completely recomputed, the <code>accumulatedValue</code>\nis discarded, it starts with <code>initialValue</code> again, and each item is passed\nto <code>addedItem</code> in turn.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  <span class=\"hljs-comment\">// When `string` is changed, `computed` is completely recomputed.</span>\n  string: <span class=\"hljs-string\">'a string'</span>,\n\n  <span class=\"hljs-comment\">// When an item is added to `array`, `addedItem` is called.</span>\n  array: [],\n\n  <span class=\"hljs-comment\">// When an item is added to `anotherArray`, `computed` is completely</span>\n  <span class=\"hljs-comment\">// recomputed.</span>\n  anotherArray: [],\n\n  computed: Ember.reduceComputed(<span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'array'</span>, <span class=\"hljs-string\">'anotherArray.[]'</span>, {\n    addedItem: addedItemCallback,\n    removedItem: removedItemCallback\n  })\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#onLoad",
      "fields": [
        {
          "name": "name",
          "value": "onLoad",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Detects when a specific package of Ember (e.g. &#39;Ember.Handlebars&#39;)\nhas fully loaded and is available for extension.</p>\n<p>The provided <code>callback</code> will be called with the <code>name</code> passed\nresolved from a string into the object:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.onLoad(<span class=\"hljs-string\">'Ember.Handlebars'</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hbars)</span> </span>{\n  hbars.registerHelper(...);\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#runLoadHooks",
      "fields": [
        {
          "name": "name",
          "value": "runLoadHooks",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when an Ember.js package (e.g Ember.Handlebars) has finished\nloading. Triggers any callbacks registered for this event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#A",
      "fields": [
        {
          "name": "name",
          "value": "A",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an <code>Ember.NativeArray</code> from an Array like object.\nDoes not modify the original object. Ember.A is not needed if\n<code>Ember.EXTEND_PROTOTYPES</code> is <code>true</code> (the default value). However,\nit is recommended that you use Ember.A when creating addons for\nember or when you can not guarantee that <code>Ember.EXTEND_PROTOTYPES</code>\nwill be <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-keyword\">var</span> Pagination = Ember.CollectionView.extend({\n  tagName: <span class=\"hljs-string\">'ul'</span>,\n  classNames: [<span class=\"hljs-string\">'pagination'</span>],\n\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'content'</span>)) {\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'content'</span>, Ember.A());\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#compare",
      "fields": [
        {
          "name": "name",
          "value": "compare",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will compare two javascript values of possibly different types.\nIt will tell you which one is greater than the other by returning:</p>\n<ul>\n<li>-1 if the first is smaller than the second,</li>\n<li>0 if both are equal,</li>\n<li>1 if the first is greater than the second.</li>\n</ul>\n<p>The order is calculated based on <code>Ember.ORDER_DEFINITION</code>, if types are different.\nIn case they have the same type an appropriate comparison for this type is made.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> Ember.compare(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'hello'</span>);  <span class=\"hljs-comment\">// 0</span>\n Ember.compare(<span class=\"hljs-string\">'abc'</span>, <span class=\"hljs-string\">'dfg'</span>);      <span class=\"hljs-comment\">// -1</span>\n Ember.compare(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>);              <span class=\"hljs-comment\">// 1</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a clone of the passed object. This function can take just about\nany type of object and create a clone of it, including primitive values\n(which are not actually cloned because they are immutable).</p>\n<p>If the passed object implements the <code>copy()</code> method, then this function\nwill simply call that method and return the result. Please see\n<code>Ember.Copyable</code> for further details.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#isEqual",
      "fields": [
        {
          "name": "name",
          "value": "isEqual",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Compares two objects, returning true if they are logically equal. This is\na deeper comparison than a simple triple equal. For sets it will compare the\ninternal objects. For any other object that implements <code>isEqual()</code> it will\nrespect that method.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.isEqual(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'hello'</span>);  <span class=\"hljs-comment\">// true</span>\nEmber.isEqual(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);              <span class=\"hljs-comment\">// false</span>\nEmber.isEqual([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>]);    <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#createInjectionHelper",
      "fields": [
        {
          "name": "name",
          "value": "createInjectionHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This method allows other Ember modules to register injection helpers for a\ngiven container type. Helpers are exported to the <code>inject</code> namespace as the\ncontainer type itself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#validatePropertyInjections",
      "fields": [
        {
          "name": "name",
          "value": "validatePropertyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Validation function that runs per-type validation functions once for each\ninjected type encountered.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for jQuery</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#controllerFor",
      "fields": [
        {
          "name": "name",
          "value": "controllerFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Finds a controller instance.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#generateControllerFactory",
      "fields": [
        {
          "name": "name",
          "value": "generateControllerFactory",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Generates a controller factory</p>\n<p>The type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.</p>\n<p>You can customize your generated controllers by defining\n<code>App.ObjectController</code> or <code>App.ArrayController</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#generateController",
      "fields": [
        {
          "name": "name",
          "value": "generateController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Generates and instantiates a controller.</p>\n<p>The type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#ArrayPolyfills",
      "fields": [
        {
          "name": "name",
          "value": "ArrayPolyfills",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Array polyfills to support ES5 features in older browsers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#LOG_BINDINGS",
      "fields": [
        {
          "name": "name",
          "value": "LOG_BINDINGS",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Debug parameter you can turn on. This will log all bindings that fire to\nthe console. This should be disabled in production code. Note that you\ncan also enable this from the console or temporarily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#VERSION",
      "fields": [
        {
          "name": "name",
          "value": "VERSION",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#ENV",
      "fields": [
        {
          "name": "name",
          "value": "ENV",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Standard environmental variables. You can define these in a global <code>EmberENV</code>\nvariable before loading Ember to control various configuration settings.</p>\n<p>For backwards compatibility with earlier versions of Ember the global <code>ENV</code>\nvariable will be used if <code>EmberENV</code> is not defined.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#EXTEND_PROTOTYPES",
      "fields": [
        {
          "name": "name",
          "value": "EXTEND_PROTOTYPES",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Determines whether Ember should enhance some built-in object prototypes to\nprovide a more friendly API. If enabled, a few methods will be added to\n<code>Function</code>, <code>String</code>, and <code>Array</code>. <code>Object.prototype</code> will not be enhanced,\nwhich is the one that causes most trouble for people.</p>\n<p>In general we recommend leaving this option set to true since it rarely\nconflicts with other code. If you need to turn it off however, you can\ndefine an <code>EmberENV.EXTEND_PROTOTYPES</code> config to disable it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#LOG_STACKTRACE_ON_DEPRECATION",
      "fields": [
        {
          "name": "name",
          "value": "LOG_STACKTRACE_ON_DEPRECATION",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Determines whether Ember logs a full stack trace during deprecation warnings</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#SHIM_ES5",
      "fields": [
        {
          "name": "name",
          "value": "SHIM_ES5",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Determines whether Ember should add ECMAScript 5 Array shims to older browsers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#LOG_VERSION",
      "fields": [
        {
          "name": "name",
          "value": "LOG_VERSION",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Determines whether Ember logs info about version of used libraries</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#GUID_PREFIX",
      "fields": [
        {
          "name": "name",
          "value": "GUID_PREFIX",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Prefix used for guids through out Ember.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#GUID_KEY",
      "fields": [
        {
          "name": "name",
          "value": "GUID_KEY",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.</p>\n<p>On browsers that support it, these properties are added with enumeration\ndisabled so they won&#39;t show up when you iterate over your properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#STRINGS",
      "fields": [
        {
          "name": "name",
          "value": "STRINGS",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the hash of localized strings for the current language. Used by\nthe <code>Ember.String.loc()</code> helper. To localize, add string values to this\nhash.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#TEMPLATES",
      "fields": [
        {
          "name": "name",
          "value": "TEMPLATES",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global hash of shared templates. This will automatically be populated\nby the build tools so that you can store your Handlebars templates in\nseparate files that get loaded into JavaScript at buildtime.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember#onerror",
      "fields": [
        {
          "name": "name",
          "value": "onerror",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A function may be assigned to <code>Ember.onerror</code> to be called when Ember\ninternals encounter an error. This is useful for specialized error handling\nand reporting code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error)</span> </span>{\n  Em.$.ajax(<span class=\"hljs-string\">'/report-error'</span>, <span class=\"hljs-string\">'POST'</span>, {\n    stack: error.stack,\n    otherInformation: <span class=\"hljs-string\">'whatever app state you want to provide'</span>\n  });\n};</pre></td>      </tr>    </table>  </div></div><p>Internally, <code>Ember.onerror</code> is used as Backburner&#39;s error handler.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.platform",
      "fields": [
        {
          "name": "name",
          "value": "Ember.platform",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.platform#defineProperty",
      "fields": [
        {
          "name": "name",
          "value": "defineProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Identical to <code>Object.defineProperty()</code>. Implements as much functionality\nas possible if not available natively.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.platform",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.platform#hasPropertyAccessors",
      "fields": [
        {
          "name": "name",
          "value": "hasPropertyAccessors",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set to true if the platform supports native getters and setters.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.platform",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream.Stream",
      "fields": [
        {
          "name": "name",
          "value": "Ember.stream.Stream",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.stream.Ember.stream",
      "fields": [
        {
          "name": "name",
          "value": "Ember.stream.Ember.stream",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.stream.Ember.stream#isStream",
      "fields": [
        {
          "name": "name",
          "value": "isStream",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Check whether an object is a stream or not</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream.Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream",
      "fields": [
        {
          "name": "name",
          "value": "Ember.stream",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.stream#subscribe",
      "fields": [
        {
          "name": "name",
          "value": "subscribe",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A method of subscribing to a stream which is safe for use with a non-stream\nobject. If a non-stream object is passed, the function does nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#unsubscribe",
      "fields": [
        {
          "name": "name",
          "value": "unsubscribe",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A method of unsubscribing from a stream which is safe for use with a non-stream\nobject. If a non-stream object is passed, the function does nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#read",
      "fields": [
        {
          "name": "name",
          "value": "read",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieve the value of a stream, or in the case a non-stream object is passed,\nreturn the object itself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#readArray",
      "fields": [
        {
          "name": "name",
          "value": "readArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Map an array, replacing any streams with their values.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#readHash",
      "fields": [
        {
          "name": "name",
          "value": "readHash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Map a hash, replacing any stream property values with the current value of that\nstream.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#scanArray",
      "fields": [
        {
          "name": "name",
          "value": "scanArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Check whether an array contains any stream values</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#scanHash",
      "fields": [
        {
          "name": "name",
          "value": "scanHash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Check whether a hash has any stream property values</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#concat",
      "fields": [
        {
          "name": "name",
          "value": "concat",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Join an array, with any streams replaced by their current values</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.stream#chain",
      "fields": [
        {
          "name": "name",
          "value": "chain",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Generate a new stream by providing a source stream and a function that can\nbe used to transform the stream&#39;s value. In the case of a non-stream object,\nreturns the result of the function.</p>\n<p>The value to transform would typically be available to the function you pass\nto <code>chain()</code> via scope. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">    <span class=\"hljs-keyword\">var</span> source = ...;  <span class=\"hljs-comment\">// stream returning a number</span>\n                           <span class=\"hljs-comment\">// or a numeric (non-stream) object</span>\n    <span class=\"hljs-keyword\">var</span> result = chain(source, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">var</span> currentValue = read(source);\n      <span class=\"hljs-keyword\">return</span> currentValue + <span class=\"hljs-number\">1</span>;\n    });</pre></td>      </tr>    </table>  </div></div><p>In the example, result is a stream if source is a stream, or a number of\nsource was numeric.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.stream",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Binding",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An <code>Ember.Binding</code> connects the properties of two objects so that whenever\nthe value of one property changes, the other property will be changed also.</p>\n<h2 id=\"automatic-creation-of-bindings-with-binding-named-properties\">Automatic Creation of Bindings with <code>/^*Binding/</code>-named Properties</h2>\n<p>You do not usually create Binding objects directly but instead describe\nbindings in your class or object definition using automatic binding\ndetection.</p>\n<p>Properties ending in a <code>Binding</code> suffix will be converted to <code>Ember.Binding</code>\ninstances. The value of this property should be a string representing a path\nto another object or a custom binding instance created using Binding helpers\n(see &quot;One Way Bindings&quot;):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">valueBinding: <span class=\"hljs-string\">\"MyApp.someController.title\"</span></pre></td>      </tr>    </table>  </div></div><p>This will create a binding from <code>MyApp.someController.title</code> to the <code>value</code>\nproperty of your object instance automatically. Now the two values will be\nkept in sync.</p>\n<h2 id=\"one-way-bindings\">One Way Bindings</h2>\n<p>One especially useful binding customization you can use is the <code>oneWay()</code>\nhelper. This helper tells Ember that you are only interested in\nreceiving changes on the object you are binding from. For example, if you\nare binding to a preference and you want to be notified if the preference\nhas changed, but your object will not be changing the preference itself, you\ncould do:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">bigTitlesBinding: Ember.Binding.oneWay(<span class=\"hljs-string\">\"MyApp.preferencesController.bigTitles\"</span>)</pre></td>      </tr>    </table>  </div></div><p>This way if the value of <code>MyApp.preferencesController.bigTitles</code> changes the\n<code>bigTitles</code> property of your object will change also. However, if you\nchange the value of your <code>bigTitles</code> property, it will not update the\n<code>preferencesController</code>.</p>\n<p>One way bindings are almost twice as fast to setup and twice as fast to\nexecute because the binding only has to worry about changes to one side.</p>\n<p>You should consider using one way bindings anytime you have an object that\nmay be created frequently and you do not intend to change a property; only\nto monitor it for changes (such as in the example above).</p>\n<h2 id=\"adding-bindings-manually\">Adding Bindings Manually</h2>\n<p>All of the examples above show you how to configure a custom binding, but the\nresult of these customizations will be a binding template, not a fully active\nBinding instance. The binding will actually become active only when you\ninstantiate the object the binding belongs to. It is useful however, to\nunderstand what actually happens when the binding is activated.</p>\n<p>For a binding to function it must have at least a <code>from</code> property and a <code>to</code>\nproperty. The <code>from</code> property path points to the object/key that you want to\nbind from while the <code>to</code> path points to the object/key you want to bind to.</p>\n<p>When you define a custom binding, you are usually describing the property\nyou want to bind from (such as <code>MyApp.someController.value</code> in the examples\nabove). When your object is created, it will automatically assign the value\nyou want to bind <code>to</code> based on the name of your binding key. In the\nexamples above, during init, Ember objects will effectively call\nsomething like this on your binding:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">binding = Ember.Binding.from(<span class=\"hljs-string\">\"valueBinding\"</span>).to(<span class=\"hljs-string\">\"value\"</span>);</pre></td>      </tr>    </table>  </div></div><p>This creates a new binding instance based on the template you provide, and\nsets the to path to the <code>value</code> property of the new object. Now that the\nbinding is fully configured with a <code>from</code> and a <code>to</code>, it simply needs to be\nconnected to become active. This is done through the <code>connect()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">binding.connect(<span class=\"hljs-keyword\">this</span>);</pre></td>      </tr>    </table>  </div></div><p>Note that when you connect a binding you pass the object you want it to be\nconnected to. This object will be used as the root for both the from and\nto side of the binding when inspecting relative paths. This allows the\nbinding to be automatically inherited by subclassed objects as well.</p>\n<p>This also allows you to bind between objects using the paths you declare in\n<code>from</code> and <code>to</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Example 1</span>\nbinding = Ember.Binding.from(<span class=\"hljs-string\">\"App.someObject.value\"</span>).to(<span class=\"hljs-string\">\"value\"</span>);\nbinding.connect(<span class=\"hljs-keyword\">this</span>);\n\n<span class=\"hljs-comment\">// Example 2</span>\nbinding = Ember.Binding.from(<span class=\"hljs-string\">\"parentView.value\"</span>).to(<span class=\"hljs-string\">\"App.someObject.value\"</span>);\nbinding.connect(<span class=\"hljs-keyword\">this</span>);</pre></td>      </tr>    </table>  </div></div><p>Now that the binding is connected, it will observe both the from and to side\nand relay changes.</p>\n<p>If you ever needed to do so (you almost never will, but it is useful to\nunderstand this anyway), you could manually create an active binding by\nusing the <code>Ember.bind()</code> helper method. (This is the same method used by\nto setup your bindings on objects):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.bind(MyApp.anotherObject, <span class=\"hljs-string\">\"value\"</span>, <span class=\"hljs-string\">\"MyApp.someController.value\"</span>);</pre></td>      </tr>    </table>  </div></div><p>Both of these code fragments have the same effect as doing the most friendly\nform of binding creation like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyApp.anotherObject = Ember.Object.create({\n  valueBinding: <span class=\"hljs-string\">\"MyApp.someController.value\"</span>,\n\n  <span class=\"hljs-comment\">// OTHER CODE FOR THIS OBJECT...</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Ember&#39;s built in binding creation method makes it easy to automatically\ncreate bindings for you. You should always use the highest-level APIs\navailable, even if you understand how it works underneath.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This copies the Binding so it can be connected to another object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#from",
      "fields": [
        {
          "name": "name",
          "value": "from",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will set <code>from</code> property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.</p>\n<p>The binding will search for the property path starting at the root object\nyou pass when you <code>connect()</code> the binding. It follows the same rules as\n<code>get()</code> - see that method for more information.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#to",
      "fields": [
        {
          "name": "name",
          "value": "to",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will set the <code>to</code> property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.</p>\n<p>The binding will search for the property path starting at the root object\nyou pass when you <code>connect()</code> the binding. It follows the same rules as\n<code>get()</code> - see that method for more information.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#oneWay",
      "fields": [
        {
          "name": "name",
          "value": "oneWay",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new Binding instance and makes it apply in a single direction.\nA one-way binding will relay changes on the <code>from</code> side object (supplied\nas the <code>from</code> argument) the <code>to</code> side, but not the other way around.\nThis means that if you change the &quot;to&quot; side directly, the &quot;from&quot; side may have\na different value.</p>\n<p>See <code>Binding.oneWay</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#connect",
      "fields": [
        {
          "name": "name",
          "value": "connect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to connect this binding instance so that it can receive and relay\nchanges. This method will raise an exception if you have not set the\nfrom/to properties yet.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Binding#disconnect",
      "fields": [
        {
          "name": "name",
          "value": "disconnect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Disconnects the binding instance. Changes will no longer be relayed. You\nwill not usually need to call this method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Binding",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property transforms an object&#39;s function into a property.</p>\n<p>By default the function backing the computed property will only be called\nonce and the result will be cached. You can specify various properties\nthat your computed property depends on. This will force the cached\nresult to be recomputed if the dependencies are modified.</p>\n<p>In the following example we declare a computed property (by calling\n<code>.property()</code> on the fullName function) and setup the property\ndependencies (depending on firstName and lastName). The fullName function\nwill be called once (regardless of how many times it is accessed) as long\nas its dependencies have not changed. Once firstName or lastName are updated\nany future calls (or anything bound) to fullName will incorporate the new\nvalues.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  <span class=\"hljs-comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> firstName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>);\n    <span class=\"hljs-keyword\">var</span> lastName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n   <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">' '</span> + lastName;\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> tom = Person.create({\n  firstName: <span class=\"hljs-string\">'Tom'</span>,\n  lastName: <span class=\"hljs-string\">'Dale'</span>\n});\n\ntom.get(<span class=\"hljs-string\">'fullName'</span>) <span class=\"hljs-comment\">// 'Tom Dale'</span></pre></td>      </tr>    </table>  </div></div><p>You can also define what Ember should do when setting a computed property.\nIf you try to set a computed property, it will be invoked with the key and\nvalue you want to set it to. You can also accept the previous value as the\nthird parameter.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  <span class=\"hljs-comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, value, oldValue)</span> </span>{\n    <span class=\"hljs-comment\">// getter</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">arguments</span>.length === <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">var</span> firstName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>);\n      <span class=\"hljs-keyword\">var</span> lastName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n      <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">' '</span> + lastName;\n\n    <span class=\"hljs-comment\">// setter</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">var</span> name = value.split(<span class=\"hljs-string\">' '</span>);\n\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'firstName'</span>, name[<span class=\"hljs-number\">0</span>]);\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'lastName'</span>, name[<span class=\"hljs-number\">1</span>]);\n\n      <span class=\"hljs-keyword\">return</span> value;\n    }\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> person = Person.create();\n\nperson.set(<span class=\"hljs-string\">'fullName'</span>, <span class=\"hljs-string\">'Peter Wagenet'</span>);\nperson.get(<span class=\"hljs-string\">'firstName'</span>); <span class=\"hljs-comment\">// 'Peter'</span>\nperson.get(<span class=\"hljs-string\">'lastName'</span>);  <span class=\"hljs-comment\">// 'Wagenet'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#cacheable",
      "fields": [
        {
          "name": "name",
          "value": "cacheable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Properties are cacheable by default. Computed property will automatically\ncache the return value of your function until one of the dependent keys changes.</p>\n<p>Call <code>volatile()</code> to set it into non-cached mode. When in this mode\nthe computed property will not automatically cache the return value.</p>\n<p>However, if a property is properly observable, there is no reason to disable\ncaching.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#volatile",
      "fields": [
        {
          "name": "name",
          "value": "volatile",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> outsideService = Ember.Object.extend({\n  value: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> OutsideService.getValue();\n  }.property().volatile()\n}).create();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#readOnly",
      "fields": [
        {
          "name": "name",
          "value": "readOnly",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  guid: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'guid-guid-guid'</span>;\n  }.property().readOnly()\n});\n\n<span class=\"hljs-keyword\">var</span> person = Person.create();\n\nperson.set(<span class=\"hljs-string\">'guid'</span>, <span class=\"hljs-string\">'new-guid'</span>); <span class=\"hljs-comment\">// will throw an exception</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#property",
      "fields": [
        {
          "name": "name",
          "value": "property",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> President = Ember.Object.extend({\n  fullName: computed(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n    <span class=\"hljs-comment\">// Tell Ember that this computed property depends on firstName</span>\n    <span class=\"hljs-comment\">// and lastName</span>\n  }).property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> president = President.create({\n  firstName: <span class=\"hljs-string\">'Barack'</span>,\n  lastName: <span class=\"hljs-string\">'Obama'</span>\n});\n\npresident.get(<span class=\"hljs-string\">'fullName'</span>); <span class=\"hljs-comment\">// 'Barack Obama'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#meta",
      "fields": [
        {
          "name": "name",
          "value": "meta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>The hash that you pass to the <code>meta()</code> function will be saved on the\ncomputed property descriptor under the <code>_meta</code> key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the <code>metaForProperty()</code> function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Access the value of the function backing the computed property.\nIf this property has already been cached, return the cached result.\nOtherwise, call the function passing the property name as an argument.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(keyName)</span> </span>{\n    <span class=\"hljs-comment\">// the keyName parameter is 'fullName' in this case.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n\n<span class=\"hljs-keyword\">var</span> tom = Person.create({\n  firstName: <span class=\"hljs-string\">'Tom'</span>,\n  lastName: <span class=\"hljs-string\">'Dale'</span>\n});\n\ntom.get(<span class=\"hljs-string\">'fullName'</span>) <span class=\"hljs-comment\">// 'Tom Dale'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ComputedProperty#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a computed property. If the function that backs your\ncomputed property does not accept arguments then the default action for\nsetting would be to define the property on the current object, and set\nthe value of the property to the value being set.</p>\n<p>Generally speaking if you intend for your computed property to be set\nyour backing function should accept either two or three arguments.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  <span class=\"hljs-comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, value, oldValue)</span> </span>{\n    <span class=\"hljs-comment\">// getter</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">arguments</span>.length === <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">var</span> firstName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>);\n      <span class=\"hljs-keyword\">var</span> lastName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n      <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">' '</span> + lastName;\n\n    <span class=\"hljs-comment\">// setter</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">var</span> name = value.split(<span class=\"hljs-string\">' '</span>);\n\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'firstName'</span>, name[<span class=\"hljs-number\">0</span>]);\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'lastName'</span>, name[<span class=\"hljs-number\">1</span>]);\n\n      <span class=\"hljs-keyword\">return</span> value;\n    }\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> person = Person.create();\n\nperson.set(<span class=\"hljs-string\">'fullName'</span>, <span class=\"hljs-string\">'Peter Wagenet'</span>);\nperson.get(<span class=\"hljs-string\">'firstName'</span>); <span class=\"hljs-comment\">// 'Peter'</span>\nperson.get(<span class=\"hljs-string\">'lastName'</span>);  <span class=\"hljs-comment\">// 'Wagenet'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed",
      "fields": [
        {
          "name": "name",
          "value": "Ember.computed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties\nwith mixins or via <code>Ember.defineProperty()</code>.</p>\n<p>The function you pass will be used to both get and set property values.\nThe function should accept two parameters, key and value. If value is not\nundefined you should set the value first. In either case return the\ncurrent value of the property.</p>\n<p>A computed property defined in this way might look like this:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  firstName: <span class=\"hljs-string\">'Betty'</span>,\n  lastName: <span class=\"hljs-string\">'Jones'</span>,\n\n  fullName: Ember.computed(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, value)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> client = Person.create();\n\nclient.get(<span class=\"hljs-string\">'fullName'</span>); <span class=\"hljs-comment\">// 'Betty Jones'</span>\n\nclient.set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Fuller'</span>);\nclient.get(<span class=\"hljs-string\">'fullName'</span>); <span class=\"hljs-comment\">// 'Betty Fuller'</span></pre></td>      </tr>    </table>  </div></div><p><em>Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have prototype extensions enabled.</em></p>\n<p>You might use this method if you disabled\n<a href=\"http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/\">Prototype Extensions</a>.\nThe alternative syntax might look like this\n(if prototype extensions are enabled, which is the default behavior):</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.computed#empty",
      "fields": [
        {
          "name": "name",
          "value": "empty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> ToDoList = Ember.Object.extend({\n  isDone: Ember.computed.empty(<span class=\"hljs-string\">'todos'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> todoList = ToDoList.create({\n  todos: [<span class=\"hljs-string\">'Unit Test'</span>, <span class=\"hljs-string\">'Documentation'</span>, <span class=\"hljs-string\">'Release'</span>]\n});\n\ntodoList.get(<span class=\"hljs-string\">'isDone'</span>); <span class=\"hljs-comment\">// false</span>\ntodoList.get(<span class=\"hljs-string\">'todos'</span>).clear();\ntodoList.get(<span class=\"hljs-string\">'isDone'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#notEmpty",
      "fields": [
        {
          "name": "name",
          "value": "notEmpty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasStuff: Ember.computed.notEmpty(<span class=\"hljs-string\">'backpack'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({ backpack: [<span class=\"hljs-string\">'Food'</span>, <span class=\"hljs-string\">'Sleeping Bag'</span>, <span class=\"hljs-string\">'Tent'</span>] });\n\nhamster.get(<span class=\"hljs-string\">'hasStuff'</span>);         <span class=\"hljs-comment\">// true</span>\nhamster.get(<span class=\"hljs-string\">'backpack'</span>).clear(); <span class=\"hljs-comment\">// []</span>\nhamster.get(<span class=\"hljs-string\">'hasStuff'</span>);         <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#none",
      "fields": [
        {
          "name": "name",
          "value": "none",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  isHungry: Ember.computed.none(<span class=\"hljs-string\">'food'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'isHungry'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'food'</span>, <span class=\"hljs-string\">'Banana'</span>);\nhamster.get(<span class=\"hljs-string\">'isHungry'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'food'</span>, <span class=\"hljs-literal\">null</span>);\nhamster.get(<span class=\"hljs-string\">'isHungry'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#not",
      "fields": [
        {
          "name": "name",
          "value": "not",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns the inverse boolean value\nof the original value for the dependent property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  isAnonymous: Ember.computed.not(<span class=\"hljs-string\">'loggedIn'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> user = User.create({loggedIn: <span class=\"hljs-literal\">false</span>});\n\nuser.get(<span class=\"hljs-string\">'isAnonymous'</span>); <span class=\"hljs-comment\">// true</span>\nuser.set(<span class=\"hljs-string\">'loggedIn'</span>, <span class=\"hljs-literal\">true</span>);\nuser.get(<span class=\"hljs-string\">'isAnonymous'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#bool",
      "fields": [
        {
          "name": "name",
          "value": "bool",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that converts the provided dependent property\ninto a boolean value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasBananas: Ember.computed.bool(<span class=\"hljs-string\">'numBananas'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">0</span>);\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">1</span>);\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-literal\">null</span>);\nhamster.get(<span class=\"hljs-string\">'hasBananas'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#match",
      "fields": [
        {
          "name": "name",
          "value": "match",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property which matches the original value for the\ndependent property against a given RegExp, returning <code>true</code>\nif they values matches the RegExp and <code>false</code> if it does not.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  hasValidEmail: Ember.computed.match(<span class=\"hljs-string\">'email'</span>, <span class=\"hljs-regexp\">/^.+@.+\\..+$/</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> user = User.create({loggedIn: <span class=\"hljs-literal\">false</span>});\n\nuser.get(<span class=\"hljs-string\">'hasValidEmail'</span>); <span class=\"hljs-comment\">// false</span>\nuser.set(<span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">''</span>);\nuser.get(<span class=\"hljs-string\">'hasValidEmail'</span>); <span class=\"hljs-comment\">// false</span>\nuser.set(<span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'ember_hamster@example.com'</span>);\nuser.get(<span class=\"hljs-string\">'hasValidEmail'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#equal",
      "fields": [
        {
          "name": "name",
          "value": "equal",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the provided dependent property\nis equal to the given value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  napTime: Ember.computed.equal(<span class=\"hljs-string\">'state'</span>, <span class=\"hljs-string\">'sleepy'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'napTime'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'state'</span>, <span class=\"hljs-string\">'sleepy'</span>);\nhamster.get(<span class=\"hljs-string\">'napTime'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'state'</span>, <span class=\"hljs-string\">'hungry'</span>);\nhamster.get(<span class=\"hljs-string\">'napTime'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#gt",
      "fields": [
        {
          "name": "name",
          "value": "gt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the provided dependent property\nis greater than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gt(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">10</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">11</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#gte",
      "fields": [
        {
          "name": "name",
          "value": "gte",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gte(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">10</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">10</span>);\nhamster.get(<span class=\"hljs-string\">'hasTooManyBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#lt",
      "fields": [
        {
          "name": "name",
          "value": "lt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the provided dependent property\nis less than the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lt(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">2</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#lte",
      "fields": [
        {
          "name": "name",
          "value": "lte",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lte(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">5</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'numBananas'</span>, <span class=\"hljs-number\">3</span>);\nhamster.get(<span class=\"hljs-string\">'needsMoreBananas'</span>); <span class=\"hljs-comment\">// true</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#and",
      "fields": [
        {
          "name": "name",
          "value": "and",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that performs a logical <code>and</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  readyForCamp: Ember.computed.and(<span class=\"hljs-string\">'hasTent'</span>, <span class=\"hljs-string\">'hasBackpack'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'hasTent'</span>, <span class=\"hljs-literal\">true</span>);\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'hasBackpack'</span>, <span class=\"hljs-literal\">true</span>);\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'hasBackpack'</span>, <span class=\"hljs-string\">'Yes'</span>);\nhamster.get(<span class=\"hljs-string\">'readyForCamp'</span>); <span class=\"hljs-comment\">// 'Yes'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#or",
      "fields": [
        {
          "name": "name",
          "value": "or",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property which performs a logical <code>or</code> on the\noriginal values for the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  readyForRain: Ember.computed.or(<span class=\"hljs-string\">'hasJacket'</span>, <span class=\"hljs-string\">'hasUmbrella'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'readyForRain'</span>); <span class=\"hljs-comment\">// false</span>\nhamster.set(<span class=\"hljs-string\">'hasUmbrella'</span>, <span class=\"hljs-literal\">true</span>);\nhamster.get(<span class=\"hljs-string\">'readyForRain'</span>); <span class=\"hljs-comment\">// true</span>\nhamster.set(<span class=\"hljs-string\">'hasJacket'</span>, <span class=\"hljs-string\">'Yes'</span>);\nhamster.get(<span class=\"hljs-string\">'readyForRain'</span>); <span class=\"hljs-comment\">// 'Yes'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns the first truthy value\nfrom a list of dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  hasClothes: Ember.computed.any(<span class=\"hljs-string\">'hat'</span>, <span class=\"hljs-string\">'shirt'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'hasClothes'</span>); <span class=\"hljs-comment\">// null</span>\nhamster.set(<span class=\"hljs-string\">'shirt'</span>, <span class=\"hljs-string\">'Hawaiian Shirt'</span>);\nhamster.get(<span class=\"hljs-string\">'hasClothes'</span>); <span class=\"hljs-comment\">// 'Hawaiian Shirt'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#collect",
      "fields": [
        {
          "name": "name",
          "value": "collect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns the array of values\nfor the provided dependent properties.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  clothes: Ember.computed.collect(<span class=\"hljs-string\">'hat'</span>, <span class=\"hljs-string\">'shirt'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create();\n\nhamster.get(<span class=\"hljs-string\">'clothes'</span>); <span class=\"hljs-comment\">// [null, null]</span>\nhamster.set(<span class=\"hljs-string\">'hat'</span>, <span class=\"hljs-string\">'Camp Hat'</span>);\nhamster.set(<span class=\"hljs-string\">'shirt'</span>, <span class=\"hljs-string\">'Camp Shirt'</span>);\nhamster.get(<span class=\"hljs-string\">'clothes'</span>); <span class=\"hljs-comment\">// ['Camp Hat', 'Camp Shirt']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#alias",
      "fields": [
        {
          "name": "name",
          "value": "alias",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'Alex Matchneer'</span>,\n  nomen: Ember.computed.alias(<span class=\"hljs-string\">'name'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> alex = Person.create();\n\nalex.get(<span class=\"hljs-string\">'nomen'</span>); <span class=\"hljs-comment\">// 'Alex Matchneer'</span>\nalex.get(<span class=\"hljs-string\">'name'</span>);  <span class=\"hljs-comment\">// 'Alex Matchneer'</span>\n\nalex.set(<span class=\"hljs-string\">'nomen'</span>, <span class=\"hljs-string\">'@machty'</span>);\nalex.get(<span class=\"hljs-string\">'name'</span>);  <span class=\"hljs-comment\">// '@machty'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#oneWay",
      "fields": [
        {
          "name": "name",
          "value": "oneWay",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional\ndata flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permanently\ndiverge from the upstream property.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n  nickName: Ember.computed.oneWay(<span class=\"hljs-string\">'firstName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> teddy = User.create({\n  firstName: <span class=\"hljs-string\">'Teddy'</span>,\n  lastName:  <span class=\"hljs-string\">'Zeenny'</span>\n});\n\nteddy.get(<span class=\"hljs-string\">'nickName'</span>);              <span class=\"hljs-comment\">// 'Teddy'</span>\nteddy.set(<span class=\"hljs-string\">'nickName'</span>, <span class=\"hljs-string\">'TeddyBear'</span>); <span class=\"hljs-comment\">// 'TeddyBear'</span>\nteddy.get(<span class=\"hljs-string\">'firstName'</span>);             <span class=\"hljs-comment\">// 'Teddy'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#reads",
      "fields": [
        {
          "name": "name",
          "value": "reads",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a more semantically meaningful alias of <code>computed.oneWay</code>,\nwhose name is somewhat ambiguous as to which direction the data flows.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#readOnly",
      "fields": [
        {
          "name": "name",
          "value": "readOnly",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides\na readOnly one way binding. Very often when using <code>computed.oneWay</code> one does\nnot also want changes to propagate back up, as they will replace the value.</p>\n<p>This prevents the reverse flow, and also throws an exception when it occurs.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> User = Ember.Object.extend({\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n  nickName: Ember.computed.readOnly(<span class=\"hljs-string\">'firstName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> teddy = User.create({\n  firstName: <span class=\"hljs-string\">'Teddy'</span>,\n  lastName:  <span class=\"hljs-string\">'Zeenny'</span>\n});\n\nteddy.get(<span class=\"hljs-string\">'nickName'</span>);              <span class=\"hljs-comment\">// 'Teddy'</span>\nteddy.set(<span class=\"hljs-string\">'nickName'</span>, <span class=\"hljs-string\">'TeddyBear'</span>); <span class=\"hljs-comment\">// throws Exception</span>\n<span class=\"hljs-comment\">// throw new Ember.Error('Cannot Set: nickName on: &lt;User:ember27288&gt;' );`</span>\nteddy.get(<span class=\"hljs-string\">'firstName'</span>);             <span class=\"hljs-comment\">// 'Teddy'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#defaultTo",
      "fields": [
        {
          "name": "name",
          "value": "defaultTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that acts like a standard getter and setter,\nbut returns the value at the provided <code>defaultPath</code> if the\nproperty itself has not been set to a value</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  wishList: Ember.computed.defaultTo(<span class=\"hljs-string\">'favoriteFood'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({ favoriteFood: <span class=\"hljs-string\">'Banana'</span> });\n\nhamster.get(<span class=\"hljs-string\">'wishList'</span>);                     <span class=\"hljs-comment\">// 'Banana'</span>\nhamster.set(<span class=\"hljs-string\">'wishList'</span>, <span class=\"hljs-string\">'More Unit Tests'</span>);\nhamster.get(<span class=\"hljs-string\">'wishList'</span>);                     <span class=\"hljs-comment\">// 'More Unit Tests'</span>\nhamster.get(<span class=\"hljs-string\">'favoriteFood'</span>);                 <span class=\"hljs-comment\">// 'Banana'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#deprecatingAlias",
      "fields": [
        {
          "name": "name",
          "value": "deprecatingAlias",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new property that is an alias for another property\non an object. Calls to <code>get</code> or <code>set</code> this property behave as\nthough they were called on the original property, but also\nprint a deprecation warning.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#sum",
      "fields": [
        {
          "name": "name",
          "value": "sum",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that returns the sum of the value\nin the dependent array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#max",
      "fields": [
        {
          "name": "name",
          "value": "max",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that calculates the maximum value in the\ndependent array. This will return <code>-Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy(<span class=\"hljs-string\">'children'</span>, <span class=\"hljs-string\">'age'</span>),\n  maxChildAge: Ember.computed.max(<span class=\"hljs-string\">'childAges'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> lordByron = Person.create({ children: [] });\n\nlordByron.get(<span class=\"hljs-string\">'maxChildAge'</span>); <span class=\"hljs-comment\">// -Infinity</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObject({\n  name: <span class=\"hljs-string\">'Augusta Ada Byron'</span>, age: <span class=\"hljs-number\">7</span>\n});\nlordByron.get(<span class=\"hljs-string\">'maxChildAge'</span>); <span class=\"hljs-comment\">// 7</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObjects([{\n  name: <span class=\"hljs-string\">'Allegra Byron'</span>,\n  age: <span class=\"hljs-number\">5</span>\n}, {\n  name: <span class=\"hljs-string\">'Elizabeth Medora Leigh'</span>,\n  age: <span class=\"hljs-number\">8</span>\n}]);\nlordByron.get(<span class=\"hljs-string\">'maxChildAge'</span>); <span class=\"hljs-comment\">// 8</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#min",
      "fields": [
        {
          "name": "name",
          "value": "min",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property that calculates the minimum value in the\ndependent array. This will return <code>Infinity</code> when the dependent\narray is empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy(<span class=\"hljs-string\">'children'</span>, <span class=\"hljs-string\">'age'</span>),\n  minChildAge: Ember.computed.min(<span class=\"hljs-string\">'childAges'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> lordByron = Person.create({ children: [] });\n\nlordByron.get(<span class=\"hljs-string\">'minChildAge'</span>); <span class=\"hljs-comment\">// Infinity</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObject({\n  name: <span class=\"hljs-string\">'Augusta Ada Byron'</span>, age: <span class=\"hljs-number\">7</span>\n});\nlordByron.get(<span class=\"hljs-string\">'minChildAge'</span>); <span class=\"hljs-comment\">// 7</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObjects([{\n  name: <span class=\"hljs-string\">'Allegra Byron'</span>,\n  age: <span class=\"hljs-number\">5</span>\n}, {\n  name: <span class=\"hljs-string\">'Elizabeth Medora Leigh'</span>,\n  age: <span class=\"hljs-number\">8</span>\n}]);\nlordByron.get(<span class=\"hljs-string\">'minChildAge'</span>); <span class=\"hljs-comment\">// 5</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array mapped via the callback</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index)</span>;</span></pre></td>      </tr>    </table>  </div></div><p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  excitingChores: Ember.computed.map(<span class=\"hljs-string\">'chores'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(chore, index)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> chore.toUpperCase() + <span class=\"hljs-string\">'!'</span>;\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  chores: [<span class=\"hljs-string\">'clean'</span>, <span class=\"hljs-string\">'write more unit tests'</span>]\n});\n\nhamster.get(<span class=\"hljs-string\">'excitingChores'</span>); <span class=\"hljs-comment\">// ['CLEAN!', 'WRITE MORE UNIT TESTS!']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array mapped to the specified key.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy(<span class=\"hljs-string\">'children'</span>, <span class=\"hljs-string\">'age'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> lordByron = Person.create({ children: [] });\n\nlordByron.get(<span class=\"hljs-string\">'childAges'</span>); <span class=\"hljs-comment\">// []</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObject({ name: <span class=\"hljs-string\">'Augusta Ada Byron'</span>, age: <span class=\"hljs-number\">7</span> });\nlordByron.get(<span class=\"hljs-string\">'childAges'</span>); <span class=\"hljs-comment\">// [7]</span>\nlordByron.get(<span class=\"hljs-string\">'children'</span>).pushObjects([{\n  name: <span class=\"hljs-string\">'Allegra Byron'</span>,\n  age: <span class=\"hljs-number\">5</span>\n}, {\n  name: <span class=\"hljs-string\">'Elizabeth Medora Leigh'</span>,\n  age: <span class=\"hljs-number\">8</span>\n}]);\nlordByron.get(<span class=\"hljs-string\">'childAges'</span>); <span class=\"hljs-comment\">// [7, 5, 8]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Filters the array by the callback.</p>\n<p>The callback method you provide should have the following signature.\n<code>item</code> is the current item in the iteration.\n<code>index</code> is the integer index of the current item in the iteration.\n<code>array</code> is the dependant array itself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, array)</span>;</span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filter(<span class=\"hljs-string\">'chores'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(chore, index, array)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> !chore.done;\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  chores: [\n    { name: <span class=\"hljs-string\">'cook'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'clean'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'write more unit tests'</span>, done: <span class=\"hljs-literal\">false</span> }\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'remainingChores'</span>); <span class=\"hljs-comment\">// [{name: 'write more unit tests', done: false}]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Filters the array by the property and value</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filterBy(<span class=\"hljs-string\">'chores'</span>, <span class=\"hljs-string\">'done'</span>, <span class=\"hljs-literal\">false</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  chores: [\n    { name: <span class=\"hljs-string\">'cook'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'clean'</span>, done: <span class=\"hljs-literal\">true</span> },\n    { name: <span class=\"hljs-string\">'write more unit tests'</span>, done: <span class=\"hljs-literal\">false</span> }\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'remainingChores'</span>); <span class=\"hljs-comment\">// [{ name: 'write more unit tests', done: false }]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uniq(<span class=\"hljs-string\">'fruits'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  fruits: [\n    <span class=\"hljs-string\">'banana'</span>,\n    <span class=\"hljs-string\">'grape'</span>,\n    <span class=\"hljs-string\">'kale'</span>,\n    <span class=\"hljs-string\">'banana'</span>\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'uniqueFruits'</span>); <span class=\"hljs-comment\">// ['banana', 'grape', 'kale']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#union",
      "fields": [
        {
          "name": "name",
          "value": "union",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <a href=\"/api/#method_computed_uniq\">Ember.computed.uniq</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#intersect",
      "fields": [
        {
          "name": "name",
          "value": "intersect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> obj = Ember.Object.createWithMixins({\n  adaFriends: [<span class=\"hljs-string\">'Charles Babbage'</span>, <span class=\"hljs-string\">'John Hobhouse'</span>, <span class=\"hljs-string\">'William King'</span>, <span class=\"hljs-string\">'Mary Somerville'</span>],\n  charlesFriends: [<span class=\"hljs-string\">'William King'</span>, <span class=\"hljs-string\">'Mary Somerville'</span>, <span class=\"hljs-string\">'Ada Lovelace'</span>, <span class=\"hljs-string\">'George Peacock'</span>],\n  friendsInCommon: Ember.computed.intersect(<span class=\"hljs-string\">'adaFriends'</span>, <span class=\"hljs-string\">'charlesFriends'</span>)\n});\n\nobj.get(<span class=\"hljs-string\">'friendsInCommon'</span>); <span class=\"hljs-comment\">// ['William King', 'Mary Somerville']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#setDiff",
      "fields": [
        {
          "name": "name",
          "value": "setDiff",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Hamster = Ember.Object.extend({\n  likes: [<span class=\"hljs-string\">'banana'</span>, <span class=\"hljs-string\">'grape'</span>, <span class=\"hljs-string\">'kale'</span>],\n  wants: Ember.computed.setDiff(<span class=\"hljs-string\">'likes'</span>, <span class=\"hljs-string\">'fruits'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> hamster = Hamster.create({\n  fruits: [\n    <span class=\"hljs-string\">'grape'</span>,\n    <span class=\"hljs-string\">'kale'</span>,\n  ]\n});\n\nhamster.get(<span class=\"hljs-string\">'wants'</span>); <span class=\"hljs-comment\">// ['banana']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.computed#sort",
      "fields": [
        {
          "name": "name",
          "value": "sort",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.</p>\n<p>The callback method you provide should have the following signature:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(itemA, itemB)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>itemA</code> the first item to compare.</li>\n<li><code>itemB</code> the second item to compare.</li>\n</ul>\n<p>This function should return negative number (e.g. <code>-1</code>) when <code>itemA</code> should come before\n<code>itemB</code>. It should return positive number (e.g. <code>1</code>) when <code>itemA</code> should come after\n<code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function should return <code>0</code>.</p>\n<p>Therefore, if this function is comparing some numeric values, simple <code>itemA - itemB</code> or\n<code>itemA.get( &#39;foo&#39; ) - itemB.get( &#39;foo&#39; )</code> can be used instead of series of <code>if</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> ToDoList = Ember.Object.extend({\n  <span class=\"hljs-comment\">// using standard ascending sort</span>\n  todosSorting: [<span class=\"hljs-string\">'name'</span>],\n  sortedTodos: Ember.computed.sort(<span class=\"hljs-string\">'todos'</span>, <span class=\"hljs-string\">'todosSorting'</span>),\n\n  <span class=\"hljs-comment\">// using descending sort</span>\n  todosSortingDesc: [<span class=\"hljs-string\">'name:desc'</span>],\n  sortedTodosDesc: Ember.computed.sort(<span class=\"hljs-string\">'todos'</span>, <span class=\"hljs-string\">'todosSortingDesc'</span>),\n\n  <span class=\"hljs-comment\">// using a custom sort function</span>\n  priorityTodos: Ember.computed.sort(<span class=\"hljs-string\">'todos'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>{\n    <span class=\"hljs-keyword\">if</span> (a.priority &gt; b.priority) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a.priority &lt; b.priority) {\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  })\n});\n\n<span class=\"hljs-keyword\">var</span> todoList = ToDoList.create({todos: [\n  { name: <span class=\"hljs-string\">'Unit Test'</span>, priority: <span class=\"hljs-number\">2</span> },\n  { name: <span class=\"hljs-string\">'Documentation'</span>, priority: <span class=\"hljs-number\">3</span> },\n  { name: <span class=\"hljs-string\">'Release'</span>, priority: <span class=\"hljs-number\">1</span> }\n]});\n\ntodoList.get(<span class=\"hljs-string\">'sortedTodos'</span>);      <span class=\"hljs-comment\">// [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]</span>\ntodoList.get(<span class=\"hljs-string\">'sortedTodosDesc'</span>);  <span class=\"hljs-comment\">// [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]</span>\ntodoList.get(<span class=\"hljs-string\">'priorityTodos'</span>);    <span class=\"hljs-comment\">// [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.computed",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.FEATURES",
      "fields": [
        {
          "name": "name",
          "value": "Ember.FEATURES",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Hash of enabled Canary features. Add to this before creating your application.</p>\n<p>You can also define <code>EmberENV.FEATURES</code> if you need to enable features flagged at runtime.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.FEATURES#isEnabled",
      "fields": [
        {
          "name": "name",
          "value": "isEnabled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Test that a feature is enabled. Parsed by Ember&#39;s build tools to leave\nexperimental features out of beta/stable builds.</p>\n<p>You can define the following configuration options:</p>\n<ul>\n<li><code>EmberENV.ENABLE_ALL_FEATURES</code> - force all features to be enabled.</li>\n<li><code>EmberENV.ENABLE_OPTIONAL_FEATURES</code> - enable any features that have not been explicitly\nenabled/disabled.</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.FEATURES",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils",
      "fields": [
        {
          "name": "name",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines some convenience methods for working with Enumerables.\n<code>Ember.EnumerableUtils</code> uses <code>Ember.ArrayPolyfills</code> when necessary.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#deprecateProperty",
      "fields": [
        {
          "name": "name",
          "value": "deprecateProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used internally to allow changing properties in a backwards compatible way, and print a helpful\ndeprecation warning.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calls the map function on the passed object with a specified callback. This\nuses <code>Ember.ArrayPolyfill</code>&#39;s-map method when necessary.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calls the forEach function on the passed object with a specified callback. This\nuses <code>Ember.ArrayPolyfill</code>&#39;s-forEach method when necessary.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calls the filter function on the passed object with a specified callback. This\nuses <code>Ember.ArrayPolyfill</code>&#39;s-filter method when necessary.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#indexOf",
      "fields": [
        {
          "name": "name",
          "value": "indexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calls the indexOf function on the passed object with a specified callback. This\nuses <code>Ember.ArrayPolyfill</code>&#39;s-indexOf method when necessary.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#indexesOf",
      "fields": [
        {
          "name": "name",
          "value": "indexesOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array of indexes of the first occurrences of the passed elements\non the passed object.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n Ember.EnumerableUtils.indexesOf(array, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// [1, 4]</span>\n\n <span class=\"hljs-keyword\">var</span> fubar = <span class=\"hljs-string\">\"Fubarr\"</span>;\n Ember.EnumerableUtils.indexesOf(fubar, [<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'r'</span>]); <span class=\"hljs-comment\">// [2, 4]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an object to an array. If the array already includes the object this\nmethod has no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes an object from an array. If the array does not contain the passed\nobject this method has no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#replace",
      "fields": [
        {
          "name": "name",
          "value": "replace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces objects in an array with the passed objects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  <span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n  Ember.EnumerableUtils.replace(array, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// [1, 4, 5]</span>\n\n  <span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n  Ember.EnumerableUtils.replace(array, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// [1, 4, 5, 3]</span>\n\n  <span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n  Ember.EnumerableUtils.replace(array, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EnumerableUtils#intersection",
      "fields": [
        {
          "name": "name",
          "value": "intersection",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calculates the intersection of two arrays. This method returns a new array\nfilled with the records that the two passed arrays share with each other.\nIf there is no intersection, an empty array will be returned.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> array1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">var</span> array2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\n\nEmber.EnumerableUtils.intersection(array1, array2); <span class=\"hljs-comment\">// [1, 3, 5]</span>\n\n<span class=\"hljs-keyword\">var</span> array1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> array2 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n\nEmber.EnumerableUtils.intersection(array1, array2); <span class=\"hljs-comment\">// []</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EnumerableUtils",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Error",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Error",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A subclass of the JavaScript Error object for use in Ember.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.InjectedProperty",
      "fields": [
        {
          "name": "name",
          "value": "Ember.InjectedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Read-only property that returns the result of a container lookup.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Instrumentation",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Instrumentation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The purpose of the Ember Instrumentation module is\nto provide efficient, general-purpose instrumentation\nfor Ember.</p>\n<p>Subscribe to a listener by using <code>Ember.subscribe</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.subscribe(<span class=\"hljs-string\">\"render\"</span>, {\n  before: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name, timestamp, payload)</span> </span>{\n\n  },\n\n  after: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name, timestamp, payload)</span> </span>{\n\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>If you return a value from the <code>before</code> callback, that same\nvalue will be passed as a fourth parameter to the <code>after</code>\ncallback.</p>\n<p>Instrument a block of code by using <code>Ember.instrument</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.instrument(<span class=\"hljs-string\">\"render.handlebars\"</span>, payload, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// rendering logic</span>\n}, binding);</pre></td>      </tr>    </table>  </div></div><p>Event names passed to <code>Ember.instrument</code> are namespaced\nby periods, from more general to more specific. Subscribers\ncan listen for events by whatever level of granularity they\nare interested in.</p>\n<p>In the above example, the event is <code>render.handlebars</code>,\nand the subscriber listened for all events beginning with\n<code>render</code>. It would receive callbacks for events named\n<code>render</code>, <code>render.handlebars</code>, <code>render.container</code>, or\neven <code>render.handlebars.layout</code>.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Instrumentation#instrument",
      "fields": [
        {
          "name": "name",
          "value": "instrument",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notifies event&#39;s subscribers, calls <code>before</code> and <code>after</code> hooks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Instrumentation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Instrumentation#subscribe",
      "fields": [
        {
          "name": "name",
          "value": "subscribe",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a particular event or instrumented block of code.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Instrumentation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Instrumentation#unsubscribe",
      "fields": [
        {
          "name": "name",
          "value": "unsubscribe",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Unsubscribes from a particular event or instrumented block of code.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Instrumentation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Instrumentation#reset",
      "fields": [
        {
          "name": "name",
          "value": "reset",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Resets <code>Ember.Instrumentation</code> by flushing list of subscribers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Instrumentation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Libraries",
      "fields": [
        {
          "name": "name",
          "value": "Libraries",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper class that allows you to register your library with Ember.</p>\n<p>Singleton created at <code>Ember.libraries</code>.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Logger",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Logger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Inside Ember-Metal, simply uses the methods from <code>imports.console</code>.\nOverride this to provide more robust logging functionality.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Logger#log",
      "fields": [
        {
          "name": "name",
          "value": "log",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>;\n Ember.Logger.log(<span class=\"hljs-string\">'log value of foo:'</span>, foo);\n <span class=\"hljs-comment\">// \"log value of foo: 1\" will be printed to the console</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Logger",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Logger#warn",
      "fields": [
        {
          "name": "name",
          "value": "warn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Prints the arguments to the console with a warning icon.\nYou can pass as many arguments as you want and they will be joined together with a space.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> Ember.Logger.warn(<span class=\"hljs-string\">'Something happened!'</span>);\n <span class=\"hljs-comment\">// \"Something happened!\" will be printed to the console with a warning icon.</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Logger",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Logger#error",
      "fields": [
        {
          "name": "name",
          "value": "error",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Prints the arguments to the console with an error icon, red text and a stack trace.\nYou can pass as many arguments as you want and they will be joined together with a space.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> Ember.Logger.error(<span class=\"hljs-string\">'Danger! Danger!'</span>);\n <span class=\"hljs-comment\">// \"Danger! Danger!\" will be printed to the console in red text.</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Logger",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Logger#info",
      "fields": [
        {
          "name": "name",
          "value": "info",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>;\n Ember.Logger.info(<span class=\"hljs-string\">'log value of foo:'</span>, foo);\n <span class=\"hljs-comment\">// \"log value of foo: 1\" will be printed to the console</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Logger",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Logger#debug",
      "fields": [
        {
          "name": "name",
          "value": "debug",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Logs the arguments to the console in blue text.\nYou can pass as many arguments as you want and they will be joined together with a space.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>;\n Ember.Logger.debug(<span class=\"hljs-string\">'log value of foo:'</span>, foo);\n <span class=\"hljs-comment\">// \"log value of foo: 1\" will be printed to the console</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Logger",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Logger#assert",
      "fields": [
        {
          "name": "name",
          "value": "assert",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the value passed into <code>Ember.Logger.assert</code> is not truthy it will throw an error with a stack trace.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> Ember.Logger.assert(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// undefined</span>\n Ember.Logger.assert(<span class=\"hljs-literal\">true</span> === <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// Throws an Assertion failed error.</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Logger",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Backburner",
      "fields": [
        {
          "name": "name",
          "value": "Backburner",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet",
      "fields": [
        {
          "name": "name",
          "value": "Ember.OrderedSet",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This class is used internally by Ember and Ember Data.\nPlease do not use it at this time. We plan to clean it up\nand add many tests soon.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#add",
      "fields": [
        {
          "name": "name",
          "value": "add",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#delete",
      "fields": [
        {
          "name": "name",
          "value": "delete",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#isEmpty",
      "fields": [
        {
          "name": "name",
          "value": "isEmpty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.OrderedSet#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.OrderedSet",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A Map stores values indexed by keys. Unlike JavaScript&#39;s\ndefault Objects, the keys of a Map can be any JavaScript\nobject.</p>\n<p>Internally, a Map has two data structures:</p>\n<ol>\n<li><code>keys</code>: an OrderedSet of all of the existing keys</li>\n<li><code>values</code>: a JavaScript Object indexed by the <code>Ember.guidFor(key)</code></li>\n</ol>\n<p>When a key/value pair is added for the first time, we\nadd the key to the <code>keys</code> OrderedSet, and create or\nreplace an entry in <code>values</code>. When an entry is deleted,\nwe delete its entry in <code>keys</code> and <code>values</code>.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Map#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieve the value associated with a given key.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#delete",
      "fields": [
        {
          "name": "name",
          "value": "delete",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a value from the map for an associated key.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Check whether a key is present.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over all the keys and values. Calls the function once\nfor each key, passing in value, key, and the map being iterated over,\nin that order.</p>\n<p>The keys are guaranteed to be iterated over in insertion order.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Map#size",
      "fields": [
        {
          "name": "name",
          "value": "size",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will change as the number of objects in the map changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Map",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "Ember.MapWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieve the value associated with a given key.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#delete",
      "fields": [
        {
          "name": "name",
          "value": "delete",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a value from the map for an associated key.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Check whether a key is present.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over all the keys and values. Calls the function once\nfor each key, passing in value, key, and the map being iterated over,\nin that order.</p>\n<p>The keys are guaranteed to be iterated over in insertion order.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MapWithDefault#size",
      "fields": [
        {
          "name": "name",
          "value": "size",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will change as the number of objects in the map changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MapWithDefault",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Mixin",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Mixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.Mixin</code> class allows you to create mixins, whose properties can be\nadded to other classes. For instance,</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Editable = Ember.Mixin.create({\n  edit: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'starting to edit'</span>);\n    <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'isEditing'</span>, <span class=\"hljs-literal\">true</span>);\n  },\n  isEditing: <span class=\"hljs-literal\">false</span>\n});\n\n<span class=\"hljs-comment\">// Mix mixins into classes by passing them as the first arguments to</span>\n<span class=\"hljs-comment\">// .extend.</span>\nApp.CommentView = Ember.View.extend(App.Editable, {\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{#if view.isEditing}}...{{else}}...{{/if}}'</span>)\n});\n\ncommentView = App.CommentView.create();\ncommentView.edit(); <span class=\"hljs-comment\">// outputs 'starting to edit'</span></pre></td>      </tr>    </table>  </div></div><p>Note that Mixins are created with <code>Ember.Mixin.create</code>, not\n<code>Ember.Mixin.extend</code>.</p>\n<p>Note that mixins extend a constructor&#39;s prototype so arrays and object literals\ndefined as properties will be shared amongst objects that implement the mixin.\nIf you want to define a property in a mixin that is not shared, you can define\nit either as a computed property or have it be created on initialization of the object.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">//filters array will be shared amongst any object implementing mixin</span>\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.A()\n});\n\n<span class=\"hljs-comment\">//filters will be a separate  array for every object implementing the mixin</span>\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.computed(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{<span class=\"hljs-keyword\">return</span> Ember.A();})\n});\n\n<span class=\"hljs-comment\">//filters will be created as a separate array during the object's initialization</span>\nApp.Filterable = Ember.Mixin.create({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">\"filters\"</span>, Ember.A());\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Mixin#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Mixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Mixin#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Mixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Mixin#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Mixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Mixin#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Mixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Descriptor",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Descriptor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Objects of this type can implement an interface to respond to requests to\nget and set. The default implementation handles simple properties.</p>\n<p>You generally won&#39;t need to create or subclass this directly.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.run",
      "fields": [
        {
          "name": "name",
          "value": "Ember.run",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Runs the passed target and method inside of a RunLoop, ensuring any\ndeferred actions including bindings and views updates are flushed at the\nend.</p>\n<p>Normally you should not need to invoke this method yourself. However if\nyou are implementing raw event handlers when interfacing with other\nlibraries or plugins, you should probably wrap all of your code inside this\ncall.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// code to be executed within a RunLoop</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.run#join",
      "fields": [
        {
          "name": "name",
          "value": "join",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If no run-loop is present, it creates a new one. If a run loop is\npresent it will queue itself to run on the existing run-loops action\nqueue.</p>\n<p>Please note: This is not for normal usage, and should be used sparingly.</p>\n<p>If invoked when not within a run loop:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.join(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// creates a new run-loop</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Alternatively, if called within an existing run loop:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// creates a new run-loop</span>\n  run.join(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// joins with the existing run-loop, and queues for invocation on</span>\n    <span class=\"hljs-comment\">// the existing run-loops action queue.</span>\n  });\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#bind",
      "fields": [
        {
          "name": "name",
          "value": "bind",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify which context to call the specified function in while\nadding the execution of that function to the Ember run loop. This ability\nmakes this method a great way to asynchronously integrate third-party libraries\ninto your Ember application.</p>\n<p><code>run.bind</code> takes two main arguments, the desired context and the function to\ninvoke in that context. Any additional arguments will be supplied as arguments\nto the function that is passed in.</p>\n<p>Let&#39;s use the creation of a TinyMCE component as an example. Currently,\nTinyMCE provides a setup configuration option we can use to do some processing\nafter the TinyMCE instance is initialized but before it is actually rendered.\nWe can use that setup option to do some additional setup for our component.\nThe component itself could look something like the following:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.RichTextEditorComponent = Ember.Component.extend({\n  initializeTinyMCE: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    tinymce.init({\n      selector: <span class=\"hljs-string\">'#'</span> + <span class=\"hljs-keyword\">this</span>.$().prop(<span class=\"hljs-string\">'id'</span>),\n      setup: Ember.run.bind(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-keyword\">this</span>.setupEditor)\n    });\n  }.on(<span class=\"hljs-string\">'didInsertElement'</span>),\n\n  setupEditor: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(editor)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'editor'</span>, editor);\n\n    editor.on(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'content changed!'</span>);\n    });\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>In this example, we use Ember.run.bind to bind the setupEditor message to the\ncontext of the App.RichTextEditorComponent and to have the invocation of that\nmethod be safely handled and executed by the Ember run loop.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#begin",
      "fields": [
        {
          "name": "name",
          "value": "begin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to <code>run.end()</code>. This is\na lower-level way to use a RunLoop instead of using <code>run()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.begin();\n<span class=\"hljs-comment\">// code to be executed within a RunLoop</span>\nrun.end();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#end",
      "fields": [
        {
          "name": "name",
          "value": "end",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a RunLoop. This must be called sometime after you call\n<code>run.begin()</code> to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using <code>run()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.begin();\n<span class=\"hljs-comment\">// code to be executed within a RunLoop</span>\nrun.end();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#schedule",
      "fields": [
        {
          "name": "name",
          "value": "schedule",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.</p>\n<p>At the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe <code>run.queues</code> property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.schedule(<span class=\"hljs-string\">'sync'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// this will be executed in the first RunLoop queue, when bindings are synced</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'scheduled on sync queue'</span>);\n});\n\nrun.schedule(<span class=\"hljs-string\">'actions'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// this will be executed in the 'actions' queue, after bindings have synced.</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'scheduled on actions queue'</span>);\n});\n\n<span class=\"hljs-comment\">// Note the functions will be run in order based on the run queues order.</span>\n<span class=\"hljs-comment\">// Output would be:</span>\n<span class=\"hljs-comment\">//   scheduled on sync queue</span>\n<span class=\"hljs-comment\">//   scheduled on actions queue</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#sync",
      "fields": [
        {
          "name": "name",
          "value": "sync",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Immediately flushes any events scheduled in the &#39;sync&#39; queue. Bindings\nuse this queue so this method is a useful way to immediately force all\nbindings in the application to sync.</p>\n<p>You should call this method anytime you need any changed state to propagate\nthroughout the app immediately without repainting the UI (which happens\nin the later &#39;render&#39; queue added by the <code>ember-views</code> package).</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.sync();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#later",
      "fields": [
        {
          "name": "name",
          "value": "later",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the passed target/method and optional arguments after a specified\nperiod of time. The last parameter of this method must always be a number\nof milliseconds.</p>\n<p>You should use this method whenever you need to run some action after a\nperiod of time instead of using <code>setTimeout()</code>. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.later(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// code here will execute within a RunLoop in about 500ms with this == myContext</span>\n}, <span class=\"hljs-number\">500</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#once",
      "fields": [
        {
          "name": "name",
          "value": "once",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Schedule a function to run one time during the current RunLoop. This is equivalent\nto calling <code>scheduleOnce</code> with the &quot;actions&quot; queue.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#scheduleOnce",
      "fields": [
        {
          "name": "name",
          "value": "scheduleOnce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Schedules a function to run one time in a given queue of the current RunLoop.\nCalling this method with the same queue/target/method combination will have\nno effect (past the initial call).</p>\n<p>Note that although you can pass optional arguments these will not be\nconsidered when looking for duplicates. New arguments will replace previous\ncalls.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hi'</span>);\n}\n\nrun(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  run.scheduleOnce(<span class=\"hljs-string\">'afterRender'</span>, myContext, sayHi);\n  run.scheduleOnce(<span class=\"hljs-string\">'afterRender'</span>, myContext, sayHi);\n  <span class=\"hljs-comment\">// sayHi will only be executed once, in the afterRender queue of the RunLoop</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Also note that passing an anonymous function to <code>run.scheduleOnce</code> will\nnot prevent additional calls with an identical anonymous function from\nscheduling the items multiple times, e.g.:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scheduleIt</span><span class=\"hljs-params\">()</span> </span>{\n  run.scheduleOnce(<span class=\"hljs-string\">'actions'</span>, myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Closure'</span>);\n  });\n}\n\nscheduleIt();\nscheduleIt();\n\n<span class=\"hljs-comment\">// \"Closure\" will print twice, even though we're using `run.scheduleOnce`,</span>\n<span class=\"hljs-comment\">// because the function we pass to it is anonymous and won't match the</span>\n<span class=\"hljs-comment\">// previously scheduled operation.</span></pre></td>      </tr>    </table>  </div></div><p>Available queues, and their order, can be found at <code>run.queues</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#next",
      "fields": [
        {
          "name": "name",
          "value": "next",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Schedules an item to run from within a separate run loop, after\ncontrol has been returned to the system. This is equivalent to calling\n<code>run.later</code> with a wait time of 1ms.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">run.next(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// code to be executed in the next run loop,</span>\n  <span class=\"hljs-comment\">// which will be scheduled after the current one</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Multiple operations scheduled with <code>run.next</code> will coalesce\ninto the same later run loop, along with any other operations\nscheduled by <code>run.later</code> that expire right around the same\ntime that <code>run.next</code> operations will fire.</p>\n<p>Note that there are often alternatives to using <code>run.next</code>.\nFor instance, if you&#39;d like to schedule an operation to happen\nafter all DOM element operations have completed within the current\nrun loop, you can make use of the <code>afterRender</code> run loop queue (added\nby the <code>ember-views</code> package, along with the preceding <code>render</code> queue\nwhere all the DOM element operations happen). Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyCollectionView = Ember.CollectionView.extend({\n  didInsertElement: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    run.scheduleOnce(<span class=\"hljs-string\">'afterRender'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">'processChildElements'</span>);\n  },\n  processChildElements: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// ... do something with collectionView's child view</span>\n    <span class=\"hljs-comment\">// elements after they've finished rendering, which</span>\n    <span class=\"hljs-comment\">// can't be done within the CollectionView's</span>\n    <span class=\"hljs-comment\">// `didInsertElement` hook because that gets run</span>\n    <span class=\"hljs-comment\">// before the child elements have been added to the DOM.</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>One benefit of the above approach compared to using <code>run.next</code> is\nthat you will be able to perform DOM/CSS operations before unprocessed\nelements are rendered to the screen, which may prevent flickering or\nother artifacts caused by delaying processing until after rendering.</p>\n<p>The other major benefit to the above approach is that <code>run.next</code>\nintroduces an element of non-determinism, which can make things much\nharder to test, due to its reliance on <code>setTimeout</code>; it&#39;s much harder\nto guarantee the order of scheduled operations when they are scheduled\noutside of the current run loop, i.e. with <code>run.next</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#cancel",
      "fields": [
        {
          "name": "name",
          "value": "cancel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels a scheduled item. Must be a value returned by <code>run.later()</code>,\n<code>run.once()</code>, <code>run.next()</code>, <code>run.debounce()</code>, or\n<code>run.throttle()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> runNext = run.next(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n});\n\nrun.cancel(runNext);\n\n<span class=\"hljs-keyword\">var</span> runLater = run.later(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n}, <span class=\"hljs-number\">500</span>);\n\nrun.cancel(runLater);\n\n<span class=\"hljs-keyword\">var</span> runOnce = run.once(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n});\n\nrun.cancel(runOnce);\n\n<span class=\"hljs-keyword\">var</span> throttle = run.throttle(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n}, <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>);\n\nrun.cancel(throttle);\n\n<span class=\"hljs-keyword\">var</span> debounce = run.debounce(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will not be executed</span>\n}, <span class=\"hljs-number\">1</span>);\n\nrun.cancel(debounce);\n\n<span class=\"hljs-keyword\">var</span> debounceImmediate = run.debounce(myContext, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// will be executed since we passed in true (immediate)</span>\n}, <span class=\"hljs-number\">100</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// the 100ms delay until this method can be called again will be cancelled</span>\nrun.cancel(debounceImmediate);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#debounce",
      "fields": [
        {
          "name": "name",
          "value": "debounce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Delay calling the target method until the debounce period has elapsed\nwith no additional debounce calls. If <code>debounce</code> is called again before\nthe specified time has elapsed, the timer is reset and the entire period\nmust pass again before the target method is called.</p>\n<p>This method should be used when an event may be called multiple times\nbut the action should only be called once when the event is done firing.\nA common example is for scroll events where you only want updates to\nhappen once scrolling has ceased.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whoRan</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">' ran.'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myContext = { name: <span class=\"hljs-string\">'debounce'</span> };\n\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// less than 150ms passes</span>\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// 150ms passes</span>\n<span class=\"hljs-comment\">// whoRan is invoked with context myContext</span>\n<span class=\"hljs-comment\">// console logs 'debounce ran.' one time.</span></pre></td>      </tr>    </table>  </div></div><p>Immediate allows you to run the function immediately, but debounce\nother calls for this function until the wait time has elapsed. If\n<code>debounce</code> is called again before the specified time has elapsed,\nthe timer is reset and the entire period must pass again before\nthe method can be called again.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whoRan</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">' ran.'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myContext = { name: <span class=\"hljs-string\">'debounce'</span> };\n\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// console logs 'debounce ran.' one time immediately.</span>\n<span class=\"hljs-comment\">// 100ms passes</span>\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// 150ms passes and nothing else is logged to the console and</span>\n<span class=\"hljs-comment\">// the debouncee is no longer being watched</span>\nrun.debounce(myContext, whoRan, <span class=\"hljs-number\">150</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-comment\">// console logs 'debounce ran.' one time immediately.</span>\n<span class=\"hljs-comment\">// 150ms passes and nothing else is logged to the console and</span>\n<span class=\"hljs-comment\">// the debouncee is no longer being watched</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#throttle",
      "fields": [
        {
          "name": "name",
          "value": "throttle",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ensure that the target method is never called more frequently than\nthe specified spacing period. The target method is called immediately.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">whoRan</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">' ran.'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> myContext = { name: <span class=\"hljs-string\">'throttle'</span> };\n\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n<span class=\"hljs-comment\">// whoRan is invoked with context myContext</span>\n<span class=\"hljs-comment\">// console logs 'throttle ran.'</span>\n\n<span class=\"hljs-comment\">// 50ms passes</span>\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// 50ms passes</span>\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n\n<span class=\"hljs-comment\">// 150ms passes</span>\nrun.throttle(myContext, whoRan, <span class=\"hljs-number\">150</span>);\n<span class=\"hljs-comment\">// whoRan is invoked with context myContext</span>\n<span class=\"hljs-comment\">// console logs 'throttle ran.'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#_addQueue",
      "fields": [
        {
          "name": "name",
          "value": "_addQueue",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add a new named queue after the specified queue.</p>\n<p>The queue to add will only be added once.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.run#queues",
      "fields": [
        {
          "name": "name",
          "value": "queues",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Array of named queues. This array determines the order in which queues\nare flushed at the end of the RunLoop. You can define your own queues by\nsimply adding the queue name to this array. Normally you should not need\nto inspect or modify this property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.run",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A computed property whose dependent keys are arrays and which is updated with\n&quot;one at a time&quot; semantics.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#cacheable",
      "fields": [
        {
          "name": "name",
          "value": "cacheable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Properties are cacheable by default. Computed property will automatically\ncache the return value of your function until one of the dependent keys changes.</p>\n<p>Call <code>volatile()</code> to set it into non-cached mode. When in this mode\nthe computed property will not automatically cache the return value.</p>\n<p>However, if a property is properly observable, there is no reason to disable\ncaching.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#volatile",
      "fields": [
        {
          "name": "name",
          "value": "volatile",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> outsideService = Ember.Object.extend({\n  value: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> OutsideService.getValue();\n  }.property().volatile()\n}).create();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#readOnly",
      "fields": [
        {
          "name": "name",
          "value": "readOnly",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  guid: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'guid-guid-guid'</span>;\n  }.property().readOnly()\n});\n\n<span class=\"hljs-keyword\">var</span> person = Person.create();\n\nperson.set(<span class=\"hljs-string\">'guid'</span>, <span class=\"hljs-string\">'new-guid'</span>); <span class=\"hljs-comment\">// will throw an exception</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#property",
      "fields": [
        {
          "name": "name",
          "value": "property",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> President = Ember.Object.extend({\n  fullName: computed(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n    <span class=\"hljs-comment\">// Tell Ember that this computed property depends on firstName</span>\n    <span class=\"hljs-comment\">// and lastName</span>\n  }).property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> president = President.create({\n  firstName: <span class=\"hljs-string\">'Barack'</span>,\n  lastName: <span class=\"hljs-string\">'Obama'</span>\n});\n\npresident.get(<span class=\"hljs-string\">'fullName'</span>); <span class=\"hljs-comment\">// 'Barack Obama'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#meta",
      "fields": [
        {
          "name": "name",
          "value": "meta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>The hash that you pass to the <code>meta()</code> function will be saved on the\ncomputed property descriptor under the <code>_meta</code> key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the <code>metaForProperty()</code> function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Access the value of the function backing the computed property.\nIf this property has already been cached, return the cached result.\nOtherwise, call the function passing the property name as an argument.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(keyName)</span> </span>{\n    <span class=\"hljs-comment\">// the keyName parameter is 'fullName' in this case.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n\n<span class=\"hljs-keyword\">var</span> tom = Person.create({\n  firstName: <span class=\"hljs-string\">'Tom'</span>,\n  lastName: <span class=\"hljs-string\">'Dale'</span>\n});\n\ntom.get(<span class=\"hljs-string\">'fullName'</span>) <span class=\"hljs-comment\">// 'Tom Dale'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ReduceComputedProperty#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a computed property. If the function that backs your\ncomputed property does not accept arguments then the default action for\nsetting would be to define the property on the current object, and set\nthe value of the property to the value being set.</p>\n<p>Generally speaking if you intend for your computed property to be set\nyour backing function should accept either two or three arguments.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = Ember.Object.extend({\n  <span class=\"hljs-comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, value, oldValue)</span> </span>{\n    <span class=\"hljs-comment\">// getter</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">arguments</span>.length === <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">var</span> firstName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>);\n      <span class=\"hljs-keyword\">var</span> lastName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n      <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">' '</span> + lastName;\n\n    <span class=\"hljs-comment\">// setter</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">var</span> name = value.split(<span class=\"hljs-string\">' '</span>);\n\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'firstName'</span>, name[<span class=\"hljs-number\">0</span>]);\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'lastName'</span>, name[<span class=\"hljs-number\">1</span>]);\n\n      <span class=\"hljs-keyword\">return</span> value;\n    }\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\n<span class=\"hljs-keyword\">var</span> person = Person.create();\n\nperson.set(<span class=\"hljs-string\">'fullName'</span>, <span class=\"hljs-string\">'Peter Wagenet'</span>);\nperson.get(<span class=\"hljs-string\">'firstName'</span>); <span class=\"hljs-comment\">// 'Peter'</span>\nperson.get(<span class=\"hljs-string\">'lastName'</span>);  <span class=\"hljs-comment\">// 'Wagenet'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ReduceComputedProperty",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ArrayController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.ArrayController</code> provides a way for you to publish a collection of\nobjects so that you can easily bind to the collection from a Handlebars\n<code>#each</code> helper, an <code>Ember.CollectionView</code>, or other controllers.</p>\n<p>The advantage of using an <code>ArrayController</code> is that you only have to set up\nyour view bindings once; to change what&#39;s displayed, simply swap out the\n<code>model</code> property on the controller.</p>\n<p>For example, imagine you wanted to display a list of items fetched via an XHR\nrequest. Create an <code>Ember.ArrayController</code> and set its <code>model</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyApp.listController = Ember.ArrayController.create();\n\n$.get(<span class=\"hljs-string\">'people.json'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data)</span> </span>{\n  MyApp.listController.set(<span class=\"hljs-string\">'model'</span>, data);\n});</pre></td>      </tr>    </table>  </div></div><p>Then, create a view that binds to your new controller:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> MyApp.listController</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.firstName</span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.lastName</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Although you are binding to the controller, the behavior of this controller\nis to pass through any methods or properties to the underlying array. This\ncapability comes from <code>Ember.ArrayProxy</code>, which this class inherits from.</p>\n<p>Sometimes you want to display computed properties within the body of an\n<code>#each</code> helper that depend on the underlying items in <code>model</code>, but are not\npresent on those items.   To do this, set <code>itemController</code> to the name of a\ncontroller (probably an <code>ObjectController</code>) that will wrap each individual item.</p>\n<p>For example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> post <span class=\"hljs-keyword\">in</span> controller</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">post.title</span>}}</span><span class=\"xml\"> (</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">post.titleLength</span>}}</span><span class=\"xml\"> characters)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsController = Ember.ArrayController.extend({\n  itemController: <span class=\"hljs-string\">'post'</span>\n});\n\nApp.PostController = Ember.ObjectController.extend({\n  <span class=\"hljs-comment\">// the `title` property will be proxied to the underlying post.</span>\n  titleLength: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'title'</span>).length;\n  }.property(<span class=\"hljs-string\">'title'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>In some cases it is helpful to return a different <code>itemController</code> depending\non the particular item.  Subclasses can do this by overriding\n<code>lookupItemController</code>.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">( object )</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (object.get(<span class=\"hljs-string\">'isSpecial'</span>)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"special\"</span>; <span class=\"hljs-comment\">// use App.SpecialController</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"regular\"</span>; <span class=\"hljs-comment\">// use App.RegularController</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The itemController instances will have a <code>parentController</code> property set to\nthe <code>ArrayController</code> instance.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#objectAt",
      "fields": [
        {
          "name": "name",
          "value": "objectAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectAt(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// 'a'</span>\narr.objectAt(<span class=\"hljs-number\">3</span>);   <span class=\"hljs-comment\">// 'd'</span>\narr.objectAt(-<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">4</span>);   <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">5</span>);   <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#objectsAt",
      "fields": [
        {
          "name": "name",
          "value": "objectsAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectsAt([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);  <span class=\"hljs-comment\">// ['a', 'b', 'c']</span>\narr.objectsAt([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// ['c', 'd', undefined]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#slice",
      "fields": [
        {
          "name": "name",
          "value": "slice",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'red'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'blue'</span>];\n\narr.slice(<span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// ['red', 'green', 'blue']</span>\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">// ['red', 'green']</span>\narr.slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// ['green', 'blue']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#indexOf",
      "fields": [
        {
          "name": "name",
          "value": "indexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&#39;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.indexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  0</span>\narr.indexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// -1</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#lastIndexOf",
      "fields": [
        {
          "name": "name",
          "value": "lastIndexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&#39;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  0</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//  1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">//  4</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#addArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "addArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#removeArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#arrayContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#arrayContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#replace",
      "fields": [
        {
          "name": "name",
          "value": "replace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call <code>this.enumerableContentDidChange()</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolor.length();   <span class=\"hljs-comment\">//  3</span>\ncolors.clear();   <span class=\"hljs-comment\">//  []</span>\ncolors.length();  <span class=\"hljs-comment\">//  0</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#insertAt",
      "fields": [
        {
          "name": "name",
          "value": "insertAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.insertAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"yellow\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"yellow\", \"blue\"]</span>\ncolors.insertAt(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"orange\"</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#removeAt",
      "fields": [
        {
          "name": "name",
          "value": "removeAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>];\ncolors.removeAt(<span class=\"hljs-number\">0</span>);     <span class=\"hljs-comment\">// [\"green\", \"blue\", \"yellow\", \"orange\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#pushObject",
      "fields": [
        {
          "name": "name",
          "value": "pushObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>];\ncolors.pushObject(<span class=\"hljs-string\">\"black\"</span>);     <span class=\"hljs-comment\">// [\"red\", \"green\", \"black\"]</span>\ncolors.pushObject([<span class=\"hljs-string\">\"yellow\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"green\", [\"yellow\"]]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#pushObjects",
      "fields": [
        {
          "name": "name",
          "value": "pushObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.pushObjects([<span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"yellow\", \"orange\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#popObject",
      "fields": [
        {
          "name": "name",
          "value": "popObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.popObject();   <span class=\"hljs-comment\">// \"blue\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);  <span class=\"hljs-comment\">// [\"red\", \"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#shiftObject",
      "fields": [
        {
          "name": "name",
          "value": "shiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.shiftObject();  <span class=\"hljs-comment\">// \"red\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);   <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#unshiftObject",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObject(<span class=\"hljs-string\">\"yellow\"</span>);    <span class=\"hljs-comment\">// [\"yellow\", \"red\"]</span>\ncolors.unshiftObject([<span class=\"hljs-string\">\"black\"</span>]);   <span class=\"hljs-comment\">// [[\"black\"], \"yellow\", \"red\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#unshiftObjects",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);   <span class=\"hljs-comment\">// [\"black\", \"white\", \"red\"]</span>\ncolors.unshiftObjects(<span class=\"hljs-string\">\"yellow\"</span>); <span class=\"hljs-comment\">// Type Error: 'undefined' is not a function</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#reverseObjects",
      "fields": [
        {
          "name": "name",
          "value": "reverseObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#setObjects",
      "fields": [
        {
          "name": "name",
          "value": "setObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replace all the receiver&#39;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.setObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);  <span class=\"hljs-comment\">// [\"black\", \"white\"]</span>\ncolors.setObjects([]);                  <span class=\"hljs-comment\">// []</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#objectAtContent",
      "fields": [
        {
          "name": "name",
          "value": "objectAtContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#replaceContent",
      "fields": [
        {
          "name": "name",
          "value": "replaceContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_contentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "_contentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#contentArrayWillChange",
      "fields": [
        {
          "name": "name",
          "value": "contentArrayWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement content array <code>willChange</code> observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#contentArrayDidChange",
      "fields": [
        {
          "name": "name",
          "value": "contentArrayDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement content array <code>didChange</code> observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_contentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked when the content property changes. Notifies observers that the\nentire array content has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_updateCacheParams",
      "fields": [
        {
          "name": "name",
          "value": "_updateCacheParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_qpChanged",
      "fields": [
        {
          "name": "name",
          "value": "_qpChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_calculateCacheKey",
      "fields": [
        {
          "name": "name",
          "value": "_calculateCacheKey",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#transitionToRoute",
      "fields": [
        {
          "name": "name",
          "value": "transitionToRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'/'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/posts?sort=title'</span>);</pre></td>      </tr>    </table>  </div></div><p>An options hash with a <code>queryParams</code> property may be provided as\nthe final argument to add query parameters to the destination URL.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>, {\n  queryParams: {showComments: <span class=\"hljs-string\">'true'</span>}\n});\n\n<span class=\"hljs-comment\">// if you just want to transition the query parameters without changing the route</span>\naController.transitionToRoute({queryParams: {sort: <span class=\"hljs-string\">'date'</span>}});</pre></td>      </tr>    </table>  </div></div><p>See also <a href=\"/api/classes/Ember.ControllerMixin.html#method_replaceRoute\">replaceRoute</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#transitionTo",
      "fields": [
        {
          "name": "name",
          "value": "transitionTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#replaceRoute",
      "fields": [
        {
          "name": "name",
          "value": "replaceRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to <code>transitionToRoute</code> in all other respects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'/'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#replaceWith",
      "fields": [
        {
          "name": "name",
          "value": "replaceWith",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#controllerFor",
      "fields": [
        {
          "name": "name",
          "value": "controllerFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#lookupItemController",
      "fields": [
        {
          "name": "name",
          "value": "lookupItemController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the name of the controller to wrap items, or <code>null</code> if items should\nbe returned directly.  The default implementation simply returns the\n<code>itemController</code> property, but subclasses can override this method to return\ndifferent controllers for different objects.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">( object )</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (object.get(<span class=\"hljs-string\">'isSpecial'</span>)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"special\"</span>; <span class=\"hljs-comment\">// use App.SpecialController</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"regular\"</span>; <span class=\"hljs-comment\">// use App.RegularController</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#length",
      "fields": [
        {
          "name": "name",
          "value": "length",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#hasArrayObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasArrayObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#@each",
      "fields": [
        {
          "name": "name",
          "value": "@each",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#content",
      "fields": [
        {
          "name": "name",
          "value": "content",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The content array. Must be an object that implements <code>Ember.Array</code> and/or\n<code>Ember.MutableArray.</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#arrangedContent",
      "fields": [
        {
          "name": "name",
          "value": "arrangedContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Overrides the default <code>arrangedContent</code> from <code>ArrayProxy</code> in order to sort by <code>sortFunction</code>.\nAlso sets up observers for each <code>sortProperty</code> on each item in the content Array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#sortProperties",
      "fields": [
        {
          "name": "name",
          "value": "sortProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifies which properties dictate the <code>arrangedContent</code>&#39;s sort order.</p>\n<p>When specifying multiple properties the sorting will use properties\nfrom the <code>sortProperties</code> array prioritized from first to last.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#sortAscending",
      "fields": [
        {
          "name": "name",
          "value": "sortAscending",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifies the <code>arrangedContent</code>&#39;s sort direction.\nSorts the content in ascending order by default. Set to <code>false</code> to\nuse descending order.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#sortFunction",
      "fields": [
        {
          "name": "name",
          "value": "sortFunction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.,</p>\n<ul>\n<li>return 0 if the two parameters are equal,</li>\n<li>return a negative value if the first parameter is smaller than the second or</li>\n<li>return a positive value otherwise:</li>\n</ul>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(x, y)</span> </span>{ <span class=\"hljs-comment\">// These are assumed to be integers</span>\n  <span class=\"hljs-keyword\">if</span> (x === y)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> x &lt; y ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#target",
      "fields": [
        {
          "name": "name",
          "value": "target",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&#39;s controller&#39;s <code>target</code>.</p>\n<p>By default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an <code>itemController</code>. In most\ncases the <code>target</code> property will automatically be set to the logical\nconsumer of actions for the controller.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#model",
      "fields": [
        {
          "name": "name",
          "value": "model",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The controller&#39;s current model. When retrieving or modifying a controller&#39;s\nmodel, this property should be used instead of the <code>content</code> property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#queryParams",
      "fields": [
        {
          "name": "name",
          "value": "queryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines which query parameters the controller accepts.\nIf you give the names [&#39;category&#39;,&#39;page&#39;] it will bind\nthe values of these query parameters to the variables\n<code>this.category</code> and <code>this.page</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_qpDelegate",
      "fields": [
        {
          "name": "name",
          "value": "_qpDelegate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_normalizedQueryParams",
      "fields": [
        {
          "name": "name",
          "value": "_normalizedQueryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_cacheMeta",
      "fields": [
        {
          "name": "name",
          "value": "_cacheMeta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#needs",
      "fields": [
        {
          "name": "name",
          "value": "needs",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>The application&#39;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span></pre></td>      </tr>    </table>  </div></div><p>Given that you have a nested controller (nested resource):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsNewController = Ember.ObjectController.extend({\n});</pre></td>      </tr>    </table>  </div></div><p>When you define a controller that requires access to a nested one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.IndexController = Ember.ObjectController.extend({\n  needs: [<span class=\"hljs-string\">'commentsNew'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>You will be able to get access to it:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.commentsNew'</span>); <span class=\"hljs-comment\">// instance of App.CommentsNewController</span></pre></td>      </tr>    </table>  </div></div><p>This is only available for singleton controllers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#controllers",
      "fields": [
        {
          "name": "name",
          "value": "controllers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>],\n  postTitle: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> currentPost = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span>\n    <span class=\"hljs-keyword\">return</span> currentPost.get(<span class=\"hljs-string\">'title'</span>);\n  }.property(<span class=\"hljs-string\">'controllers.post.title'</span>)\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#itemController",
      "fields": [
        {
          "name": "name",
          "value": "itemController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A string containing the controller name used to wrap items.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyArrayController = Ember.ArrayController.extend({\n  itemController: <span class=\"hljs-string\">'myItem'</span> <span class=\"hljs-comment\">// use App.MyItemController</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayController#_isVirtual",
      "fields": [
        {
          "name": "name",
          "value": "_isVirtual",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Flag to mark as being &quot;virtual&quot;. Used to keep this instance\nfrom participating in the parentController hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Controller",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_updateCacheParams",
      "fields": [
        {
          "name": "name",
          "value": "_updateCacheParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_qpChanged",
      "fields": [
        {
          "name": "name",
          "value": "_qpChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_calculateCacheKey",
      "fields": [
        {
          "name": "name",
          "value": "_calculateCacheKey",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#transitionToRoute",
      "fields": [
        {
          "name": "name",
          "value": "transitionToRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'/'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/posts?sort=title'</span>);</pre></td>      </tr>    </table>  </div></div><p>An options hash with a <code>queryParams</code> property may be provided as\nthe final argument to add query parameters to the destination URL.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>, {\n  queryParams: {showComments: <span class=\"hljs-string\">'true'</span>}\n});\n\n<span class=\"hljs-comment\">// if you just want to transition the query parameters without changing the route</span>\naController.transitionToRoute({queryParams: {sort: <span class=\"hljs-string\">'date'</span>}});</pre></td>      </tr>    </table>  </div></div><p>See also <a href=\"/api/classes/Ember.ControllerMixin.html#method_replaceRoute\">replaceRoute</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#transitionTo",
      "fields": [
        {
          "name": "name",
          "value": "transitionTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#replaceRoute",
      "fields": [
        {
          "name": "name",
          "value": "replaceRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to <code>transitionToRoute</code> in all other respects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'/'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#replaceWith",
      "fields": [
        {
          "name": "name",
          "value": "replaceWith",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#controllerFor",
      "fields": [
        {
          "name": "name",
          "value": "controllerFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#target",
      "fields": [
        {
          "name": "name",
          "value": "target",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&#39;s controller&#39;s <code>target</code>.</p>\n<p>By default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an <code>itemController</code>. In most\ncases the <code>target</code> property will automatically be set to the logical\nconsumer of actions for the controller.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#model",
      "fields": [
        {
          "name": "name",
          "value": "model",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The controller&#39;s current model. When retrieving or modifying a controller&#39;s\nmodel, this property should be used instead of the <code>content</code> property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#queryParams",
      "fields": [
        {
          "name": "name",
          "value": "queryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines which query parameters the controller accepts.\nIf you give the names [&#39;category&#39;,&#39;page&#39;] it will bind\nthe values of these query parameters to the variables\n<code>this.category</code> and <code>this.page</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_qpDelegate",
      "fields": [
        {
          "name": "name",
          "value": "_qpDelegate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_normalizedQueryParams",
      "fields": [
        {
          "name": "name",
          "value": "_normalizedQueryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#_cacheMeta",
      "fields": [
        {
          "name": "name",
          "value": "_cacheMeta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#needs",
      "fields": [
        {
          "name": "name",
          "value": "needs",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>The application&#39;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span></pre></td>      </tr>    </table>  </div></div><p>Given that you have a nested controller (nested resource):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsNewController = Ember.ObjectController.extend({\n});</pre></td>      </tr>    </table>  </div></div><p>When you define a controller that requires access to a nested one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.IndexController = Ember.ObjectController.extend({\n  needs: [<span class=\"hljs-string\">'commentsNew'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>You will be able to get access to it:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.commentsNew'</span>); <span class=\"hljs-comment\">// instance of App.CommentsNewController</span></pre></td>      </tr>    </table>  </div></div><p>This is only available for singleton controllers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Controller#controllers",
      "fields": [
        {
          "name": "name",
          "value": "controllers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>],\n  postTitle: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> currentPost = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span>\n    <span class=\"hljs-keyword\">return</span> currentPost.get(<span class=\"hljs-string\">'title'</span>);\n  }.property(<span class=\"hljs-string\">'controllers.post.title'</span>)\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Controller",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.inject",
      "fields": [
        {
          "name": "name",
          "value": "Ember.inject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Namespace for injection helper methods.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.inject#controller",
      "fields": [
        {
          "name": "name",
          "value": "controller",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a property that lazily looks up another controller in the container.\nCan only be used when defining another controller.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostController = Ember.Controller.extend({\n  posts: Ember.inject.controller()\n});</pre></td>      </tr>    </table>  </div></div><p>This example will create a <code>posts</code> property on the <code>post</code> controller that\nlooks up the <code>posts</code> controller in the container, making it easy to\nreference other controllers. This is functionally equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostController = Ember.Controller.extend({\n  needs: <span class=\"hljs-string\">'posts'</span>,\n  posts: Ember.computed.alias(<span class=\"hljs-string\">'controllers.posts'</span>)\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.inject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.inject#service",
      "fields": [
        {
          "name": "name",
          "value": "service",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a property that lazily looks up a service in the container. There\nare no restrictions as to what objects a service can be injected into.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  authManager: Ember.inject.service(<span class=\"hljs-string\">'auth'</span>),\n\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'authManager'</span>).findCurrentUser();\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>This example will create an <code>authManager</code> property on the application route\nthat looks up the <code>auth</code> service in the container, making it easily\naccessible in the <code>model</code> hook.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.inject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ObjectController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.ObjectController</code> is part of Ember&#39;s Controller layer. It is intended\nto wrap a single object, proxying unhandled attempts to <code>get</code> and <code>set</code> to the underlying\nmodel object, and to forward unhandled action attempts to its <code>target</code>.</p>\n<p><code>Ember.ObjectController</code> derives this functionality from its superclass\n<code>Ember.ObjectProxy</code> and the <code>Ember.ControllerMixin</code> mixin.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#_updateCacheParams",
      "fields": [
        {
          "name": "name",
          "value": "_updateCacheParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#_qpChanged",
      "fields": [
        {
          "name": "name",
          "value": "_qpChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#_calculateCacheKey",
      "fields": [
        {
          "name": "name",
          "value": "_calculateCacheKey",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#transitionToRoute",
      "fields": [
        {
          "name": "name",
          "value": "transitionToRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'/'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/posts?sort=title'</span>);</pre></td>      </tr>    </table>  </div></div><p>An options hash with a <code>queryParams</code> property may be provided as\nthe final argument to add query parameters to the destination URL.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>, {\n  queryParams: {showComments: <span class=\"hljs-string\">'true'</span>}\n});\n\n<span class=\"hljs-comment\">// if you just want to transition the query parameters without changing the route</span>\naController.transitionToRoute({queryParams: {sort: <span class=\"hljs-string\">'date'</span>}});</pre></td>      </tr>    </table>  </div></div><p>See also <a href=\"/api/classes/Ember.ControllerMixin.html#method_replaceRoute\">replaceRoute</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#transitionTo",
      "fields": [
        {
          "name": "name",
          "value": "transitionTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#replaceRoute",
      "fields": [
        {
          "name": "name",
          "value": "replaceRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to <code>transitionToRoute</code> in all other respects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'/'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#replaceWith",
      "fields": [
        {
          "name": "name",
          "value": "replaceWith",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#controllerFor",
      "fields": [
        {
          "name": "name",
          "value": "controllerFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#target",
      "fields": [
        {
          "name": "name",
          "value": "target",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&#39;s controller&#39;s <code>target</code>.</p>\n<p>By default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an <code>itemController</code>. In most\ncases the <code>target</code> property will automatically be set to the logical\nconsumer of actions for the controller.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#model",
      "fields": [
        {
          "name": "name",
          "value": "model",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The controller&#39;s current model. When retrieving or modifying a controller&#39;s\nmodel, this property should be used instead of the <code>content</code> property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#queryParams",
      "fields": [
        {
          "name": "name",
          "value": "queryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines which query parameters the controller accepts.\nIf you give the names [&#39;category&#39;,&#39;page&#39;] it will bind\nthe values of these query parameters to the variables\n<code>this.category</code> and <code>this.page</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#_qpDelegate",
      "fields": [
        {
          "name": "name",
          "value": "_qpDelegate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#_normalizedQueryParams",
      "fields": [
        {
          "name": "name",
          "value": "_normalizedQueryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#_cacheMeta",
      "fields": [
        {
          "name": "name",
          "value": "_cacheMeta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#needs",
      "fields": [
        {
          "name": "name",
          "value": "needs",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>The application&#39;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span></pre></td>      </tr>    </table>  </div></div><p>Given that you have a nested controller (nested resource):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsNewController = Ember.ObjectController.extend({\n});</pre></td>      </tr>    </table>  </div></div><p>When you define a controller that requires access to a nested one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.IndexController = Ember.ObjectController.extend({\n  needs: [<span class=\"hljs-string\">'commentsNew'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>You will be able to get access to it:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.commentsNew'</span>); <span class=\"hljs-comment\">// instance of App.CommentsNewController</span></pre></td>      </tr>    </table>  </div></div><p>This is only available for singleton controllers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectController#controllers",
      "fields": [
        {
          "name": "name",
          "value": "controllers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>],\n  postTitle: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> currentPost = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span>\n    <span class=\"hljs-keyword\">return</span> currentPost.get(<span class=\"hljs-string\">'title'</span>);\n  }.property(<span class=\"hljs-string\">'controllers.post.title'</span>)\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ObjectController",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Function",
      "fields": [
        {
          "name": "name",
          "value": "Function",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Function#property",
      "fields": [
        {
          "name": "name",
          "value": "property",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>property</code> extension of Javascript&#39;s Function prototype is available\nwhen <code>Ember.EXTEND_PROTOTYPES</code> or <code>Ember.EXTEND_PROTOTYPES.Function</code> is\n<code>true</code>, which is the default.</p>\n<p>Computed properties allow you to treat a function like a property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyApp.President = Ember.Object.extend({\n  firstName: <span class=\"hljs-string\">''</span>,\n  lastName:  <span class=\"hljs-string\">''</span>,\n\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n  }.property() <span class=\"hljs-comment\">// Call this flag to mark the function as a property</span>\n});\n\n<span class=\"hljs-keyword\">var</span> president = MyApp.President.create({\n  firstName: <span class=\"hljs-string\">'Barack'</span>,\n  lastName: <span class=\"hljs-string\">'Obama'</span>\n});\n\npresident.get(<span class=\"hljs-string\">'fullName'</span>); <span class=\"hljs-comment\">// 'Barack Obama'</span></pre></td>      </tr>    </table>  </div></div><p>Treating a function like a property is useful because they can work with\nbindings, just like any other property.</p>\n<p>Many computed properties have dependencies on other properties. For\nexample, in the above example, the <code>fullName</code> property depends on\n<code>firstName</code> and <code>lastName</code> to determine its value. You can tell Ember\nabout these dependencies like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyApp.President = Ember.Object.extend({\n  firstName: <span class=\"hljs-string\">''</span>,\n  lastName:  <span class=\"hljs-string\">''</span>,\n\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n\n    <span class=\"hljs-comment\">// Tell Ember.js that this computed property depends on firstName</span>\n    <span class=\"hljs-comment\">// and lastName</span>\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Make sure you list these dependencies so Ember knows when to update\nbindings that connect to a computed property. Changing a dependency\nwill not immediately trigger an update of the computed property, but\nwill instead clear the cache so that it is updated when the next <code>get</code>\nis called on the property.</p>\n<p>See <a href=\"/api/classes/Ember.ComputedProperty.html\">Ember.ComputedProperty</a>, <a href=\"/api/#method_computed\">Ember.computed</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Function",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Function#observes",
      "fields": [
        {
          "name": "name",
          "value": "observes",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>observes</code> extension of Javascript&#39;s Function prototype is available\nwhen <code>Ember.EXTEND_PROTOTYPES</code> or <code>Ember.EXTEND_PROTOTYPES.Function</code> is\ntrue, which is the default.</p>\n<p>You can observe property changes simply by adding the <code>observes</code>\ncall to the end of your method declarations in classes that you write.\nFor example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  valueObserver: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes whenever the \"value\" property changes</span>\n  }.observes(<span class=\"hljs-string\">'value'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>In the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use <code>observesImmediately</code>.</p>\n<p>See <code>Ember.observer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Function",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Function#observesImmediately",
      "fields": [
        {
          "name": "name",
          "value": "observesImmediately",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>observesImmediately</code> extension of Javascript&#39;s Function prototype is\navailable when <code>Ember.EXTEND_PROTOTYPES</code> or\n<code>Ember.EXTEND_PROTOTYPES.Function</code> is true, which is the default.</p>\n<p>You can observe property changes simply by adding the <code>observesImmediately</code>\ncall to the end of your method declarations in classes that you write.\nFor example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  valueObserver: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes immediately after the \"value\" property changes</span>\n  }.observesImmediately(<span class=\"hljs-string\">'value'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>In the future, <code>observes</code> may become asynchronous. In this event,\n<code>observesImmediately</code> will maintain the synchronous behavior.</p>\n<p>See <code>Ember.immediateObserver</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Function",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Function#observesBefore",
      "fields": [
        {
          "name": "name",
          "value": "observesBefore",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>observesBefore</code> extension of Javascript&#39;s Function prototype is\navailable when <code>Ember.EXTEND_PROTOTYPES</code> or\n<code>Ember.EXTEND_PROTOTYPES.Function</code> is true, which is the default.</p>\n<p>You can get notified when a property change is about to happen by\nby adding the <code>observesBefore</code> call to the end of your method\ndeclarations in classes that you write. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  valueObserver: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes whenever the \"value\" property is about to change</span>\n  }.observesBefore(<span class=\"hljs-string\">'value'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>See <code>Ember.beforeObserver</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Function",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Function#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>on</code> extension of Javascript&#39;s Function prototype is available\nwhen <code>Ember.EXTEND_PROTOTYPES</code> or <code>Ember.EXTEND_PROTOTYPES.Function</code> is\ntrue, which is the default.</p>\n<p>You can listen for events simply by adding the <code>on</code> call to the end of\nyour method declarations in classes or mixins that you write. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Mixin.create({\n  doSomethingWithElement: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes whenever the \"didInsertElement\" event fires</span>\n  }.on(<span class=\"hljs-string\">'didInsertElement'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>See <code>Ember.on</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Function",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String",
      "fields": [
        {
          "name": "name",
          "value": "String",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "String#fmt",
      "fields": [
        {
          "name": "name",
          "value": "fmt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_fmt\">Ember.String.fmt</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#w",
      "fields": [
        {
          "name": "name",
          "value": "w",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_w\">Ember.String.w</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#loc",
      "fields": [
        {
          "name": "name",
          "value": "loc",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#camelize",
      "fields": [
        {
          "name": "name",
          "value": "camelize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_camelize\">Ember.String.camelize</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#decamelize",
      "fields": [
        {
          "name": "name",
          "value": "decamelize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_decamelize\">Ember.String.decamelize</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#dasherize",
      "fields": [
        {
          "name": "name",
          "value": "dasherize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_dasherize\">Ember.String.dasherize</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#underscore",
      "fields": [
        {
          "name": "name",
          "value": "underscore",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_underscore\">Ember.String.underscore</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#classify",
      "fields": [
        {
          "name": "name",
          "value": "classify",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_classify\">Ember.String.classify</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#capitalize",
      "fields": [
        {
          "name": "name",
          "value": "capitalize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.String.html#method_capitalize\">Ember.String.capitalize</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "String#htmlSafe",
      "fields": [
        {
          "name": "name",
          "value": "htmlSafe",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Mark a string as being safe for unescaped output with Handlebars.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'&lt;div&gt;someString&lt;/div&gt;'</span>.htmlSafe()</pre></td>      </tr>    </table>  </div></div><p>See <a href=\"/api/classes/Ember.String.html#method_htmlSafe\">Ember.String.htmlSafe</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ProxyMixin",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ProxyMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.ProxyMixin</code> forwards all properties not defined by the proxy itself\nto a proxied <code>content</code> object.  See Ember.ObjectProxy for more details.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ProxyMixin#content",
      "fields": [
        {
          "name": "name",
          "value": "content",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The object whose properties will be forwarded.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ActionHandler",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ActionHandler",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.ActionHandler</code> mixin implements support for moving an <code>actions</code>\nproperty to an <code>_actions</code> property at extend time, and adding <code>_actions</code>\nto the object&#39;s mergedProperties list.</p>\n<p><code>Ember.ActionHandler</code> is available on some familiar classes including\n<code>Ember.Route</code>, <code>Ember.View</code>, <code>Ember.Component</code>, and controllers such as\n<code>Ember.Controller</code> and <code>Ember.ObjectController</code>.\n(Internally the mixin is used by <code>Ember.CoreView</code>, <code>Ember.ControllerMixin</code>,\nand <code>Ember.Route</code> and available to the above classes through\ninheritance.)</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ActionHandler#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ActionHandler",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ActionHandler#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ActionHandler",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ActionHandler#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ActionHandler",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Array",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.</p>\n<p>For example, ArrayProxy and ArrayController are both concrete classes that can\nbe instantiated to implement array-like behavior. Both of these classes use\nthe Array Mixin by way of the MutableArray mixin, which allows observable\nchanges to be made to the underlying array.</p>\n<p>Unlike <code>Ember.Enumerable,</code> this mixin defines methods specifically for\ncollections that provide index-ordered access to their contents. When you\nare designing code that needs to accept any kind of Array-like object, you\nshould use these methods instead of Array primitives because these will\nproperly notify observers of changes to the array.</p>\n<p>Although these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and &quot;virtual&quot; arrays such\nas controllers and collections.</p>\n<p>You can use the methods defined in this module to access and modify array\ncontents in a KVO-friendly way. You can also be notified whenever the\nmembership of an array changes by using <code>.observes(&#39;myArray.[]&#39;)</code>.</p>\n<p>To support <code>Ember.Array</code> in your own class, you must override two\nprimitives to use it: <code>replace()</code> and <code>objectAt()</code>.</p>\n<p>Note that the Ember.Array mixin also incorporates the <code>Ember.Enumerable</code>\nmixin. All <code>Ember.Array</code>-like objects are also enumerable.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Array#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#objectAt",
      "fields": [
        {
          "name": "name",
          "value": "objectAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectAt(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// 'a'</span>\narr.objectAt(<span class=\"hljs-number\">3</span>);   <span class=\"hljs-comment\">// 'd'</span>\narr.objectAt(-<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">4</span>);   <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">5</span>);   <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#objectsAt",
      "fields": [
        {
          "name": "name",
          "value": "objectsAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectsAt([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);  <span class=\"hljs-comment\">// ['a', 'b', 'c']</span>\narr.objectsAt([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// ['c', 'd', undefined]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#slice",
      "fields": [
        {
          "name": "name",
          "value": "slice",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'red'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'blue'</span>];\n\narr.slice(<span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// ['red', 'green', 'blue']</span>\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">// ['red', 'green']</span>\narr.slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// ['green', 'blue']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#indexOf",
      "fields": [
        {
          "name": "name",
          "value": "indexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&#39;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.indexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  0</span>\narr.indexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// -1</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#lastIndexOf",
      "fields": [
        {
          "name": "name",
          "value": "lastIndexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&#39;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  0</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//  1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">//  4</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#addArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "addArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#removeArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#arrayContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#arrayContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.</p>\n<p>This property overrides the default property defined in <code>Ember.Enumerable</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#length",
      "fields": [
        {
          "name": "name",
          "value": "length",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#hasArrayObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasArrayObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Array#@each",
      "fields": [
        {
          "name": "name",
          "value": "@each",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Array",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Comparable",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Comparable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implements some standard methods for comparing objects. Add this mixin to\nany class you create that can compare its instances.</p>\n<p>You should implement the <code>compare()</code> method.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Comparable#compare",
      "fields": [
        {
          "name": "name",
          "value": "compare",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to return the result of the comparison of the two parameters. The\ncompare method should return:</p>\n<ul>\n<li><code>-1</code> if <code>a &lt; b</code></li>\n<li><code>0</code> if <code>a == b</code></li>\n<li><code>1</code> if <code>a &gt; b</code></li>\n</ul>\n<p>Default implementation raises an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Comparable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ControllerMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.ControllerMixin</code> provides a standard interface for all classes that\ncompose Ember&#39;s controller layer: <code>Ember.Controller</code>,\n<code>Ember.ArrayController</code>, and <code>Ember.ObjectController</code>.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#_updateCacheParams",
      "fields": [
        {
          "name": "name",
          "value": "_updateCacheParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#_qpChanged",
      "fields": [
        {
          "name": "name",
          "value": "_qpChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#_calculateCacheKey",
      "fields": [
        {
          "name": "name",
          "value": "_calculateCacheKey",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#transitionToRoute",
      "fields": [
        {
          "name": "name",
          "value": "transitionToRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.transitionToRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'/'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);\naController.transitionToRoute(<span class=\"hljs-string\">'/blog/posts?sort=title'</span>);</pre></td>      </tr>    </table>  </div></div><p>An options hash with a <code>queryParams</code> property may be provided as\nthe final argument to add query parameters to the destination URL.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.transitionToRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>, {\n  queryParams: {showComments: <span class=\"hljs-string\">'true'</span>}\n});\n\n<span class=\"hljs-comment\">// if you just want to transition the query parameters without changing the route</span>\naController.transitionToRoute({queryParams: {sort: <span class=\"hljs-string\">'date'</span>}});</pre></td>      </tr>    </table>  </div></div><p>See also <a href=\"/api/classes/Ember.ControllerMixin.html#method_replaceRoute\">replaceRoute</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#transitionTo",
      "fields": [
        {
          "name": "name",
          "value": "transitionTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#replaceRoute",
      "fields": [
        {
          "name": "name",
          "value": "replaceRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to <code>transitionToRoute</code> in all other respects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPosts'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, {path:<span class=\"hljs-string\">':blogPostId'</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, {path: <span class=\"hljs-string\">':blogCommentId'</span>});\n  });\n});\n\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\naController.replaceRoute(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aController.replaceRoute(<span class=\"hljs-string\">'/'</span>);\naController.replaceRoute(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#replaceWith",
      "fields": [
        {
          "name": "name",
          "value": "replaceWith",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#controllerFor",
      "fields": [
        {
          "name": "name",
          "value": "controllerFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#target",
      "fields": [
        {
          "name": "name",
          "value": "target",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The object to which actions from the view should be sent.</p>\n<p>For example, when a Handlebars template uses the <code>{{action}}</code> helper,\nit will attempt to send the action to the view&#39;s controller&#39;s <code>target</code>.</p>\n<p>By default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an <code>itemController</code>. In most\ncases the <code>target</code> property will automatically be set to the logical\nconsumer of actions for the controller.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#model",
      "fields": [
        {
          "name": "name",
          "value": "model",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The controller&#39;s current model. When retrieving or modifying a controller&#39;s\nmodel, this property should be used instead of the <code>content</code> property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#queryParams",
      "fields": [
        {
          "name": "name",
          "value": "queryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines which query parameters the controller accepts.\nIf you give the names [&#39;category&#39;,&#39;page&#39;] it will bind\nthe values of these query parameters to the variables\n<code>this.category</code> and <code>this.page</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#_qpDelegate",
      "fields": [
        {
          "name": "name",
          "value": "_qpDelegate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#_normalizedQueryParams",
      "fields": [
        {
          "name": "name",
          "value": "_normalizedQueryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#_cacheMeta",
      "fields": [
        {
          "name": "name",
          "value": "_cacheMeta",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#needs",
      "fields": [
        {
          "name": "name",
          "value": "needs",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An array of other controller objects available inside\ninstances of this controller via the <code>controllers</code>\nproperty:</p>\n<p>For example, when you define a controller:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>The application&#39;s single instance of these other\ncontrollers are accessible by name through the\n<code>controllers</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span></pre></td>      </tr>    </table>  </div></div><p>Given that you have a nested controller (nested resource):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsNewController = Ember.ObjectController.extend({\n});</pre></td>      </tr>    </table>  </div></div><p>When you define a controller that requires access to a nested one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.IndexController = Ember.ObjectController.extend({\n  needs: [<span class=\"hljs-string\">'commentsNew'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>You will be able to get access to it:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.commentsNew'</span>); <span class=\"hljs-comment\">// instance of App.CommentsNewController</span></pre></td>      </tr>    </table>  </div></div><p>This is only available for singleton controllers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ControllerMixin#controllers",
      "fields": [
        {
          "name": "name",
          "value": "controllers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the <code>needs</code>\nproperty will be accessible by name through this property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CommentsController = Ember.ArrayController.extend({\n  needs: [<span class=\"hljs-string\">'post'</span>],\n  postTitle: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> currentPost = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controllers.post'</span>); <span class=\"hljs-comment\">// instance of App.PostController</span>\n    <span class=\"hljs-keyword\">return</span> currentPost.get(<span class=\"hljs-string\">'title'</span>);\n  }.property(<span class=\"hljs-string\">'controllers.post.title'</span>)\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ControllerMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Copyable",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Copyable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implements some standard methods for copying an object. Add this mixin to\nany object you create that can create a copy of itself. This mixin is\nadded automatically to the built-in array.</p>\n<p>You should generally implement the <code>copy()</code> method to return a copy of the\nreceiver.</p>\n<p>Note that <code>frozenCopy()</code> will only work if you also implement\n<code>Ember.Freezable</code>.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Copyable#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Copyable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Copyable#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to return a copy of the receiver. Default implementation raises\nan exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Copyable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Copyable#frozenCopy",
      "fields": [
        {
          "name": "name",
          "value": "frozenCopy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the object implements <code>Ember.Freezable</code>, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.</p>\n<p>Raises an exception if you try to call this method on a object that does\nnot support freezing.</p>\n<p>You should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Copyable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Deferred",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Deferred",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Deferred#then",
      "fields": [
        {
          "name": "name",
          "value": "then",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add handlers to be called when the Deferred object is resolved or rejected.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Deferred",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Deferred#resolve",
      "fields": [
        {
          "name": "name",
          "value": "resolve",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Resolve a Deferred object and call any <code>doneCallbacks</code> with the given args.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Deferred",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Deferred#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Reject a Deferred object and call any <code>failCallbacks</code> with the given args.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Deferred",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Enumerable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This mixin defines the common interface implemented by enumerable objects\nin Ember. Most of these methods follow the standard Array iteration\nAPI defined up to JavaScript 1.8 (excluding language-specific features that\ncannot be emulated in older versions of JavaScript).</p>\n<p>This mixin is applied automatically to the Array class on page load, so you\ncan use any of these methods on simple arrays. If Array already implements\none of these methods, the mixin will not override them.</p>\n<h2 id=\"writing-your-own-enumerable\">Writing Your Own Enumerable</h2>\n<p>To make your own custom class enumerable, you need two items:</p>\n<ol>\n<li><p>You must have a length property. This property should change whenever\nthe number of items in your enumerable object changes. If you use this\nwith an <code>Ember.Object</code> subclass, you should be sure to change the length\nproperty using <code>set().</code></p>\n</li>\n<li><p>You must implement <code>nextObject().</code> See documentation.</p>\n</li>\n</ol>\n<p>Once you have these two methods implemented, apply the <code>Ember.Enumerable</code> mixin\nto your class and you will be able to enumerate the contents of your object\nlike any other collection.</p>\n<h2 id=\"using-ember-enumeration-with-other-libraries\">Using Ember Enumeration with Other Libraries</h2>\n<p>Many other libraries provide some kind of iterator or enumeration like\nfacility. This is often where the most common API conflicts occur.\nEmber&#39;s API is designed to be as friendly as possible with other\nlibraries by implementing only methods that mostly correspond to the\nJavaScript 1.8 API.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Enumerable#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Enumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Evented",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Evented",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This mixin allows for Ember objects to subscribe to and emit events.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend(Ember.Evented, {\n  greet: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">this</span>.trigger(<span class=\"hljs-string\">'greet'</span>);\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> person = App.Person.create();\n\nperson.on(<span class=\"hljs-string\">'greet'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Our person has greeted'</span>);\n});\n\nperson.greet();\n\n<span class=\"hljs-comment\">// outputs: 'Our person has greeted'</span></pre></td>      </tr>    </table>  </div></div><p>You can also chain multiple event subscriptions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'greet'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Our person has greeted'</span>);\n}).one(<span class=\"hljs-string\">'greet'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Offer one-time special'</span>);\n}).off(<span class=\"hljs-string\">'event'</span>, <span class=\"hljs-keyword\">this</span>, forgetThis);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Evented#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Evented",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Evented#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Evented",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Evented#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didEat'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(food)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'person ate some '</span> + food);\n});\n\nperson.trigger(<span class=\"hljs-string\">'didEat'</span>, <span class=\"hljs-string\">'broccoli'</span>);\n\n<span class=\"hljs-comment\">// outputs: person ate some broccoli</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Evented",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Evented#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Evented",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Evented#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Evented",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Freezable",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Freezable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.Freezable</code> mixin implements some basic methods for marking an\nobject as frozen. Once an object is frozen it should be read only. No changes\nmay be made the internal state of the object.</p>\n<h2 id=\"enforcement\">Enforcement</h2>\n<p>To fully support freezing in your subclass, you must include this mixin and\noverride any method that might alter any property on the object to instead\nraise an exception. You can check the state of an object by checking the\n<code>isFrozen</code> property.</p>\n<p>Although future versions of JavaScript may support language-level freezing\nobject objects, that is not the case today. Even if an object is freezable,\nit is still technically possible to modify the object, even though it could\nbreak other parts of your application that do not expect a frozen object to\nchange. It is, therefore, very important that you always respect the\n<code>isFrozen</code> property on all freezable objects.</p>\n<h2 id=\"example-usage\">Example Usage</h2>\n<p>The example below shows a simple object that implement the <code>Ember.Freezable</code>\nprotocol.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Contact = Ember.Object.extend(Ember.Freezable, {\n  firstName: <span class=\"hljs-literal\">null</span>,\n  lastName: <span class=\"hljs-literal\">null</span>,\n\n  <span class=\"hljs-comment\">// swaps the names</span>\n  swapNames: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isFrozen'</span>)) <span class=\"hljs-keyword\">throw</span> Ember.FROZEN_ERROR;\n    <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>);\n    <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>));\n    <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'lastName'</span>, tmp);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n  }\n\n});\n\nc = Contact.create({ firstName: <span class=\"hljs-string\">\"John\"</span>, lastName: <span class=\"hljs-string\">\"Doe\"</span> });\nc.swapNames();  <span class=\"hljs-comment\">// returns c</span>\nc.freeze();\nc.swapNames();  <span class=\"hljs-comment\">// EXCEPTION</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"copying\">Copying</h2>\n<p>Usually the <code>Ember.Freezable</code> protocol is implemented in cooperation with the\n<code>Ember.Copyable</code> protocol, which defines a <code>frozenCopy()</code> method that will\nreturn a frozen object, if the object implements this method as well.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Freezable#freeze",
      "fields": [
        {
          "name": "name",
          "value": "freeze",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Freezes the object. Once this method has been called the object should\nno longer allow any properties to be edited.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Freezable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Freezable#isFrozen",
      "fields": [
        {
          "name": "name",
          "value": "isFrozen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set to <code>true</code> when the object is frozen. Use this property to detect\nwhether your object is frozen or not.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Freezable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray",
      "fields": [
        {
          "name": "name",
          "value": "Ember.MutableArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This mixin defines the API for modifying array-like objects. These methods\ncan be applied only to a collection that keeps its items in an ordered set.\nIt builds upon the Array mixin and adds methods to modify the array.\nConcrete implementations of this class include ArrayProxy and ArrayController.</p>\n<p>It is important to use the methods in this class to modify arrays so that\nchanges are observable. This allows the binding system in Ember to function\ncorrectly.</p>\n<p>Note that an Array can change even if it does not implement this mixin.\nFor example, one might implement a SparseArray that cannot be directly\nmodified, but if its underlying enumerable changes, it will change also.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#objectAt",
      "fields": [
        {
          "name": "name",
          "value": "objectAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectAt(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// 'a'</span>\narr.objectAt(<span class=\"hljs-number\">3</span>);   <span class=\"hljs-comment\">// 'd'</span>\narr.objectAt(-<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">4</span>);   <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">5</span>);   <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#objectsAt",
      "fields": [
        {
          "name": "name",
          "value": "objectsAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectsAt([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);  <span class=\"hljs-comment\">// ['a', 'b', 'c']</span>\narr.objectsAt([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// ['c', 'd', undefined]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#slice",
      "fields": [
        {
          "name": "name",
          "value": "slice",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'red'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'blue'</span>];\n\narr.slice(<span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// ['red', 'green', 'blue']</span>\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">// ['red', 'green']</span>\narr.slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// ['green', 'blue']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#indexOf",
      "fields": [
        {
          "name": "name",
          "value": "indexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&#39;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.indexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  0</span>\narr.indexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// -1</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#lastIndexOf",
      "fields": [
        {
          "name": "name",
          "value": "lastIndexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&#39;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  0</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//  1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">//  4</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#addArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "addArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#removeArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#arrayContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#arrayContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array if it is not already\npresent in the array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> cities = [<span class=\"hljs-string\">\"Chicago\"</span>, <span class=\"hljs-string\">\"Berlin\"</span>];\ncities.addObject(<span class=\"hljs-string\">\"Lima\"</span>);    <span class=\"hljs-comment\">// [\"Chicago\", \"Berlin\", \"Lima\"]</span>\ncities.addObject(<span class=\"hljs-string\">\"Berlin\"</span>);  <span class=\"hljs-comment\">// [\"Chicago\", \"Berlin\", \"Lima\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all occurrences of an object in the array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> cities = [<span class=\"hljs-string\">\"Chicago\"</span>, <span class=\"hljs-string\">\"Berlin\"</span>, <span class=\"hljs-string\">\"Lima\"</span>, <span class=\"hljs-string\">\"Chicago\"</span>];\ncities.removeObject(<span class=\"hljs-string\">\"Chicago\"</span>);  <span class=\"hljs-comment\">// [\"Berlin\", \"Lima\"]</span>\ncities.removeObject(<span class=\"hljs-string\">\"Lima\"</span>);     <span class=\"hljs-comment\">// [\"Berlin\"]</span>\ncities.removeObject(<span class=\"hljs-string\">\"Tokyo\"</span>)     <span class=\"hljs-comment\">// [\"Berlin\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#replace",
      "fields": [
        {
          "name": "name",
          "value": "replace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call <code>this.enumerableContentDidChange()</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolor.length();   <span class=\"hljs-comment\">//  3</span>\ncolors.clear();   <span class=\"hljs-comment\">//  []</span>\ncolors.length();  <span class=\"hljs-comment\">//  0</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#insertAt",
      "fields": [
        {
          "name": "name",
          "value": "insertAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.insertAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"yellow\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"yellow\", \"blue\"]</span>\ncolors.insertAt(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"orange\"</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#removeAt",
      "fields": [
        {
          "name": "name",
          "value": "removeAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>];\ncolors.removeAt(<span class=\"hljs-number\">0</span>);     <span class=\"hljs-comment\">// [\"green\", \"blue\", \"yellow\", \"orange\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#pushObject",
      "fields": [
        {
          "name": "name",
          "value": "pushObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>];\ncolors.pushObject(<span class=\"hljs-string\">\"black\"</span>);     <span class=\"hljs-comment\">// [\"red\", \"green\", \"black\"]</span>\ncolors.pushObject([<span class=\"hljs-string\">\"yellow\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"green\", [\"yellow\"]]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#pushObjects",
      "fields": [
        {
          "name": "name",
          "value": "pushObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.pushObjects([<span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"yellow\", \"orange\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#popObject",
      "fields": [
        {
          "name": "name",
          "value": "popObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.popObject();   <span class=\"hljs-comment\">// \"blue\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);  <span class=\"hljs-comment\">// [\"red\", \"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#shiftObject",
      "fields": [
        {
          "name": "name",
          "value": "shiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.shiftObject();  <span class=\"hljs-comment\">// \"red\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);   <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#unshiftObject",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObject(<span class=\"hljs-string\">\"yellow\"</span>);    <span class=\"hljs-comment\">// [\"yellow\", \"red\"]</span>\ncolors.unshiftObject([<span class=\"hljs-string\">\"black\"</span>]);   <span class=\"hljs-comment\">// [[\"black\"], \"yellow\", \"red\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#unshiftObjects",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);   <span class=\"hljs-comment\">// [\"black\", \"white\", \"red\"]</span>\ncolors.unshiftObjects(<span class=\"hljs-string\">\"yellow\"</span>); <span class=\"hljs-comment\">// Type Error: 'undefined' is not a function</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#reverseObjects",
      "fields": [
        {
          "name": "name",
          "value": "reverseObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#setObjects",
      "fields": [
        {
          "name": "name",
          "value": "setObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replace all the receiver&#39;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.setObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);  <span class=\"hljs-comment\">// [\"black\", \"white\"]</span>\ncolors.setObjects([]);                  <span class=\"hljs-comment\">// []</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#length",
      "fields": [
        {
          "name": "name",
          "value": "length",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#hasArrayObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasArrayObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableArray#@each",
      "fields": [
        {
          "name": "name",
          "value": "@each",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable",
      "fields": [
        {
          "name": "name",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This mixin defines the API for modifying generic enumerables. These methods\ncan be applied to an object regardless of whether it is ordered or\nunordered.</p>\n<p>Note that an Enumerable can change even if it does not implement this mixin.\nFor example, a MappedEnumerable cannot be directly modified but if its\nunderlying enumerable changes, it will change also.</p>\n<h2 id=\"adding-objects\">Adding Objects</h2>\n<p>To add an object to an enumerable, use the <code>addObject()</code> method. This\nmethod will only add the object to the enumerable if the object is not\nalready present and is of a type supported by the enumerable.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">set.addObject(contact);</pre></td>      </tr>    </table>  </div></div><h2 id=\"removing-objects\">Removing Objects</h2>\n<p>To remove an object from an enumerable, use the <code>removeObject()</code> method. This\nwill only remove the object if it is present in the enumerable, otherwise\nthis method has no effect.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">set.removeObject(contact);</pre></td>      </tr>    </table>  </div></div><h2 id=\"implementing-in-your-own-code\">Implementing In Your Own Code</h2>\n<p>If you are implementing an object and want to support this API, just include\nthis mixin in your class and implement the required methods. In your unit\ntests, be sure to apply the Ember.MutableEnumerableTests to your object.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.MutableEnumerable#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.MutableEnumerable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Observable",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<h2 id=\"overview\">Overview</h2>\n<p>This mixin provides properties and property observing functionality, core\nfeatures of the Ember object model.</p>\n<p>Properties and observers allow one object to observe changes to a\nproperty on another object. This is one of the fundamental ways that\nmodels, controllers and views communicate with each other in an Ember\napplication.</p>\n<p>Any object that has this mixin applied can be used in observer\noperations. That includes <code>Ember.Object</code> and most objects you will\ninteract with as you write your Ember application.</p>\n<p>Note that you will not generally apply this mixin to classes yourself,\nbut you will use the features provided by this module frequently, so it\nis important to understand how to use it.</p>\n<h2 id=\"using-get-and-set-\">Using <code>get()</code> and <code>set()</code></h2>\n<p>Because of Ember&#39;s support for bindings and observers, you will always\naccess properties using the get method, and set properties using the\nset method. This allows the observing objects to be notified and\ncomputed properties to be handled properly.</p>\n<p>More documentation about <code>get</code> and <code>set</code> are below.</p>\n<h2 id=\"observing-property-changes\">Observing Property Changes</h2>\n<p>You typically observe property changes simply by adding the <code>observes</code>\ncall to the end of your method declarations in classes that you write.\nFor example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Object.extend({\n  valueObserver: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Executes whenever the \"value\" property changes</span>\n  }.observes(<span class=\"hljs-string\">'value'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Although this is the most common way to add an observer, this capability\nis actually built into the <code>Ember.Object</code> class on top of two methods\ndefined in this mixin: <code>addObserver</code> and <code>removeObserver</code>. You can use\nthese two methods to add and remove observers yourself if you need to\ndo so at runtime.</p>\n<p>To add an observer for a property, call:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">object.addObserver(<span class=\"hljs-string\">'propertyKey'</span>, targetObject, targetAction)</pre></td>      </tr>    </table>  </div></div><p>This will call the <code>targetAction</code> method on the <code>targetObject</code> whenever\nthe value of the <code>propertyKey</code> changes.</p>\n<p>Note that if <code>propertyKey</code> is a computed property, the observer will be\ncalled when any of the property dependencies are changed, even if the\nresulting value of the computed property is unchanged. This is necessary\nbecause computed properties are not computed until <code>get</code> is called.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Observable#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Observable",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin",
      "fields": [
        {
          "name": "name",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A low level mixin making ObjectProxy, ObjectController or ArrayController&#39;s promise aware.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);\n\n<span class=\"hljs-keyword\">var</span> controller = ObjectPromiseController.create({\n  promise: $.getJSON(<span class=\"hljs-string\">'/some/remote/data.json'</span>)\n});\n\ncontroller.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(json)</span></span>{\n   <span class=\"hljs-comment\">// the json</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n   <span class=\"hljs-comment\">// the reason why you have no json</span>\n});</pre></td>      </tr>    </table>  </div></div><p>the controller has bindable attributes which\ntrack the promises life cycle</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">controller.get(<span class=\"hljs-string\">'isPending'</span>)   <span class=\"hljs-comment\">//=&gt; true</span>\ncontroller.get(<span class=\"hljs-string\">'isSettled'</span>)  <span class=\"hljs-comment\">//=&gt; false</span>\ncontroller.get(<span class=\"hljs-string\">'isRejected'</span>)  <span class=\"hljs-comment\">//=&gt; false</span>\ncontroller.get(<span class=\"hljs-string\">'isFulfilled'</span>) <span class=\"hljs-comment\">//=&gt; false</span></pre></td>      </tr>    </table>  </div></div><p>When the the $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle attributes will update accordingly.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">controller.get(<span class=\"hljs-string\">'isPending'</span>)   <span class=\"hljs-comment\">//=&gt; false</span>\ncontroller.get(<span class=\"hljs-string\">'isSettled'</span>)   <span class=\"hljs-comment\">//=&gt; true</span>\ncontroller.get(<span class=\"hljs-string\">'isRejected'</span>)  <span class=\"hljs-comment\">//=&gt; false</span>\ncontroller.get(<span class=\"hljs-string\">'isFulfilled'</span>) <span class=\"hljs-comment\">//=&gt; true</span></pre></td>      </tr>    </table>  </div></div><p>As the controller is an ObjectController, and the json now its content,\nall the json properties will be available directly from the controller.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Assuming the following json:</span>\n{\n  firstName: <span class=\"hljs-string\">'Stefan'</span>,\n  lastName: <span class=\"hljs-string\">'Penner'</span>\n}\n\n<span class=\"hljs-comment\">// both properties will accessible on the controller</span>\ncontroller.get(<span class=\"hljs-string\">'firstName'</span>) <span class=\"hljs-comment\">//=&gt; 'Stefan'</span>\ncontroller.get(<span class=\"hljs-string\">'lastName'</span>)  <span class=\"hljs-comment\">//=&gt; 'Penner'</span></pre></td>      </tr>    </table>  </div></div><p>If the controller is backing a template, the attributes are\nbindable from within that template</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">if</span> isPending</span>}}</span><span class=\"xml\">\n  loading...\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">else</span></span>}}</span><span class=\"xml\">\n  firstName: </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">firstName</span>}}</span><span class=\"xml\">\n  lastName: </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">lastName</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">if</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#then",
      "fields": [
        {
          "name": "name",
          "value": "then",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An alias to the proxied promise&#39;s <code>then</code>.</p>\n<p>See RSVP.Promise.then.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#catch",
      "fields": [
        {
          "name": "name",
          "value": "catch",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An alias to the proxied promise&#39;s <code>catch</code>.</p>\n<p>See RSVP.Promise.catch.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#finally",
      "fields": [
        {
          "name": "name",
          "value": "finally",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An alias to the proxied promise&#39;s <code>finally</code>.</p>\n<p>See RSVP.Promise.finally.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#reason",
      "fields": [
        {
          "name": "name",
          "value": "reason",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the proxied promise is rejected this will contain the reason\nprovided.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#isPending",
      "fields": [
        {
          "name": "name",
          "value": "isPending",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Once the proxied promise has settled this will become <code>false</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#isSettled",
      "fields": [
        {
          "name": "name",
          "value": "isSettled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Once the proxied promise has settled this will become <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#isRejected",
      "fields": [
        {
          "name": "name",
          "value": "isRejected",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Will become <code>true</code> if the proxied promise is rejected.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#isFulfilled",
      "fields": [
        {
          "name": "name",
          "value": "isFulfilled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Will become <code>true</code> if the proxied promise is fulfilled.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.PromiseProxyMixin#promise",
      "fields": [
        {
          "name": "name",
          "value": "promise",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The promise whose fulfillment value is being proxied by this object.</p>\n<p>This property must be specified upon creation, and should not be\nchanged once created.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.ObjectController.extend(Ember.PromiseProxyMixin).create({\n  promise: <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">thenable</span>&gt;</span>\n});</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.PromiseProxyMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin",
      "fields": [
        {
          "name": "name",
          "value": "Ember.SortableMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.SortableMixin</code> provides a standard interface for array proxies\nto specify a sort order and maintain this sorting when objects are added,\nremoved, or updated without changing the implicit order of their underlying\nmodel array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">songs = [\n  {trackNumber: <span class=\"hljs-number\">4</span>, title: <span class=\"hljs-string\">'Ob-La-Di, Ob-La-Da'</span>},\n  {trackNumber: <span class=\"hljs-number\">2</span>, title: <span class=\"hljs-string\">'Back in the U.S.S.R.'</span>},\n  {trackNumber: <span class=\"hljs-number\">3</span>, title: <span class=\"hljs-string\">'Glass Onion'</span>},\n];\n\nsongsController = Ember.ArrayController.create({\n  model: songs,\n  sortProperties: [<span class=\"hljs-string\">'trackNumber'</span>],\n  sortAscending: <span class=\"hljs-literal\">true</span>\n});\n\nsongsController.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// {trackNumber: 2, title: 'Back in the U.S.S.R.'}</span>\n\nsongsController.addObject({trackNumber: <span class=\"hljs-number\">1</span>, title: <span class=\"hljs-string\">'Dear Prudence'</span>});\nsongsController.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// {trackNumber: 1, title: 'Dear Prudence'}</span></pre></td>      </tr>    </table>  </div></div><p>If you add or remove the properties to sort by or change the sort direction the model\nsort order will be automatically updated.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">songsController.set(<span class=\"hljs-string\">'sortProperties'</span>, [<span class=\"hljs-string\">'title'</span>]);\nsongsController.get(<span class=\"hljs-string\">'firstObject'</span>); <span class=\"hljs-comment\">// {trackNumber: 2, title: 'Back in the U.S.S.R.'}</span>\n\nsongsController.toggleProperty(<span class=\"hljs-string\">'sortAscending'</span>);\nsongsController.get(<span class=\"hljs-string\">'firstObject'</span>); <span class=\"hljs-comment\">// {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}</span></pre></td>      </tr>    </table>  </div></div><p><code>SortableMixin</code> works by sorting the <code>arrangedContent</code> array, which is the array that\n<code>ArrayProxy</code> displays. Due to the fact that the underlying &#39;content&#39; array is not changed, that\narray will not display the sorted list:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">songsController.get(<span class=\"hljs-string\">'content'</span>).get(<span class=\"hljs-string\">'firstObject'</span>); <span class=\"hljs-comment\">// Returns the unsorted original content</span>\nsongsController.get(<span class=\"hljs-string\">'firstObject'</span>); <span class=\"hljs-comment\">// Returns the sorted content.</span></pre></td>      </tr>    </table>  </div></div><p>Although the sorted content can also be accessed through the <code>arrangedContent</code> property,\nit is preferable to use the proxied class and not the <code>arrangedContent</code> array directly.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#sortProperties",
      "fields": [
        {
          "name": "name",
          "value": "sortProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifies which properties dictate the <code>arrangedContent</code>&#39;s sort order.</p>\n<p>When specifying multiple properties the sorting will use properties\nfrom the <code>sortProperties</code> array prioritized from first to last.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#sortAscending",
      "fields": [
        {
          "name": "name",
          "value": "sortAscending",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifies the <code>arrangedContent</code>&#39;s sort direction.\nSorts the content in ascending order by default. Set to <code>false</code> to\nuse descending order.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#sortFunction",
      "fields": [
        {
          "name": "name",
          "value": "sortFunction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.,</p>\n<ul>\n<li>return 0 if the two parameters are equal,</li>\n<li>return a negative value if the first parameter is smaller than the second or</li>\n<li>return a positive value otherwise:</li>\n</ul>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(x, y)</span> </span>{ <span class=\"hljs-comment\">// These are assumed to be integers</span>\n  <span class=\"hljs-keyword\">if</span> (x === y)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> x &lt; y ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SortableMixin#arrangedContent",
      "fields": [
        {
          "name": "name",
          "value": "arrangedContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Overrides the default <code>arrangedContent</code> from <code>ArrayProxy</code> in order to sort by <code>sortFunction</code>.\nAlso sets up observers for each <code>sortProperty</code> on each item in the content Array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SortableMixin",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TargetActionSupport",
      "fields": [
        {
          "name": "name",
          "value": "Ember.TargetActionSupport",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.TargetActionSupport</code> is a mixin that can be included in a class\nto add a <code>triggerAction</code> method with semantics similar to the Handlebars\n<code>{{action}}</code> helper. In normal Ember usage, the <code>{{action}}</code> helper is\nusually the best choice. This mixin is most often useful when you are\ndoing more complex event handling in View objects.</p>\n<p>See also <code>Ember.ViewTargetActionSupport</code>, which has\nview-aware defaults for target and actionContext.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.TargetActionSupport#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TargetActionSupport#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TargetActionSupport#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TargetActionSupport#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TargetActionSupport#triggerAction",
      "fields": [
        {
          "name": "name",
          "value": "triggerAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  action: <span class=\"hljs-string\">'save'</span>,\n  actionContext: Ember.computed.alias(<span class=\"hljs-string\">'context'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>,\n      target: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controller'</span>),\n      actionContext: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'context'</span>)\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ArrayProxy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An ArrayProxy wraps any other object that implements <code>Ember.Array</code> and/or\n<code>Ember.MutableArray,</code> forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.</p>\n<p>A simple example of usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> pets = [<span class=\"hljs-string\">'dog'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'fish'</span>];\n<span class=\"hljs-keyword\">var</span> ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\nap.get(<span class=\"hljs-string\">'firstObject'</span>);                        <span class=\"hljs-comment\">// 'dog'</span>\nap.set(<span class=\"hljs-string\">'content'</span>, [<span class=\"hljs-string\">'amoeba'</span>, <span class=\"hljs-string\">'paramecium'</span>]);\nap.get(<span class=\"hljs-string\">'firstObject'</span>);                        <span class=\"hljs-comment\">// 'amoeba'</span></pre></td>      </tr>    </table>  </div></div><p>This class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n<code>objectAtContent</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> pets = [<span class=\"hljs-string\">'dog'</span>, <span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'fish'</span>];\n<span class=\"hljs-keyword\">var</span> ap = Ember.ArrayProxy.create({\n    content: Ember.A(pets),\n    objectAtContent: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(idx)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'content'</span>).objectAt(idx).toUpperCase();\n    }\n});\n\nap.get(<span class=\"hljs-string\">'firstObject'</span>); <span class=\"hljs-comment\">// . 'DOG'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#objectAt",
      "fields": [
        {
          "name": "name",
          "value": "objectAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectAt(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// 'a'</span>\narr.objectAt(<span class=\"hljs-number\">3</span>);   <span class=\"hljs-comment\">// 'd'</span>\narr.objectAt(-<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">4</span>);   <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">5</span>);   <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#objectsAt",
      "fields": [
        {
          "name": "name",
          "value": "objectsAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectsAt([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);  <span class=\"hljs-comment\">// ['a', 'b', 'c']</span>\narr.objectsAt([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// ['c', 'd', undefined]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#slice",
      "fields": [
        {
          "name": "name",
          "value": "slice",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'red'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'blue'</span>];\n\narr.slice(<span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// ['red', 'green', 'blue']</span>\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">// ['red', 'green']</span>\narr.slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// ['green', 'blue']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#indexOf",
      "fields": [
        {
          "name": "name",
          "value": "indexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&#39;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.indexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  0</span>\narr.indexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// -1</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#lastIndexOf",
      "fields": [
        {
          "name": "name",
          "value": "lastIndexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&#39;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  0</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//  1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">//  4</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#addArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "addArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#removeArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#arrayContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#arrayContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array if it is not already\npresent in the array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> cities = [<span class=\"hljs-string\">\"Chicago\"</span>, <span class=\"hljs-string\">\"Berlin\"</span>];\ncities.addObject(<span class=\"hljs-string\">\"Lima\"</span>);    <span class=\"hljs-comment\">// [\"Chicago\", \"Berlin\", \"Lima\"]</span>\ncities.addObject(<span class=\"hljs-string\">\"Berlin\"</span>);  <span class=\"hljs-comment\">// [\"Chicago\", \"Berlin\", \"Lima\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all occurrences of an object in the array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> cities = [<span class=\"hljs-string\">\"Chicago\"</span>, <span class=\"hljs-string\">\"Berlin\"</span>, <span class=\"hljs-string\">\"Lima\"</span>, <span class=\"hljs-string\">\"Chicago\"</span>];\ncities.removeObject(<span class=\"hljs-string\">\"Chicago\"</span>);  <span class=\"hljs-comment\">// [\"Berlin\", \"Lima\"]</span>\ncities.removeObject(<span class=\"hljs-string\">\"Lima\"</span>);     <span class=\"hljs-comment\">// [\"Berlin\"]</span>\ncities.removeObject(<span class=\"hljs-string\">\"Tokyo\"</span>)     <span class=\"hljs-comment\">// [\"Berlin\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#replace",
      "fields": [
        {
          "name": "name",
          "value": "replace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call <code>this.enumerableContentDidChange()</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolor.length();   <span class=\"hljs-comment\">//  3</span>\ncolors.clear();   <span class=\"hljs-comment\">//  []</span>\ncolors.length();  <span class=\"hljs-comment\">//  0</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#insertAt",
      "fields": [
        {
          "name": "name",
          "value": "insertAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.insertAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"yellow\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"yellow\", \"blue\"]</span>\ncolors.insertAt(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"orange\"</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#removeAt",
      "fields": [
        {
          "name": "name",
          "value": "removeAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>];\ncolors.removeAt(<span class=\"hljs-number\">0</span>);     <span class=\"hljs-comment\">// [\"green\", \"blue\", \"yellow\", \"orange\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#pushObject",
      "fields": [
        {
          "name": "name",
          "value": "pushObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>];\ncolors.pushObject(<span class=\"hljs-string\">\"black\"</span>);     <span class=\"hljs-comment\">// [\"red\", \"green\", \"black\"]</span>\ncolors.pushObject([<span class=\"hljs-string\">\"yellow\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"green\", [\"yellow\"]]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#pushObjects",
      "fields": [
        {
          "name": "name",
          "value": "pushObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.pushObjects([<span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"yellow\", \"orange\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#popObject",
      "fields": [
        {
          "name": "name",
          "value": "popObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.popObject();   <span class=\"hljs-comment\">// \"blue\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);  <span class=\"hljs-comment\">// [\"red\", \"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#shiftObject",
      "fields": [
        {
          "name": "name",
          "value": "shiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.shiftObject();  <span class=\"hljs-comment\">// \"red\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);   <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#unshiftObject",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObject(<span class=\"hljs-string\">\"yellow\"</span>);    <span class=\"hljs-comment\">// [\"yellow\", \"red\"]</span>\ncolors.unshiftObject([<span class=\"hljs-string\">\"black\"</span>]);   <span class=\"hljs-comment\">// [[\"black\"], \"yellow\", \"red\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#unshiftObjects",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);   <span class=\"hljs-comment\">// [\"black\", \"white\", \"red\"]</span>\ncolors.unshiftObjects(<span class=\"hljs-string\">\"yellow\"</span>); <span class=\"hljs-comment\">// Type Error: 'undefined' is not a function</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#reverseObjects",
      "fields": [
        {
          "name": "name",
          "value": "reverseObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#setObjects",
      "fields": [
        {
          "name": "name",
          "value": "setObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replace all the receiver&#39;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.setObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);  <span class=\"hljs-comment\">// [\"black\", \"white\"]</span>\ncolors.setObjects([]);                  <span class=\"hljs-comment\">// []</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#objectAtContent",
      "fields": [
        {
          "name": "name",
          "value": "objectAtContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#replaceContent",
      "fields": [
        {
          "name": "name",
          "value": "replaceContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.</p>\n<p>This method will only be called if content is non-<code>null</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#_contentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "_contentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#contentArrayWillChange",
      "fields": [
        {
          "name": "name",
          "value": "contentArrayWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement content array <code>willChange</code> observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#contentArrayDidChange",
      "fields": [
        {
          "name": "name",
          "value": "contentArrayDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement content array <code>didChange</code> observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#_contentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked when the content property changes. Notifies observers that the\nentire array content has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#length",
      "fields": [
        {
          "name": "name",
          "value": "length",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#hasArrayObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasArrayObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#@each",
      "fields": [
        {
          "name": "name",
          "value": "@each",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#content",
      "fields": [
        {
          "name": "name",
          "value": "content",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The content array. Must be an object that implements <code>Ember.Array</code> and/or\n<code>Ember.MutableArray.</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ArrayProxy#arrangedContent",
      "fields": [
        {
          "name": "name",
          "value": "arrangedContent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The array that the proxy pretends to be. In the default <code>ArrayProxy</code>\nimplementation, this and <code>content</code> are the same. Subclasses of <code>ArrayProxy</code>\ncan override this property to provide things like sorting and filtering.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ArrayProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject",
      "fields": [
        {
          "name": "name",
          "value": "Ember.CoreObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreObject#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreObject",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy",
      "fields": [
        {
          "name": "name",
          "value": "Ember.EachProxy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is the object instance returned when you get the <code>@each</code> property on an\narray. It uses the unknownProperty handler to automatically create\nEachArray instances for property names.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#unknownProperty",
      "fields": [
        {
          "name": "name",
          "value": "unknownProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You can directly access mapped properties by simply requesting them.\nThe <code>unknownProperty</code> handler will generate an EachArray of each item.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EachProxy#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EachProxy",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Namespace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A Namespace is an object usually used to contain other objects or methods\nsuch as an application or framework. Create a namespace anytime you want\nto define one of these new containers.</p>\n<h1 id=\"example-usage\">Example Usage</h1>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyFramework = Ember.Namespace.create({\n  VERSION: <span class=\"hljs-string\">'1.0.0'</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Namespace#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Namespace",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray",
      "fields": [
        {
          "name": "name",
          "value": "Ember.NativeArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The NativeArray mixin contains the properties needed to make the native\nArray support Ember.MutableArray and all of its dependent APIs. Unless you\nhave <code>Ember.EXTEND_PROTOTYPES</code> or <code>Ember.EXTEND_PROTOTYPES.Array</code> set to\nfalse, this will be applied automatically. Otherwise you can apply the mixin\nat anytime by calling <code>Ember.NativeArray.activate</code>.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#objectAt",
      "fields": [
        {
          "name": "name",
          "value": "objectAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectAt(<span class=\"hljs-number\">0</span>);   <span class=\"hljs-comment\">// 'a'</span>\narr.objectAt(<span class=\"hljs-number\">3</span>);   <span class=\"hljs-comment\">// 'd'</span>\narr.objectAt(-<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">4</span>);   <span class=\"hljs-comment\">// undefined</span>\narr.objectAt(<span class=\"hljs-number\">5</span>);   <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#objectsAt",
      "fields": [
        {
          "name": "name",
          "value": "objectsAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>];\n\narr.objectsAt([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);  <span class=\"hljs-comment\">// ['a', 'b', 'c']</span>\narr.objectsAt([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);  <span class=\"hljs-comment\">// ['c', 'd', undefined]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#slice",
      "fields": [
        {
          "name": "name",
          "value": "slice",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'red'</span>, <span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">'blue'</span>];\n\narr.slice(<span class=\"hljs-number\">0</span>);       <span class=\"hljs-comment\">// ['red', 'green', 'blue']</span>\narr.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">// ['red', 'green']</span>\narr.slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// ['green', 'blue']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#indexOf",
      "fields": [
        {
          "name": "name",
          "value": "indexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&#39;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.indexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  0</span>\narr.indexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.indexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">// -1</span>\narr.indexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// -1</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#lastIndexOf",
      "fields": [
        {
          "name": "name",
          "value": "lastIndexOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the index of the given object&#39;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&#39;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'a'</span>];\n\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>);       <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'z'</span>);       <span class=\"hljs-comment\">// -1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>);    <span class=\"hljs-comment\">//  0</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, -<span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">//  4</span>\narr.lastIndexOf(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">3</span>);    <span class=\"hljs-comment\">//  1</span>\narr.lastIndexOf(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">//  4</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#addArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "addArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#removeArrayObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeArrayObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#arrayContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#arrayContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array if it is not already\npresent in the array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> cities = [<span class=\"hljs-string\">\"Chicago\"</span>, <span class=\"hljs-string\">\"Berlin\"</span>];\ncities.addObject(<span class=\"hljs-string\">\"Lima\"</span>);    <span class=\"hljs-comment\">// [\"Chicago\", \"Berlin\", \"Lima\"]</span>\ncities.addObject(<span class=\"hljs-string\">\"Berlin\"</span>);  <span class=\"hljs-comment\">// [\"Chicago\", \"Berlin\", \"Lima\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all occurrences of an object in the array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> cities = [<span class=\"hljs-string\">\"Chicago\"</span>, <span class=\"hljs-string\">\"Berlin\"</span>, <span class=\"hljs-string\">\"Lima\"</span>, <span class=\"hljs-string\">\"Chicago\"</span>];\ncities.removeObject(<span class=\"hljs-string\">\"Chicago\"</span>);  <span class=\"hljs-comment\">// [\"Berlin\", \"Lima\"]</span>\ncities.removeObject(<span class=\"hljs-string\">\"Lima\"</span>);     <span class=\"hljs-comment\">// [\"Berlin\"]</span>\ncities.removeObject(<span class=\"hljs-string\">\"Tokyo\"</span>)     <span class=\"hljs-comment\">// [\"Berlin\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#replace",
      "fields": [
        {
          "name": "name",
          "value": "replace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call <code>this.enumerableContentDidChange()</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolor.length();   <span class=\"hljs-comment\">//  3</span>\ncolors.clear();   <span class=\"hljs-comment\">//  []</span>\ncolors.length();  <span class=\"hljs-comment\">//  0</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#insertAt",
      "fields": [
        {
          "name": "name",
          "value": "insertAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.insertAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"yellow\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"yellow\", \"blue\"]</span>\ncolors.insertAt(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"orange\"</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#removeAt",
      "fields": [
        {
          "name": "name",
          "value": "removeAt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>];\ncolors.removeAt(<span class=\"hljs-number\">0</span>);     <span class=\"hljs-comment\">// [\"green\", \"blue\", \"yellow\", \"orange\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span>\ncolors.removeAt(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// Error: Index out of range</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#pushObject",
      "fields": [
        {
          "name": "name",
          "value": "pushObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>];\ncolors.pushObject(<span class=\"hljs-string\">\"black\"</span>);     <span class=\"hljs-comment\">// [\"red\", \"green\", \"black\"]</span>\ncolors.pushObject([<span class=\"hljs-string\">\"yellow\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"green\", [\"yellow\"]]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#pushObjects",
      "fields": [
        {
          "name": "name",
          "value": "pushObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.pushObjects([<span class=\"hljs-string\">\"yellow\"</span>, <span class=\"hljs-string\">\"orange\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"yellow\", \"orange\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#popObject",
      "fields": [
        {
          "name": "name",
          "value": "popObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.popObject();   <span class=\"hljs-comment\">// \"blue\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);  <span class=\"hljs-comment\">// [\"red\", \"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#shiftObject",
      "fields": [
        {
          "name": "name",
          "value": "shiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.shiftObject();  <span class=\"hljs-comment\">// \"red\"</span>\n<span class=\"hljs-built_in\">console</span>.log(colors);   <span class=\"hljs-comment\">// [\"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#unshiftObject",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObject(<span class=\"hljs-string\">\"yellow\"</span>);    <span class=\"hljs-comment\">// [\"yellow\", \"red\"]</span>\ncolors.unshiftObject([<span class=\"hljs-string\">\"black\"</span>]);   <span class=\"hljs-comment\">// [[\"black\"], \"yellow\", \"red\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#unshiftObjects",
      "fields": [
        {
          "name": "name",
          "value": "unshiftObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>];\ncolors.unshiftObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);   <span class=\"hljs-comment\">// [\"black\", \"white\", \"red\"]</span>\ncolors.unshiftObjects(<span class=\"hljs-string\">\"yellow\"</span>); <span class=\"hljs-comment\">// Type Error: 'undefined' is not a function</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#reverseObjects",
      "fields": [
        {
          "name": "name",
          "value": "reverseObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#setObjects",
      "fields": [
        {
          "name": "name",
          "value": "setObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replace all the receiver&#39;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\ncolors.setObjects([<span class=\"hljs-string\">\"black\"</span>, <span class=\"hljs-string\">\"white\"</span>]);  <span class=\"hljs-comment\">// [\"black\", \"white\"]</span>\ncolors.setObjects([]);                  <span class=\"hljs-comment\">// []</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to return a copy of the receiver. Default implementation raises\nan exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#frozenCopy",
      "fields": [
        {
          "name": "name",
          "value": "frozenCopy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the object implements <code>Ember.Freezable</code>, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.</p>\n<p>Raises an exception if you try to call this method on a object that does\nnot support freezing.</p>\n<p>You should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#activate",
      "fields": [
        {
          "name": "name",
          "value": "activate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Activates the mixin on the Array.prototype if not already applied. Calling\nthis method more than once is safe. This will be called when ember is loaded\nunless you have <code>Ember.EXTEND_PROTOTYPES</code> or <code>Ember.EXTEND_PROTOTYPES.Array</code>\nset to <code>false</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-keyword\">if</span> (Ember.EXTEND_PROTOTYPES === <span class=\"hljs-literal\">true</span> || Ember.EXTEND_PROTOTYPES.Array) {\n  Ember.NativeArray.activate();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#length",
      "fields": [
        {
          "name": "name",
          "value": "length",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#hasArrayObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasArrayObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NativeArray#@each",
      "fields": [
        {
          "name": "name",
          "value": "@each",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p>If you merely want to watch for any items being added or removed to the array,\nuse the <code>[]</code> property instead of <code>@each</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NativeArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Object",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.Object</code> is the main base class for all Ember objects. It is a subclass\nof <code>Ember.CoreObject</code> with the <code>Ember.Observable</code> mixin applied. For details,\nsee the documentation for each of these.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Object#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Object#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Object",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ObjectProxy",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ObjectProxy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.ObjectProxy</code> forwards all properties not defined by the proxy itself\nto a proxied <code>content</code> object.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">object = Ember.Object.create({\n  name: <span class=\"hljs-string\">'Foo'</span>\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n<span class=\"hljs-comment\">// Access and change existing properties</span>\nproxy.get(<span class=\"hljs-string\">'name'</span>)          <span class=\"hljs-comment\">// 'Foo'</span>\nproxy.set(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'Bar'</span>);\nobject.get(<span class=\"hljs-string\">'name'</span>)         <span class=\"hljs-comment\">// 'Bar'</span>\n\n<span class=\"hljs-comment\">// Create new 'description' property on `object`</span>\nproxy.set(<span class=\"hljs-string\">'description'</span>, <span class=\"hljs-string\">'Foo is a whizboo baz'</span>);\nobject.get(<span class=\"hljs-string\">'description'</span>)  <span class=\"hljs-comment\">// 'Foo is a whizboo baz'</span></pre></td>      </tr>    </table>  </div></div><p>While <code>content</code> is unset, setting a property to be delegated will throw an\nError.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">proxy = Ember.ObjectProxy.create({\n  content: <span class=\"hljs-literal\">null</span>,\n  flag: <span class=\"hljs-literal\">null</span>\n});\nproxy.set(<span class=\"hljs-string\">'flag'</span>, <span class=\"hljs-literal\">true</span>);\nproxy.get(<span class=\"hljs-string\">'flag'</span>);         <span class=\"hljs-comment\">// true</span>\nproxy.get(<span class=\"hljs-string\">'foo'</span>);          <span class=\"hljs-comment\">// undefined</span>\nproxy.set(<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'data'</span>);  <span class=\"hljs-comment\">// throws Error</span></pre></td>      </tr>    </table>  </div></div><p>Delegated properties can be bound to and will change when content is updated.</p>\n<p>Computed properties on the proxy itself can depend on delegated properties.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">ProxyWithComputedProperty = Ember.ObjectProxy.extend({\n  fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> firstName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>),\n        lastName = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n    <span class=\"hljs-keyword\">if</span> (firstName &amp;&amp; lastName) {\n      <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">' '</span> + lastName;\n    }\n    <span class=\"hljs-keyword\">return</span> firstName || lastName;\n  }.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)\n});\n\nproxy = ProxyWithComputedProperty.create();\n\nproxy.get(<span class=\"hljs-string\">'fullName'</span>);  <span class=\"hljs-comment\">// undefined</span>\nproxy.set(<span class=\"hljs-string\">'content'</span>, {\n  firstName: <span class=\"hljs-string\">'Tom'</span>, lastName: <span class=\"hljs-string\">'Dale'</span>\n}); <span class=\"hljs-comment\">// triggers property change for fullName on proxy</span>\n\nproxy.get(<span class=\"hljs-string\">'fullName'</span>);  <span class=\"hljs-comment\">// 'Tom Dale'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Service",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Service",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Service#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Service#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Service",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An unordered collection of objects.</p>\n<p>A Set works a bit like an array except that its items are not ordered. You\ncan create a set to efficiently test for membership for an object. You can\nalso iterate through a set just like an array, even accessing objects by\nindex, however there is no guarantee as to their order.</p>\n<p>All Sets are observable via the Enumerable Observer API - which works\non any enumerable object including both Sets and Arrays.</p>\n<h2 id=\"creating-a-set\">Creating a Set</h2>\n<p>You can create a set like you would most objects using\n<code>new Ember.Set()</code>. Most new sets you create will be empty, but you can\nalso initialize the set with some content by passing an array or other\nenumerable of objects to the constructor.</p>\n<p>Finally, you can pass in an existing set and the set will be copied. You\ncan also create a copy of a set by calling <code>Ember.Set#copy()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// creates a new empty set</span>\n<span class=\"hljs-keyword\">var</span> foundNames = <span class=\"hljs-keyword\">new</span> Ember.Set();\n\n<span class=\"hljs-comment\">// creates a set with four names in it.</span>\n<span class=\"hljs-keyword\">var</span> names = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"Charles\"</span>, <span class=\"hljs-string\">\"Tom\"</span>, <span class=\"hljs-string\">\"Juan\"</span>, <span class=\"hljs-string\">\"Alex\"</span>]); <span class=\"hljs-comment\">// :P</span>\n\n<span class=\"hljs-comment\">// creates a copy of the names set.</span>\n<span class=\"hljs-keyword\">var</span> namesCopy = <span class=\"hljs-keyword\">new</span> Ember.Set(names);\n\n<span class=\"hljs-comment\">// same as above.</span>\n<span class=\"hljs-keyword\">var</span> anotherNamesCopy = names.copy();</pre></td>      </tr>    </table>  </div></div><h2 id=\"adding-removing-objects\">Adding/Removing Objects</h2>\n<p>You generally add or remove objects from a set using <code>add()</code> or\n<code>remove()</code>. You can add any type of object including primitives such as\nnumbers, strings, and booleans.</p>\n<p>Unlike arrays, objects can only exist one time in a set. If you call <code>add()</code>\non a set with the same object multiple times, the object will only be added\nonce. Likewise, calling <code>remove()</code> with the same object multiple times will\nremove the object the first time and have no effect on future calls until\nyou add the object to the set again.</p>\n<p>NOTE: You cannot add/remove <code>null</code> or <code>undefined</code> to a set. Any attempt to do\nso will be ignored.</p>\n<p>In addition to add/remove you can also call <code>push()</code>/<code>pop()</code>. Push behaves\njust like <code>add()</code> but <code>pop()</code>, unlike <code>remove()</code> will pick an arbitrary\nobject, remove it and return it. This is a good way to use a set as a job\nqueue when you don&#39;t care which order the jobs are executed in.</p>\n<h2 id=\"testing-for-an-object\">Testing for an Object</h2>\n<p>To test for an object&#39;s presence in a set you simply call\n<code>Ember.Set#contains()</code>.</p>\n<h2 id=\"observing-changes\">Observing changes</h2>\n<p>When using <code>Ember.Set</code>, you can observe the <code>&quot;[]&quot;</code> property to be\nalerted whenever the content changes. You can also add an enumerable\nobserver to the set to be notified of specific objects that are added and\nremoved from the set. See <a href=\"/api/classes/Ember.Enumerable.html\">Ember.Enumerable</a>\nfor more information on enumerables.</p>\n<p>This is often unhelpful. If you are filtering sets of objects, for instance,\nit is very inefficient to re-filter all of the items each time the set\nchanges. It would be better if you could just adjust the filtered set based\non what was changed on the original set. The same issue applies to merging\nsets, as well.</p>\n<h2 id=\"other-methods\">Other Methods</h2>\n<p><code>Ember.Set</code> primary implements other mixin APIs. For a complete reference\non the methods you will use with <code>Ember.Set</code>, please consult these mixins.\nThe most useful ones will be <code>Ember.Enumerable</code> and\n<code>Ember.MutableEnumerable</code> which implement most of the common iterator\nmethods you are used to on Array.</p>\n<p>Note that you can also use the <code>Ember.Copyable</code> and <code>Ember.Freezable</code>\nAPIs on <code>Ember.Set</code> as well. Once a set is frozen it can no longer be\nmodified. The benefit of this is that when you call <code>frozenCopy()</code> on it,\nEmber will avoid making copies of the set. This allows you to write\ncode that can know with certainty when the underlying set data will or\nwill not be modified.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Set#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#nextObject",
      "fields": [
        {
          "name": "name",
          "value": "nextObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&#39;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#contains",
      "fields": [
        {
          "name": "name",
          "value": "contains",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\narr.contains(<span class=\"hljs-string\">'a'</span>); <span class=\"hljs-comment\">// true</span>\narr.contains(<span class=\"hljs-string\">'z'</span>); <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#forEach",
      "fields": [
        {
          "name": "name",
          "value": "forEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#getEach",
      "fields": [
        {
          "name": "name",
          "value": "getEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Alias for <code>mapBy</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#setEach",
      "fields": [
        {
          "name": "name",
          "value": "setEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#mapBy",
      "fields": [
        {
          "name": "name",
          "value": "mapBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#mapProperty",
      "fields": [
        {
          "name": "name",
          "value": "mapProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return the a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#filterBy",
      "fields": [
        {
          "name": "name",
          "value": "filterBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#filterProperty",
      "fields": [
        {
          "name": "name",
          "value": "filterProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#rejectBy",
      "fields": [
        {
          "name": "name",
          "value": "rejectBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#rejectProperty",
      "fields": [
        {
          "name": "name",
          "value": "rejectProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#findBy",
      "fields": [
        {
          "name": "name",
          "value": "findBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#findProperty",
      "fields": [
        {
          "name": "name",
          "value": "findProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#every",
      "fields": [
        {
          "name": "name",
          "value": "every",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#everyBy",
      "fields": [
        {
          "name": "name",
          "value": "everyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#everyProperty",
      "fields": [
        {
          "name": "name",
          "value": "everyProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#isEvery",
      "fields": [
        {
          "name": "name",
          "value": "isEvery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for all items in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#any",
      "fields": [
        {
          "name": "name",
          "value": "any",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#some",
      "fields": [
        {
          "name": "name",
          "value": "some",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">if</span> (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#isAny",
      "fields": [
        {
          "name": "name",
          "value": "isAny",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the passed property resolves to <code>true</code> for any item in\nthe enumerable. This method is often simpler/faster than using a callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#anyBy",
      "fields": [
        {
          "name": "name",
          "value": "anyBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#someProperty",
      "fields": [
        {
          "name": "name",
          "value": "someProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#reduce",
      "fields": [
        {
          "name": "name",
          "value": "reduce",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(previousValue, item, index, enumerable)</span>;</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&#39;s part of the\nspec. Sorry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#invoke",
      "fields": [
        {
          "name": "name",
          "value": "invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#toArray",
      "fields": [
        {
          "name": "name",
          "value": "toArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#compact",
      "fields": [
        {
          "name": "name",
          "value": "compact",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-literal\">undefined</span>];\narr.compact();  <span class=\"hljs-comment\">// ['a', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#without",
      "fields": [
        {
          "name": "name",
          "value": "without",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'c'</span>];\narr.without(<span class=\"hljs-string\">'a'</span>);  <span class=\"hljs-comment\">// ['b', 'c']</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#uniq",
      "fields": [
        {
          "name": "name",
          "value": "uniq",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'b'</span>];\narr.uniq();  <span class=\"hljs-comment\">// ['a', 'b']</span></pre></td>      </tr>    </table>  </div></div><p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#addEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "addEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#removeEnumerableObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeEnumerableObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes a registered enumerable observer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#enumerableContentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#enumerableContentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "enumerableContentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#sortBy",
      "fields": [
        {
          "name": "name",
          "value": "sortBy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#addObject",
      "fields": [
        {
          "name": "name",
          "value": "addObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#addObjects",
      "fields": [
        {
          "name": "name",
          "value": "addObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#removeObject",
      "fields": [
        {
          "name": "name",
          "value": "removeObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#removeObjects",
      "fields": [
        {
          "name": "name",
          "value": "removeObjects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable from the receiver.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#copy",
      "fields": [
        {
          "name": "name",
          "value": "copy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to return a copy of the receiver. Default implementation raises\nan exception.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#frozenCopy",
      "fields": [
        {
          "name": "name",
          "value": "frozenCopy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the object implements <code>Ember.Freezable</code>, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.</p>\n<p>Raises an exception if you try to call this method on a object that does\nnot support freezing.</p>\n<p>You should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#freeze",
      "fields": [
        {
          "name": "name",
          "value": "freeze",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Freezes the object. Once this method has been called the object should\nno longer allow any properties to be edited.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#clear",
      "fields": [
        {
          "name": "name",
          "value": "clear",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Clears the set. This is useful if you want to reuse an existing set\nwithout having to recreate it.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.length;  <span class=\"hljs-comment\">// 3</span>\ncolors.clear();\ncolors.length;  <span class=\"hljs-comment\">// 0</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#isEqual",
      "fields": [
        {
          "name": "name",
          "value": "isEqual",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns true if the passed object is also an enumerable that contains the\nsame objects as the receiver.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>],\n    same_colors = <span class=\"hljs-keyword\">new</span> Ember.Set(colors);\n\nsame_colors.isEqual(colors);               <span class=\"hljs-comment\">// true</span>\nsame_colors.isEqual([<span class=\"hljs-string\">\"purple\"</span>, <span class=\"hljs-string\">\"brown\"</span>]);  <span class=\"hljs-comment\">// false</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#add",
      "fields": [
        {
          "name": "name",
          "value": "add",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an object to the set. Only non-<code>null</code> objects can be added to a set\nand those can only be added once. If the object is already in the set or\nthe passed value is null this method will have no effect.</p>\n<p>This is an alias for <code>Ember.MutableEnumerable.addObject()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.add(<span class=\"hljs-string\">\"blue\"</span>);     <span class=\"hljs-comment\">// [\"blue\"]</span>\ncolors.add(<span class=\"hljs-string\">\"blue\"</span>);     <span class=\"hljs-comment\">// [\"blue\"]</span>\ncolors.add(<span class=\"hljs-string\">\"red\"</span>);      <span class=\"hljs-comment\">// [\"blue\", \"red\"]</span>\ncolors.add(<span class=\"hljs-literal\">null</span>);       <span class=\"hljs-comment\">// [\"blue\", \"red\"]</span>\ncolors.add(<span class=\"hljs-literal\">undefined</span>);  <span class=\"hljs-comment\">// [\"blue\", \"red\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the object from the set if it is found. If you pass a <code>null</code> value\nor an object that is already not in the set, this method will have no\neffect. This is an alias for <code>Ember.MutableEnumerable.removeObject()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.remove(<span class=\"hljs-string\">\"red\"</span>);     <span class=\"hljs-comment\">// [\"blue\", \"green\"]</span>\ncolors.remove(<span class=\"hljs-string\">\"purple\"</span>);  <span class=\"hljs-comment\">// [\"blue\", \"green\"]</span>\ncolors.remove(<span class=\"hljs-literal\">null</span>);      <span class=\"hljs-comment\">// [\"blue\", \"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#pop",
      "fields": [
        {
          "name": "name",
          "value": "pop",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the last element from the set and returns it, or <code>null</code> if it&#39;s empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.pop();  <span class=\"hljs-comment\">// \"blue\"</span>\ncolors.pop();  <span class=\"hljs-comment\">// \"green\"</span>\ncolors.pop();  <span class=\"hljs-comment\">// null</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#push",
      "fields": [
        {
          "name": "name",
          "value": "push",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Inserts the given object on to the end of the set. It returns\nthe set itself.</p>\n<p>This is an alias for <code>Ember.MutableEnumerable.addObject()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.push(<span class=\"hljs-string\">\"red\"</span>);   <span class=\"hljs-comment\">// [\"red\"]</span>\ncolors.push(<span class=\"hljs-string\">\"green\"</span>); <span class=\"hljs-comment\">// [\"red\", \"green\"]</span>\ncolors.push(<span class=\"hljs-string\">\"blue\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#shift",
      "fields": [
        {
          "name": "name",
          "value": "shift",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the last element from the set and returns it, or <code>null</code> if it&#39;s empty.</p>\n<p>This is an alias for <code>Ember.Set.pop()</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.shift();  <span class=\"hljs-comment\">// \"blue\"</span>\ncolors.shift();  <span class=\"hljs-comment\">// \"green\"</span>\ncolors.shift();  <span class=\"hljs-comment\">// null</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#unshift",
      "fields": [
        {
          "name": "name",
          "value": "unshift",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Inserts the given object on to the end of the set. It returns\nthe set itself.</p>\n<p>This is an alias of <code>Ember.Set.push()</code></p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.unshift(<span class=\"hljs-string\">\"red\"</span>);    <span class=\"hljs-comment\">// [\"red\"]</span>\ncolors.unshift(<span class=\"hljs-string\">\"green\"</span>);  <span class=\"hljs-comment\">// [\"red\", \"green\"]</span>\ncolors.unshift(<span class=\"hljs-string\">\"blue\"</span>);   <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#addEach",
      "fields": [
        {
          "name": "name",
          "value": "addEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds each object in the passed enumerable to the set.</p>\n<p>This is an alias of <code>Ember.MutableEnumerable.addObjects()</code></p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set();\ncolors.addEach([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);  <span class=\"hljs-comment\">// [\"red\", \"green\", \"blue\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#removeEach",
      "fields": [
        {
          "name": "name",
          "value": "removeEach",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes each object in the passed enumerable to the set.</p>\n<p>This is an alias of <code>Ember.MutableEnumerable.removeObjects()</code></p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> colors = <span class=\"hljs-keyword\">new</span> Ember.Set([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);\ncolors.removeEach([<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"blue\"</span>]);  <span class=\"hljs-comment\">//  [\"green\"]</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#firstObject",
      "fields": [
        {
          "name": "name",
          "value": "firstObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// 'a'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'firstObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#lastObject",
      "fields": [
        {
          "name": "name",
          "value": "lastObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// 'c'</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [];\narr.get(<span class=\"hljs-string\">'lastObject'</span>);  <span class=\"hljs-comment\">// undefined</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#[]",
      "fields": [
        {
          "name": "name",
          "value": "[]",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will trigger anytime the enumerable&#39;s content changes.\nYou can observe this property to be notified of changes to the enumerable&#39;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#hasEnumerableObservers",
      "fields": [
        {
          "name": "name",
          "value": "hasEnumerableObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#isFrozen",
      "fields": [
        {
          "name": "name",
          "value": "isFrozen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set to <code>true</code> when the object is frozen. Use this property to detect\nwhether your object is frozen or not.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Set#length",
      "fields": [
        {
          "name": "name",
          "value": "length",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will change as the number of objects in the set changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Set",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String",
      "fields": [
        {
          "name": "name",
          "value": "Ember.String",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines string helper methods including string formatting and localization.\nUnless <code>Ember.EXTEND_PROTOTYPES.String</code> is <code>false</code> these methods will also be\nadded to the <code>String.prototype</code> as well.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.String#fmt",
      "fields": [
        {
          "name": "name",
          "value": "fmt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Apply formatting options to the string. This will look for occurrences\nof &quot;%@&quot; in your string and substitute them with the arguments you pass into\nthis method. If you want to control the specific order of replacement,\nyou can add a number after the key as well to indicate which argument\nyou want to insert.</p>\n<p>Ordered insertions are most useful when building loc strings where values\nyou need to insert may appear in different orders.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">\"Hello %@ %@\"</span>.fmt(<span class=\"hljs-string\">'John'</span>, <span class=\"hljs-string\">'Doe'</span>);     <span class=\"hljs-comment\">// \"Hello John Doe\"</span>\n<span class=\"hljs-string\">\"Hello %@2, %@1\"</span>.fmt(<span class=\"hljs-string\">'John'</span>, <span class=\"hljs-string\">'Doe'</span>);  <span class=\"hljs-comment\">// \"Hello Doe, John\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#loc",
      "fields": [
        {
          "name": "name",
          "value": "loc",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Formats the passed string, but first looks up the string in the localized\nstrings hash. This is a convenient way to localize text. See\n<code>Ember.String.fmt()</code> for more information on formatting.</p>\n<p>Note that it is traditional but not required to prefix localized string\nkeys with an underscore or other character so you can easily identify\nlocalized strings.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.STRINGS = {\n  <span class=\"hljs-string\">'_Hello World'</span>: <span class=\"hljs-string\">'Bonjour le monde'</span>,\n  <span class=\"hljs-string\">'_Hello %@ %@'</span>: <span class=\"hljs-string\">'Bonjour %@ %@'</span>\n};\n\nEmber.String.loc(<span class=\"hljs-string\">\"_Hello World\"</span>);  <span class=\"hljs-comment\">// 'Bonjour le monde';</span>\nEmber.String.loc(<span class=\"hljs-string\">\"_Hello %@ %@\"</span>, [<span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-string\">\"Smith\"</span>]);  <span class=\"hljs-comment\">// \"Bonjour John Smith\";</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#w",
      "fields": [
        {
          "name": "name",
          "value": "w",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Splits a string into separate units separated by spaces, eliminating any\nempty strings in the process. This is a convenience method for split that\nis mostly useful when applied to the <code>String.prototype</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.String.w(<span class=\"hljs-string\">\"alpha beta gamma\"</span>).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(key);\n});\n\n<span class=\"hljs-comment\">// &gt; alpha</span>\n<span class=\"hljs-comment\">// &gt; beta</span>\n<span class=\"hljs-comment\">// &gt; gamma</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#decamelize",
      "fields": [
        {
          "name": "name",
          "value": "decamelize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Converts a camelized string into all lower case separated by underscores.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'innerHTML'</span>.decamelize();           <span class=\"hljs-comment\">// 'inner_html'</span>\n<span class=\"hljs-string\">'action_name'</span>.decamelize();        <span class=\"hljs-comment\">// 'action_name'</span>\n<span class=\"hljs-string\">'css-class-name'</span>.decamelize();     <span class=\"hljs-comment\">// 'css-class-name'</span>\n<span class=\"hljs-string\">'my favorite items'</span>.decamelize();  <span class=\"hljs-comment\">// 'my favorite items'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#dasherize",
      "fields": [
        {
          "name": "name",
          "value": "dasherize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces underscores, spaces, or camelCase with dashes.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'innerHTML'</span>.dasherize();          <span class=\"hljs-comment\">// 'inner-html'</span>\n<span class=\"hljs-string\">'action_name'</span>.dasherize();        <span class=\"hljs-comment\">// 'action-name'</span>\n<span class=\"hljs-string\">'css-class-name'</span>.dasherize();     <span class=\"hljs-comment\">// 'css-class-name'</span>\n<span class=\"hljs-string\">'my favorite items'</span>.dasherize();  <span class=\"hljs-comment\">// 'my-favorite-items'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#camelize",
      "fields": [
        {
          "name": "name",
          "value": "camelize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the lowerCamelCase form of a string.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'innerHTML'</span>.camelize();          <span class=\"hljs-comment\">// 'innerHTML'</span>\n<span class=\"hljs-string\">'action_name'</span>.camelize();        <span class=\"hljs-comment\">// 'actionName'</span>\n<span class=\"hljs-string\">'css-class-name'</span>.camelize();     <span class=\"hljs-comment\">// 'cssClassName'</span>\n<span class=\"hljs-string\">'my favorite items'</span>.camelize();  <span class=\"hljs-comment\">// 'myFavoriteItems'</span>\n<span class=\"hljs-string\">'My Favorite Items'</span>.camelize();  <span class=\"hljs-comment\">// 'myFavoriteItems'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#classify",
      "fields": [
        {
          "name": "name",
          "value": "classify",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the UpperCamelCase form of a string.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'innerHTML'</span>.classify();          <span class=\"hljs-comment\">// 'InnerHTML'</span>\n<span class=\"hljs-string\">'action_name'</span>.classify();        <span class=\"hljs-comment\">// 'ActionName'</span>\n<span class=\"hljs-string\">'css-class-name'</span>.classify();     <span class=\"hljs-comment\">// 'CssClassName'</span>\n<span class=\"hljs-string\">'my favorite items'</span>.classify();  <span class=\"hljs-comment\">// 'MyFavoriteItems'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#underscore",
      "fields": [
        {
          "name": "name",
          "value": "underscore",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>More general than decamelize. Returns the lower_case_and_underscored\nform of a string.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'innerHTML'</span>.underscore();          <span class=\"hljs-comment\">// 'inner_html'</span>\n<span class=\"hljs-string\">'action_name'</span>.underscore();        <span class=\"hljs-comment\">// 'action_name'</span>\n<span class=\"hljs-string\">'css-class-name'</span>.underscore();     <span class=\"hljs-comment\">// 'css_class_name'</span>\n<span class=\"hljs-string\">'my favorite items'</span>.underscore();  <span class=\"hljs-comment\">// 'my_favorite_items'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#capitalize",
      "fields": [
        {
          "name": "name",
          "value": "capitalize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the Capitalized form of a string</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'innerHTML'</span>.capitalize()         <span class=\"hljs-comment\">// 'InnerHTML'</span>\n<span class=\"hljs-string\">'action_name'</span>.capitalize()       <span class=\"hljs-comment\">// 'Action_name'</span>\n<span class=\"hljs-string\">'css-class-name'</span>.capitalize()    <span class=\"hljs-comment\">// 'Css-class-name'</span>\n<span class=\"hljs-string\">'my favorite items'</span>.capitalize() <span class=\"hljs-comment\">// 'My favorite items'</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.String#htmlSafe",
      "fields": [
        {
          "name": "name",
          "value": "htmlSafe",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Mark a string as safe for unescaped output with Handlebars. If you\nreturn HTML from a Handlebars helper, use this function to\nensure Handlebars does not escape the HTML.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.String.htmlSafe(<span class=\"hljs-string\">'&lt;div&gt;someString&lt;/div&gt;'</span>)</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.String",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SubArray",
      "fields": [
        {
          "name": "name",
          "value": "Ember.SubArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An <code>Ember.SubArray</code> tracks an array in a way similar to, but more specialized\nthan, <code>Ember.TrackedArray</code>.  It is useful for keeping track of the indexes of\nitems within a filtered array.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.SubArray#addItem",
      "fields": [
        {
          "name": "name",
          "value": "addItem",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Track that an item was added to the tracked array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SubArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.SubArray#removeItem",
      "fields": [
        {
          "name": "name",
          "value": "removeItem",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Track that an item was removed from the tracked array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.SubArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray",
      "fields": [
        {
          "name": "name",
          "value": "Ember.TrackedArray",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An <code>Ember.TrackedArray</code> tracks array operations.  It&#39;s useful when you want to\nlazily compute the indexes of items in an array after they&#39;ve been shifted by\nsubsequent operations.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray#addItems",
      "fields": [
        {
          "name": "name",
          "value": "addItems",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Track that <code>newItems</code> were added to the tracked array at <code>index</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TrackedArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray#removeItems",
      "fields": [
        {
          "name": "name",
          "value": "removeItems",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Track that <code>count</code> items were removed at <code>index</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TrackedArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Apply all operations, reducing them to retain:n, for <code>n</code>, the number of\nitems in the array.</p>\n<p><code>callback</code> will be called for each operation and will be passed the following arguments:</p>\n<ul>\n<li>{array} items The items for the given operation</li>\n<li>{number} offset The computed offset of the items, ie the index in the\narray of the first item for this operation.</li>\n<li>{string} operation The type of the operation.  One of\n<code>Ember.TrackedArray.{RETAIN, DELETE, INSERT}</code></li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TrackedArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray#_findArrayOperation",
      "fields": [
        {
          "name": "name",
          "value": "_findArrayOperation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return an <code>ArrayOperationMatch</code> for the operation that contains the item at <code>index</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TrackedArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray#ArrayOperation",
      "fields": [
        {
          "name": "name",
          "value": "ArrayOperation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Internal data structure to represent an array operation.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TrackedArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TrackedArray#ArrayOperationMatch",
      "fields": [
        {
          "name": "name",
          "value": "ArrayOperationMatch",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Internal data structure used to include information when looking up operations\nby item index.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TrackedArray",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport",
      "fields": [
        {
          "name": "name",
          "value": "Ember.TextSupport",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>TextSupport</code> is a shared mixin used by both <code>Ember.TextField</code> and\n<code>Ember.TextArea</code>. <code>TextSupport</code> adds a number of methods that allow you to\nspecify a controller action to invoke when a certain event is fired on your\ntext field or textarea. The specifed controller action would get the current\nvalue of the field passed in as the only argument unless the value of\nthe field is empty. In that case, the instance of the field itself is passed\nin as the only argument.</p>\n<p>Let&#39;s use the pressing of the escape key as an example. If you wanted to\ninvoke a controller action when a user presses the escape key while on your\nfield, you would use the <code>escape-press</code> attribute on your field like so:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span>}}</span><span class=\"xml\">\n\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">escape-press</span>='<span class=\"hljs-variable\">alertUser</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">    App = Ember.Application.create();\n\n    App.ApplicationController = Ember.Controller.extend({\n      actions: {\n        alertUser: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">( currentValue )</span> </span>{\n          alert( <span class=\"hljs-string\">'escape pressed, current value: '</span> + currentValue );\n        }\n      }\n    });</pre></td>      </tr>    </table>  </div></div><p>The following chart is a visual representation of what takes place when the\nescape key is pressed in this scenario:</p>\n<p>The Template\n+---------------------------+\n|                           |\n| escape-press=&#39;alertUser&#39;  |\n|                           |          TextSupport Mixin\n+----+----------------------+          +-------------------------------+\n     |                                 | cancel method                 |\n     |      escape button pressed      |                               |\n     +-------------------------------&gt; | checks for the <code>escape-press</code> |\n                                       | attribute and pulls out the   |\n     +-------------------------------+ | <code>alertUser</code> value             |\n     |     action name &#39;alertUser&#39;     +-------------------------------+\n     |     sent to controller\n     v\nController\n+------------------------------------------ +\n|                                           |\n|  actions: {                               |\n|     alertUser: function( currentValue ){  |\n|       alert( &#39;the esc key was pressed!&#39; ) |\n|     }                                     |\n|  }                                        |\n|                                           |\n+-------------------------------------------+</p>\n<p>Here are the events that we currently support along with the name of the\nattribute you would need to use on your field. To reiterate, you would use the\nattribute name like so:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">attribute-name</span>='<span class=\"hljs-variable\">controllerAction</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>+--------------------+----------------+\n|                    |                |\n| event              | attribute name |\n+--------------------+----------------+\n| new line inserted  | insert-newline |\n|                    |                |\n| enter key pressed  | insert-newline |\n|                    |                |\n| cancel key pressed | escape-press   |\n|                    |                |\n| focusin            | focus-in       |\n|                    |                |\n| focusout           | focus-out      |\n|                    |                |\n| keypress           | key-press      |\n|                    |                |\n| keyup              | key-up         |\n|                    |                |\n| keydown            | key-down       |\n+--------------------+----------------+</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#triggerAction",
      "fields": [
        {
          "name": "name",
          "value": "triggerAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  action: <span class=\"hljs-string\">'save'</span>,\n  actionContext: Ember.computed.alias(<span class=\"hljs-string\">'context'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>,\n      target: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controller'</span>),\n      actionContext: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'context'</span>)\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#_applyAttributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "_applyAttributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the view&#39;s attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#setUnknownProperty",
      "fields": [
        {
          "name": "name",
          "value": "setUnknownProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>We&#39;re using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren&#39;t defined on a view at initialization time.</p>\n<p>Note: setUnknownProperty will only be called once for each property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#_applyClassNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "_applyClassNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates over the view&#39;s <code>classNameBindings</code> array, inserts the value\nof the specified property into the <code>classNames</code> array, then creates an\nobserver to update the view&#39;s element if the bound property ever changes\nin the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#removeAllChildren",
      "fields": [
        {
          "name": "name",
          "value": "removeAllChildren",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes all children from the <code>parentView</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#nearestChildOf",
      "fields": [
        {
          "name": "name",
          "value": "nearestChildOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor whose parent is an instance of\n<code>klass</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#nearestInstanceOf",
      "fields": [
        {
          "name": "name",
          "value": "nearestInstanceOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called on your view when it should push strings of HTML into a\n<code>Ember.RenderBuffer</code>. Most users will want to override the <code>template</code>\nor <code>templateName</code> properties instead of this method.</p>\n<p>By default, <code>Ember.View</code> will look for a function in the <code>template</code>\nproperty and invoke it with the value of <code>context</code>. The value of\n<code>context</code> will be the view&#39;s controller unless you override it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#insertNewline",
      "fields": [
        {
          "name": "name",
          "value": "insertNewline",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when either the <code>enter</code>\nkey is pressed or, in the case of the field being a textarea, when a newline\nis inserted. To use this method, give your field an <code>insert-newline</code>\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.</p>\n<p>For an example on how to use the <code>insert-newline</code> attribute, please\nreference the example near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#cancel",
      "fields": [
        {
          "name": "name",
          "value": "cancel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when the escape button\nis pressed. To use this method, give your field an <code>escape-press</code>\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.</p>\n<p>For an example on how to use the <code>escape-press</code> attribute, please reference\nthe example near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#focusIn",
      "fields": [
        {
          "name": "name",
          "value": "focusIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a field receives\nfocus. To use this method, give your field a <code>focus-in</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>focus-in</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#focusOut",
      "fields": [
        {
          "name": "name",
          "value": "focusOut",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a field loses\nfocus. To use this method, give your field a <code>focus-out</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>focus-out</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#keyPress",
      "fields": [
        {
          "name": "name",
          "value": "keyPress",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key is pressed.\nTo use this method, give your field a <code>key-press</code> attribute. The value of\nthat attribute should be the name of the action in your controller you\nthat wish to invoke.</p>\n<p>For an example on how to use the <code>key-press</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#keyUp",
      "fields": [
        {
          "name": "name",
          "value": "keyUp",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key-up event is\nfired. To use this method, give your field a <code>key-up</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>key-up</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#keyDown",
      "fields": [
        {
          "name": "name",
          "value": "keyDown",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key-down event is\nfired. To use this method, give your field a <code>key-down</code> attribute. The value\nof that attribute should be the name of the action in your controller that\nyou wish to invoke.</p>\n<p>For an example on how to use the <code>key-down</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#attributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "attributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the type attribute to the element</span>\n<span class=\"hljs-comment\">// with the value \"button\", like &lt;div type=\"button\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'type'</span>],\n  type: <span class=\"hljs-string\">'button'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as an attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Renders something like &lt;div enabled=\"enabled\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'enabled'</span>],\n  enabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#classNames",
      "fields": [
        {
          "name": "name",
          "value": "classNames",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Standard CSS class names to apply to the view&#39;s outer element. This\nproperty automatically inherits any class names defined by the view&#39;s\nsuperclasses as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#classNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "classNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'high' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'priority'</span>]\n  priority: <span class=\"hljs-string\">'high'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'is-urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent:urgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This list of properties is inherited from the view&#39;s superclasses as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#instrumentDisplay",
      "fields": [
        {
          "name": "name",
          "value": "instrumentDisplay",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to identify this view during debugging</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#action",
      "fields": [
        {
          "name": "name",
          "value": "action",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The action to be sent when the user presses the return key.</p>\n<p>This is similar to the <code>{{action}}</code> helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#onEvent",
      "fields": [
        {
          "name": "name",
          "value": "onEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The event that should send the action.</p>\n<p>Options are:</p>\n<ul>\n<li><code>enter</code>: the user pressed enter</li>\n<li><code>keyPress</code>: the user pressed a key</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextSupport#bubbles",
      "fields": [
        {
          "name": "name",
          "value": "bubbles",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Whether the <code>keyUp</code> event that triggers an <code>action</code> to be sent continues\npropagating to other views.</p>\n<p>By default, when the user presses the return key on their keyboard and\nthe text field has an <code>action</code> set, the action will be sent to the view&#39;s\ncontroller and the key event will stop propagating.</p>\n<p>If you would like parent views to receive the <code>keyUp</code> event even after an\naction has been dispatched, set <code>bubbles</code> to true.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.ViewTargetActionSupport</code> is a mixin that can be included in a\nview class to add a <code>triggerAction</code> method with semantics similar to\nthe Handlebars <code>{{action}}</code> helper. It provides intelligent defaults\nfor the action&#39;s target: the view&#39;s controller; and the context that is\nsent with the action: the view&#39;s context.</p>\n<p>Note: In normal Ember usage, the <code>{{action}}</code> helper is usually the best\nchoice. This mixin is most often useful when you are doing more complex\nevent handling in custom View subclasses.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: <span class=\"hljs-string\">'save'</span>,\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>action</code> can be provided as properties of an optional object argument\nto <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#triggerAction",
      "fields": [
        {
          "name": "name",
          "value": "triggerAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  action: <span class=\"hljs-string\">'save'</span>,\n  actionContext: Ember.computed.alias(<span class=\"hljs-string\">'context'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>,\n      target: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controller'</span>),\n      actionContext: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'context'</span>)\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#removeChild",
      "fields": [
        {
          "name": "name",
          "value": "removeChild",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the child view from the parent view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#createChildView",
      "fields": [
        {
          "name": "name",
          "value": "createChildView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding <code>createChildViews()</code>. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#childViews",
      "fields": [
        {
          "name": "name",
          "value": "childViews",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Array of child views. You should never edit this array directly.\nInstead, use <code>appendChild</code> and <code>removeFromParent</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#context",
      "fields": [
        {
          "name": "name",
          "value": "context",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The object from which templates should access properties.</p>\n<p>This object will be passed to the template function each time the render\nmethod is called, but it is up to the individual function to decide what\nto do with it.</p>\n<p>By default, this will be the view&#39;s controller.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#_context",
      "fields": [
        {
          "name": "name",
          "value": "_context",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Private copy of the view&#39;s template context. This can be set directly\nby Handlebars without triggering the observer that causes the view\nto be re-rendered.</p>\n<p>The context of a view is looked up as follows:</p>\n<ol>\n<li>Supplied context (usually by Handlebars)</li>\n<li>Specified controller</li>\n<li><code>parentView</code>&#39;s context (for a child of a ContainerView)</li>\n</ol>\n<p>The code in Handlebars that overrides the <code>_context</code> property first\nchecks to see whether the view has a specified controller. This is\nsomething of a hack and should be revisited.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#controller",
      "fields": [
        {
          "name": "name",
          "value": "controller",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The controller managing this view. If this property is set, it will be\nmade available for use by the template.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#target",
      "fields": [
        {
          "name": "name",
          "value": "target",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ViewTargetActionSupport#actionContext",
      "fields": [
        {
          "name": "name",
          "value": "actionContext",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ViewTargetActionSupport",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher",
      "fields": [
        {
          "name": "name",
          "value": "Ember.EventDispatcher",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.EventDispatcher</code> handles delegating browser events to their\ncorresponding <code>Ember.Views.</code> For example, when you click on a view,\n<code>Ember.EventDispatcher</code> ensures that that view&#39;s <code>mouseDown</code> method gets\ncalled.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#_isVisibleDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_isVisibleDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the view&#39;s <code>isVisible</code> property changes, toggle the visibility\nelement of the actual DOM element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#parsePropertyPath",
      "fields": [
        {
          "name": "name",
          "value": "parsePropertyPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Parse a path and return an object which holds the parsed properties.</p>\n<p>For example a path like &quot;content.isEnabled:enabled:disabled&quot; will return the\nfollowing object:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{\n  path: <span class=\"hljs-string\">\"content.isEnabled\"</span>,\n  className: <span class=\"hljs-string\">\"enabled\"</span>,\n  falsyClassName: <span class=\"hljs-string\">\"disabled\"</span>,\n  classNames: <span class=\"hljs-string\">\":enabled:disabled\"</span>\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#classStringForValue",
      "fields": [
        {
          "name": "name",
          "value": "classStringForValue",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Get the class name for a given value, based on the path, optional\n<code>className</code> and optional <code>falsyClassName</code>.</p>\n<ul>\n<li>if a <code>className</code> or <code>falsyClassName</code> has been specified:<ul>\n<li>if the value is truthy and <code>className</code> has been specified,\n<code>className</code> is returned</li>\n<li>if the value is falsy and <code>falsyClassName</code> has been specified,\n<code>falsyClassName</code> is returned</li>\n<li>otherwise <code>null</code> is returned</li>\n</ul>\n</li>\n<li>if the value is <code>true</code>, the dasherized last part of the supplied path\nis returned</li>\n<li>if the value is not <code>false</code>, <code>undefined</code> or <code>null</code>, the <code>value</code>\nis returned</li>\n<li>if none of the above rules apply, <code>null</code> is returned</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#setup",
      "fields": [
        {
          "name": "name",
          "value": "setup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets up event listeners for standard browser events.</p>\n<p>This will be called after the browser sends a <code>DOMContentReady</code> event. By\ndefault, it will set up all of the listeners on the document body. If you\nwould like to register the listeners on a different element, set the event\ndispatcher&#39;s <code>root</code> property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#setupHandler",
      "fields": [
        {
          "name": "name",
          "value": "setupHandler",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers an event listener on the rootElement. If the given event is\ntriggered, the provided event handler will be triggered on the target view.</p>\n<p>If the target view does not implement the event handler, or if the handler\nreturns <code>false</code>, the parent view will be called. The event will continue to\nbubble to each successive parent view until it reaches the top.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#isVisible",
      "fields": [
        {
          "name": "name",
          "value": "isVisible",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If <code>false</code>, the view will appear hidden in DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#registeredActions",
      "fields": [
        {
          "name": "name",
          "value": "registeredActions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global action id hash.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#events",
      "fields": [
        {
          "name": "name",
          "value": "events",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The set of events names (and associated handler function names) to be setup\nand dispatched by the <code>EventDispatcher</code>. Custom events can added to this list at setup\ntime, generally via the <code>Ember.Application.customEvents</code> hash. Only override this\ndefault set to prevent the EventDispatcher from listening on some events all together.</p>\n<p>This set will be modified by <code>setup</code> to also include any events added at that time.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#rootElement",
      "fields": [
        {
          "name": "name",
          "value": "rootElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The root DOM element to which event listeners should be attached. Event\nlisteners will be attached to the document unless this is overridden.</p>\n<p>Can be specified as a DOMElement or a selector string.</p>\n<p>The default body is a string since this may be evaluated before document.body\nexists in the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.EventDispatcher#canDispatchToEventManager",
      "fields": [
        {
          "name": "name",
          "value": "canDispatchToEventManager",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>It enables events to be dispatched to the view&#39;s <code>eventManager.</code> When present,\nthis object takes precedence over handling of events on the view itself.</p>\n<p>Note that most Ember applications do not use this feature. If your app also\ndoes not use it, consider setting this property to false to gain some performance\nimprovement by allowing the EventDispatcher to skip the search for the\n<code>eventManager</code> on the view tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> EventDispatcher = Em.EventDispatcher.extend({\n  events: {\n      click       : <span class=\"hljs-string\">'click'</span>,\n      focusin     : <span class=\"hljs-string\">'focusIn'</span>,\n      focusout    : <span class=\"hljs-string\">'focusOut'</span>,\n      change      : <span class=\"hljs-string\">'change'</span>\n  },\n  canDispatchToEventManager: <span class=\"hljs-literal\">false</span>\n});\ncontainer.register(<span class=\"hljs-string\">'event_dispatcher:main'</span>, EventDispatcher);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.EventDispatcher",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Checkbox",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The internal class used to create text inputs when the <code>{{input}}</code>\nhelper is used with <code>type</code> of <code>checkbox</code>.</p>\n<p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_input\">handlebars.helpers.input</a>  for usage details.</p>\n<h2 id=\"direct-manipulation-of-checked-\">Direct manipulation of <code>checked</code></h2>\n<p>The <code>checked</code> attribute of an <code>Ember.Checkbox</code> object should always be set\nthrough the Ember object or by interacting with its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating the value of the\ncheckbox via jQuery will result in the checked value of the object and its\nelement losing synchronization.</p>\n<h2 id=\"layout-and-layoutname-properties\">Layout and LayoutName properties</h2>\n<p>Because HTML <code>input</code> elements are self closing <code>layout</code> and <code>layoutName</code>\nproperties will not be applied. See <a href=\"/api/classes/Ember.View.html\">Ember.View</a>&#39;s\nlayout section for more information.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#renderBuffer",
      "fields": [
        {
          "name": "name",
          "value": "renderBuffer",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.RenderBuffer</code> gathers information regarding the view and generates the\nfinal representation. <code>Ember.RenderBuffer</code> will generate HTML which can be pushed\nto the DOM.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> buffer = <span class=\"hljs-keyword\">new</span> Ember.RenderBuffer(<span class=\"hljs-string\">'div'</span>, contextualElement);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#push",
      "fields": [
        {
          "name": "name",
          "value": "push",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds a string of HTML to the <code>RenderBuffer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#addClass",
      "fields": [
        {
          "name": "name",
          "value": "addClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds a class to the buffer, which will be rendered to the class attribute.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#id",
      "fields": [
        {
          "name": "name",
          "value": "id",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the elementID to be used for the element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#attr",
      "fields": [
        {
          "name": "name",
          "value": "attr",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an attribute which will be rendered to the element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#removeAttr",
      "fields": [
        {
          "name": "name",
          "value": "removeAttr",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an attribute from the list of attributes to render.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#prop",
      "fields": [
        {
          "name": "name",
          "value": "prop",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds a property which will be rendered to the element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#removeProp",
      "fields": [
        {
          "name": "name",
          "value": "removeProp",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an property from the list of properties to render.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#style",
      "fields": [
        {
          "name": "name",
          "value": "style",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds a style to the style attribute which will be rendered to the element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#string",
      "fields": [
        {
          "name": "name",
          "value": "string",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Generates the HTML content for this buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#getViewRange",
      "fields": [
        {
          "name": "name",
          "value": "getViewRange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#getViewClientRects",
      "fields": [
        {
          "name": "name",
          "value": "getViewClientRects",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>getViewClientRects</code> provides information about the position of the border\nbox edges of a view relative to the viewport.</p>\n<p>It is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#getViewBoundingClientRect",
      "fields": [
        {
          "name": "name",
          "value": "getViewBoundingClientRect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>getViewBoundingClientRect</code> provides information about the position of the\nbounding border box edges of a view relative to the viewport.</p>\n<p>It is only intended to be used by development tools like the Ember Inpsector\nand may not work on older browsers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The id in of the element, to be applied in the id attribute.</p>\n<p>You should not set this property yourself, rather, you should use\nthe <code>id()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#elementClasses",
      "fields": [
        {
          "name": "name",
          "value": "elementClasses",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An internal set used to de-dupe class names when <code>addClass()</code> is\nused. After each call to <code>addClass()</code>, the <code>classes</code> property\nwill be updated.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#classes",
      "fields": [
        {
          "name": "name",
          "value": "classes",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Array of class names which will be applied in the class attribute.</p>\n<p>You can use <code>setClasses()</code> to set this property directly. If you\nuse <code>addClass()</code>, it will be maintained for you.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#elementAttributes",
      "fields": [
        {
          "name": "name",
          "value": "elementAttributes",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hash keyed on the name of the attribute and whose value will be\napplied to that attribute. For example, if you wanted to apply a\n<code>data-view=&quot;Foo.bar&quot;</code> property to an element, you would set the\nelementAttributes hash to <code>{&#39;data-view&#39;:&#39;Foo.bar&#39;}</code>.</p>\n<p>You should not maintain this hash yourself, rather, you should use\nthe <code>attr()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#elementProperties",
      "fields": [
        {
          "name": "name",
          "value": "elementProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hash keyed on the name of the properties and whose value will be\napplied to that property. For example, if you wanted to apply a\n<code>checked=true</code> property to an element, you would set the\nelementProperties hash to <code>{&#39;checked&#39;:true}</code>.</p>\n<p>You should not maintain this hash yourself, rather, you should use\nthe <code>prop()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#elementTag",
      "fields": [
        {
          "name": "name",
          "value": "elementTag",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The tagname of the element an instance of <code>Ember.RenderBuffer</code> represents.</p>\n<p>Usually, this gets set as the first parameter to <code>Ember.RenderBuffer</code>. For\nexample, if you wanted to create a <code>p</code> tag, then you would call</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.RenderBuffer(<span class=\"hljs-string\">'p'</span>, contextualElement)</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#elementStyle",
      "fields": [
        {
          "name": "name",
          "value": "elementStyle",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hash keyed on the name of the style attribute and whose value will\nbe applied to that attribute. For example, if you wanted to apply a\n<code>background-color:black;</code> style to an element, you would set the\nelementStyle hash to <code>{&#39;background-color&#39;:&#39;black&#39;}</code>.</p>\n<p>You should not maintain this hash yourself, rather, you should use\nthe <code>style()</code> method of <code>Ember.RenderBuffer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Checkbox#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Checkbox",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView",
      "fields": [
        {
          "name": "name",
          "value": "Ember.CollectionView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.CollectionView</code> is an <code>Ember.View</code> descendent responsible for managing\na collection (an array or array-like object) by maintaining a child view object\nand associated DOM representation for each item in the array and ensuring\nthat child views and their associated rendered HTML are updated when items in\nthe array are added, removed, or replaced.</p>\n<h2 id=\"setting-content\">Setting content</h2>\n<p>The managed collection of objects is referenced as the <code>Ember.CollectionView</code>\ninstance&#39;s <code>content</code> property.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">someItemsView = Ember.CollectionView.create({\n  content: [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>]\n})</pre></td>      </tr>    </table>  </div></div><p>The view for each item in the collection will have its <code>content</code> property set\nto the item.</p>\n<h2 id=\"specifying-itemviewclass-\">Specifying <code>itemViewClass</code></h2>\n<p>By default the view class for each item in the managed collection will be an\ninstance of <code>Ember.View</code>. You can supply a different class by setting the\n<code>CollectionView</code>&#39;s <code>itemViewClass</code> property.</p>\n<p>Given the following application code:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\nApp.ItemListView = Ember.CollectionView.extend({\n  classNames: [<span class=\"hljs-string\">'a-collection'</span>],\n  content: [<span class=\"hljs-string\">'A'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"the letter: {{view.content}}\"</span>)\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>And a simple application template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> '<span class=\"hljs-variable\">item-list</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The following HTML will result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view a-collection\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>the letter: A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>the letter: B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>the letter: C<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"automatic-matching-of-parent-child-tagnames\">Automatic matching of parent/child tagNames</h2>\n<p>Setting the <code>tagName</code> property of a <code>CollectionView</code> to any of\n&quot;ul&quot;, &quot;ol&quot;, &quot;table&quot;, &quot;thead&quot;, &quot;tbody&quot;, &quot;tfoot&quot;, &quot;tr&quot;, or &quot;select&quot; will result\nin the item views receiving an appropriately matched <code>tagName</code> property.</p>\n<p>Given the following application code:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\nApp.UnorderedListView = Ember.CollectionView.create({\n  tagName: <span class=\"hljs-string\">'ul'</span>,\n  content: [<span class=\"hljs-string\">'A'</span>,<span class=\"hljs-string\">'B'</span>,<span class=\"hljs-string\">'C'</span>],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"the letter: {{view.content}}\"</span>)\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>And a simple application template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> '<span class=\"hljs-variable\">unordered-list-<span class=\"hljs-keyword\">view</span></span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The following HTML will result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view a-collection\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>the letter: A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>the letter: B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>the letter: C<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Additional <code>tagName</code> pairs can be provided by adding to\n<code>Ember.CollectionView.CONTAINER_MAP</code>. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.CollectionView.CONTAINER_MAP[<span class=\"hljs-string\">'article'</span>] = <span class=\"hljs-string\">'section'</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"programmatic-creation-of-child-views\">Programmatic creation of child views</h2>\n<p>For cases where additional customization beyond the use of a single\n<code>itemViewClass</code> or <code>tagName</code> matching is required CollectionView&#39;s\n<code>createChildView</code> method can be overridden:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.CustomCollectionView = Ember.CollectionView.extend({\n  createChildView: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(viewClass, attrs)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (attrs.content.kind == <span class=\"hljs-string\">'album'</span>) {\n      viewClass = App.AlbumView;\n    } <span class=\"hljs-keyword\">else</span> {\n      viewClass = App.SongView;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._super(viewClass, attrs);\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"empty-view\">Empty View</h2>\n<p>You can provide an <code>Ember.View</code> subclass to the <code>Ember.CollectionView</code>\ninstance as its <code>emptyView</code> property. If the <code>content</code> property of a\n<code>CollectionView</code> is set to <code>null</code> or an empty array, an instance of this view\nwill be the <code>CollectionView</code>s only child.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\nApp.ListWithNothing = Ember.CollectionView.create({\n  classNames: [<span class=\"hljs-string\">'nothing'</span>],\n  content: <span class=\"hljs-literal\">null</span>,\n  emptyView: Ember.View.extend({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"The collection is empty\"</span>)\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>And a simple application template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> '<span class=\"hljs-variable\">list-<span class=\"hljs-keyword\">with</span>-nothing</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The following HTML will result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view nothing\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    The collection is empty\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"adding-and-removing-items\">Adding and Removing items</h2>\n<p>The <code>childViews</code> property of a <code>CollectionView</code> should not be directly\nmanipulated. Instead, add, remove, replace items from its <code>content</code> property.\nThis will trigger appropriate changes to its rendered HTML.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a CollectionView</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the content and content observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Instructs each child view to render to the passed render buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#childViewsWillChange",
      "fields": [
        {
          "name": "name",
          "value": "childViewsWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When a child view is removed, destroy its element so that\nit is removed from the DOM.</p>\n<p>The array observer that triggers this action is set up in the\n<code>renderToBuffer</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#childViewsDidChange",
      "fields": [
        {
          "name": "name",
          "value": "childViewsDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When a child view is added, make sure the DOM gets updated appropriately.</p>\n<p>If the view has already rendered an element, we tell the child view to\ncreate an element and insert it into the DOM. If the enclosing container\nview has already written to a buffer, but not yet converted that buffer\ninto an element, we insert the string representation of the child into the\nappropriate place in the buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_contentWillChange",
      "fields": [
        {
          "name": "name",
          "value": "_contentWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_contentDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contentDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Check to make sure that the content has changed, and if so,\nupdate the children directly. This is always scheduled\nasynchronously, to allow the element to be created before\nbindings have synchronized and vice versa.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#_assertArrayLike",
      "fields": [
        {
          "name": "name",
          "value": "_assertArrayLike",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ensure that the content implements Ember.Array</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#arrayWillChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a mutation to the underlying content array will occur.</p>\n<p>This method will remove any views that are no longer in the underlying\ncontent array.</p>\n<p>Invokes whenever the content array itself will change.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#arrayDidChange",
      "fields": [
        {
          "name": "name",
          "value": "arrayDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a mutation to the underlying content array occurs.</p>\n<p>This method will replay that mutation against the views that compose the\n<code>Ember.CollectionView</code>, ensuring that the view reflects the model.</p>\n<p>This array observer is added in <code>contentDidChange</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#createChildView",
      "fields": [
        {
          "name": "name",
          "value": "createChildView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding <code>createChildViews()</code>. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.</p>\n<p>The tag name for the view will be set to the tagName of the viewClass\npassed in.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#content",
      "fields": [
        {
          "name": "name",
          "value": "content",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of items to be displayed by the <code>Ember.CollectionView</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#emptyViewClass",
      "fields": [
        {
          "name": "name",
          "value": "emptyViewClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This provides metadata about what kind of empty view class this\ncollection would like if it is being instantiated from another\nsystem (like Handlebars)</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#emptyView",
      "fields": [
        {
          "name": "name",
          "value": "emptyView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An optional view to display if content is set to an empty array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#itemViewClass",
      "fields": [
        {
          "name": "name",
          "value": "itemViewClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#CONTAINER_MAP",
      "fields": [
        {
          "name": "name",
          "value": "CONTAINER_MAP",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A map of parent tags to their default child tags. You can add\nadditional parent tags if you want collection views that use\na particular parent tag to default to a child tag.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CollectionView#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CollectionView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Component",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An <code>Ember.Component</code> is a view that is completely\nisolated. Properties accessed in its templates go\nto the view object and actions are targeted at\nthe view object. There is no access to the\nsurrounding context or outer controller; all\ncontextual information must be passed in.</p>\n<p>The easiest way to create an <code>Ember.Component</code> is via\na template. If you name a template\n<code>components/my-foo</code>, you will be able to use\n<code>{{my-foo}}</code> in other templates, which will make\nan instance of the isolated component.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">app-profile</span> <span class=\"hljs-variable\">person</span>=<span class=\"hljs-variable\">currentUser</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- app-profile template --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">src</span>=<span class=\"hljs-variable\">person.avatar</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'signature'</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.signature</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>You can use <code>yield</code> inside a template to\ninclude the <strong>contents</strong> of any block attached to\nthe component. The block will be executed in the\ncontext of the surrounding context or outer controller:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#app-profile person</span>=<span class=\"hljs-variable\">currentUser</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Admin mode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">Executed</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">in</span></span> <span class=\"hljs-variable\">the</span> <span class=\"hljs-variable\">controller</span>'<span class=\"hljs-variable\">s</span> <span class=\"hljs-variable\">context.</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/app-profile</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- app-profile template --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">Executed</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">in</span></span> <span class=\"hljs-variable\">the</span> <span class=\"hljs-variable\">components</span> <span class=\"hljs-variable\">context.</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">yield</span></span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">block</span> <span class=\"hljs-variable\">contents</span> }}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If you want to customize the component, in order to\nhandle events or actions, you implement a subclass\nof <code>Ember.Component</code> named after the name of the\ncomponent. Note that <code>Component</code> needs to be appended to the name of\nyour subclass like <code>AppProfileComponent</code>.</p>\n<p>For example, you could implement the action\n<code>hello</code> for the <code>app-profile</code> component:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.AppProfileComponent = Ember.Component.extend({\n  actions: {\n    hello: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name)</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello\"</span>, name);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>And then use it in the component&#39;s template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- app-profile template --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">yield</span></span>}}</span><span class=\"xml\"> <span class=\"hljs-comment\">&lt;!-- block contents --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">hello</span>' <span class=\"hljs-variable\">person.name</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  Say Hello to </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.name</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Components must have a <code>-</code> in their name to avoid\nconflicts with built-in controls that wrap HTML\nelements. This is consistent with the same\nrequirement in web components.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Component#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#sendAction",
      "fields": [
        {
          "name": "name",
          "value": "sendAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the controller context where the component is used if\nthis controller has registered for notifications of the action.</p>\n<p>For example a component for playing or pausing music may translate click events\ninto action notifications of &quot;play&quot; or &quot;stop&quot; depending on some internal state\nof the component:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PlayButtonComponent = Ember.Component.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isPlaying'</span>)) {\n      <span class=\"hljs-keyword\">this</span>.sendAction(<span class=\"hljs-string\">'play'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">this</span>.sendAction(<span class=\"hljs-string\">'stop'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>When used inside a template these component actions are configured to\ntrigger actions in the outer application context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">play-button</span> <span class=\"hljs-variable\">play</span>=<span class=\"hljs-string\">\"musicStarted\"</span> <span class=\"hljs-variable\">stop</span>=<span class=\"hljs-string\">\"musicStopped\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>When the component receives a browser <code>click</code> event it translate this\ninteraction into application-specific semantics (&quot;play&quot; or &quot;stop&quot;) and\ntriggers the specified action name on the controller for the template\nwhere the component is used:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    musicStarted: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// called when the play button is clicked</span>\n      <span class=\"hljs-comment\">// and the music started playing</span>\n    },\n    musicStopped: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// called when the play button is clicked</span>\n      <span class=\"hljs-comment\">// and the music stopped playing</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>If no action name is passed to <code>sendAction</code> a default name of &quot;action&quot;\nis assumed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NextButtonComponent = Ember.Component.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.sendAction();\n  }\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">next-button</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"playNextSongInAlbum\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    playNextSongInAlbum: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifying a components <code>templateName</code> is deprecated without also\nproviding the <code>layout</code> or <code>layoutName</code> properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A components template property is set by passing a block\nduring its invocation. It is executed within the parent context.</p>\n<p>Example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#my-component</span>}}</span><span class=\"xml\">\n  // something that is run in the context\n  // of the parent context\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/my-component</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Specifying a template directly to a component is deprecated without\nalso specifying the layout property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#targetObject",
      "fields": [
        {
          "name": "name",
          "value": "targetObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the component is currently inserted into the DOM of a parent view, this\nproperty will point to the controller of the parent view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Component#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Component",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ContainerView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A <code>ContainerView</code> is an <code>Ember.View</code> subclass that implements <code>Ember.MutableArray</code>\nallowing programmatic management of its child views.</p>\n<h2 id=\"setting-initial-child-views\">Setting Initial Child Views</h2>\n<p>The initial array of child views can be set in one of two ways. You can\nprovide a <code>childViews</code> property at creation time that contains instance of\n<code>Ember.View</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aContainer = Ember.ContainerView.create({\n  childViews: [Ember.View.create(), Ember.View.create()]\n});</pre></td>      </tr>    </table>  </div></div><p>You can also provide a list of property names whose values are instances of\n<code>Ember.View</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aContainer = Ember.ContainerView.create({\n  childViews: [<span class=\"hljs-string\">'aView'</span>, <span class=\"hljs-string\">'bView'</span>, <span class=\"hljs-string\">'cView'</span>],\n  aView: Ember.View.create(),\n  bView: Ember.View.create(),\n  cView: Ember.View.create()\n});</pre></td>      </tr>    </table>  </div></div><p>The two strategies can be combined:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aContainer = Ember.ContainerView.create({\n  childViews: [<span class=\"hljs-string\">'aView'</span>, Ember.View.create()],\n  aView: Ember.View.create()\n});</pre></td>      </tr>    </table>  </div></div><p>Each child view&#39;s rendering will be inserted into the container&#39;s rendered\nHTML in the same order as its position in the <code>childViews</code> property.</p>\n<h2 id=\"adding-and-removing-child-views\">Adding and Removing Child Views</h2>\n<p>The container view implements <code>Ember.MutableArray</code> allowing programmatic management of its child views.</p>\n<p>To remove a view, pass that view into a <code>removeObject</code> call on the container view.</p>\n<p>Given an empty <code>&lt;body&gt;</code> the following code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aContainer = Ember.ContainerView.create({\n  classNames: [<span class=\"hljs-string\">'the-container'</span>],\n  childViews: [<span class=\"hljs-string\">'aView'</span>, <span class=\"hljs-string\">'bView'</span>],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"A\"</span>)\n  }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"B\"</span>)\n  })\n});\n\naContainer.appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Results in the HTML</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view the-container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Removing a view</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aContainer.toArray();  <span class=\"hljs-comment\">// [aContainer.aView, aContainer.bView]</span>\naContainer.removeObject(aContainer.get(<span class=\"hljs-string\">'bView'</span>));\naContainer.toArray();  <span class=\"hljs-comment\">// [aContainer.aView]</span></pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view the-container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Similarly, adding a child view is accomplished by adding <code>Ember.View</code> instances to the\ncontainer view.</p>\n<p>Given an empty <code>&lt;body&gt;</code> the following code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aContainer = Ember.ContainerView.create({\n  classNames: [<span class=\"hljs-string\">'the-container'</span>],\n  childViews: [<span class=\"hljs-string\">'aView'</span>, <span class=\"hljs-string\">'bView'</span>],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"A\"</span>)\n  }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"B\"</span>)\n  })\n});\n\naContainer.appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Results in the HTML</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view the-container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Adding a view</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AnotherViewClass = Ember.View.extend({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"Another view\"</span>)\n});\n\naContainer.toArray();  <span class=\"hljs-comment\">// [aContainer.aView, aContainer.bView]</span>\naContainer.pushObject(AnotherViewClass.create());\naContainer.toArray(); <span class=\"hljs-comment\">// [aContainer.aView, aContainer.bView, &lt;AnotherViewClass instance&gt;]</span></pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view the-container\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>A<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Another view<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"templates-and-layout\">Templates and Layout</h2>\n<p>A <code>template</code>, <code>templateName</code>, <code>defaultTemplate</code>, <code>layout</code>, <code>layoutName</code> or\n<code>defaultLayout</code> property on a container view will not result in the template\nor layout being rendered. The HTML contents of a <code>Ember.ContainerView</code>&#39;s DOM\nrepresentation will only be the rendered HTML of its child views.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Instructs each child view to render to the passed render buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#childViewsWillChange",
      "fields": [
        {
          "name": "name",
          "value": "childViewsWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When a child view is removed, destroy its element so that\nit is removed from the DOM.</p>\n<p>The array observer that triggers this action is set up in the\n<code>renderToBuffer</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#childViewsDidChange",
      "fields": [
        {
          "name": "name",
          "value": "childViewsDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When a child view is added, make sure the DOM gets updated appropriately.</p>\n<p>If the view has already rendered an element, we tell the child view to\ncreate an element and insert it into the DOM. If the enclosing container\nview has already written to a buffer, but not yet converted that buffer\ninto an element, we insert the string representation of the child into the\nappropriate place in the buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerView#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView",
      "fields": [
        {
          "name": "name",
          "value": "Ember.CoreView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.CoreView</code> is an abstract class that exists to give view-like behavior\nto both Ember&#39;s main view class <code>Ember.View</code> and other classes that don&#39;t need\nthe fully functionaltiy of <code>Ember.View</code>.</p>\n<p>Unless you have specific needs for <code>CoreView</code>, you will use <code>Ember.View</code>\nin your applications.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.CoreView#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.CoreView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._Metamorph",
      "fields": [
        {
          "name": "name",
          "value": "Ember._Metamorph",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView",
      "fields": [
        {
          "name": "name",
          "value": "Ember._MetamorphView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember._MetamorphView#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember._MetamorphView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Select",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.Select</code> view class renders a\n<a href=\"https://developer.mozilla.org/en/HTML/Element/select\">select</a> HTML element,\nallowing the user to choose from a list of options.</p>\n<p>The text and <code>value</code> property of each <code>&lt;option&gt;</code> element within the\n<code>&lt;select&gt;</code> element are populated from the objects in the <code>Element.Select</code>&#39;s\n<code>content</code> property. The underlying data object of the selected <code>&lt;option&gt;</code> is\nstored in the <code>Element.Select</code>&#39;s <code>value</code> property.</p>\n<h2 id=\"the-content-property-array-of-strings-\">The Content Property (array of strings)</h2>\n<p>The simplest version of an <code>Ember.Select</code> takes an array of strings as its\n<code>content</code> property. The string will be used as both the <code>value</code> property and\nthe inner text of each <code>&lt;option&gt;</code> element inside the rendered <code>&lt;select&gt;</code>.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.ObjectController.extend({\n  names: [<span class=\"hljs-string\">\"Yehuda\"</span>, <span class=\"hljs-string\">\"Tom\"</span>]\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span> <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">names</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Yehuda\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Tom\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>You can control which <code>&lt;option&gt;</code> is selected through the <code>Ember.Select</code>&#39;s\n<code>value</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.ObjectController.extend({\n  selectedName: <span class=\"hljs-string\">'Tom'</span>,\n  names: [<span class=\"hljs-string\">\"Yehuda\"</span>, <span class=\"hljs-string\">\"Tom\"</span>]\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span> <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">names</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">selectedName</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML with the <code>&lt;option&gt;</code> for &#39;Tom&#39; selected:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Yehuda\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Tom\"</span> <span class=\"hljs-attribute\">selected</span>=<span class=\"hljs-value\">\"selected\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>A user interacting with the rendered <code>&lt;select&gt;</code> to choose &quot;Yehuda&quot; would\nupdate the value of <code>selectedName</code> to &quot;Yehuda&quot;.</p>\n<h2 id=\"the-content-property-array-of-objects-\">The Content Property (array of Objects)</h2>\n<p>An <code>Ember.Select</code> can also take an array of JavaScript or Ember objects as\nits <code>content</code> property.</p>\n<p>When using objects you need to tell the <code>Ember.Select</code> which property should\nbe accessed on each object to supply the <code>value</code> attribute of the <code>&lt;option&gt;</code>\nand which property should be used to supply the element text.</p>\n<p>The <code>optionValuePath</code> option is used to specify the path on each object to\nthe desired property for the <code>value</code> attribute. The <code>optionLabelPath</code>\nspecifies the path on each object to the desired property for the\nelement&#39;s text. Both paths must reference each object itself as <code>content</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.ObjectController.extend({\n  programmers: [\n    {firstName: <span class=\"hljs-string\">\"Yehuda\"</span>, id: <span class=\"hljs-number\">1</span>},\n    {firstName: <span class=\"hljs-string\">\"Tom\"</span>,    id: <span class=\"hljs-number\">2</span>}\n  ]\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span>\n       <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">programmers</span>\n       <span class=\"hljs-variable\">optionValuePath</span>=<span class=\"hljs-string\">\"content.id\"</span>\n       <span class=\"hljs-variable\">optionLabelPath</span>=<span class=\"hljs-string\">\"content.firstName\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"1\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"2\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The <code>value</code> attribute of the selected <code>&lt;option&gt;</code> within an <code>Ember.Select</code>\ncan be bound to a property on another object:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.ObjectController.extend({\n  programmers: [\n    {firstName: <span class=\"hljs-string\">\"Yehuda\"</span>, id: <span class=\"hljs-number\">1</span>},\n    {firstName: <span class=\"hljs-string\">\"Tom\"</span>,    id: <span class=\"hljs-number\">2</span>}\n  ],\n  currentProgrammer: {\n    id: <span class=\"hljs-number\">2</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span>\n       <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">programmers</span>\n       <span class=\"hljs-variable\">optionValuePath</span>=<span class=\"hljs-string\">\"content.id\"</span>\n       <span class=\"hljs-variable\">optionLabelPath</span>=<span class=\"hljs-string\">\"content.firstName\"</span>\n       <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">currentProgrammer.id</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML with a selected option:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"1\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"2\"</span> <span class=\"hljs-attribute\">selected</span>=<span class=\"hljs-value\">\"selected\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Interacting with the rendered element by selecting the first option\n(&#39;Yehuda&#39;) will update the <code>id</code> of <code>currentProgrammer</code>\nto match the <code>value</code> property of the newly selected <code>&lt;option&gt;</code>.</p>\n<p>Alternatively, you can control selection through the underlying objects\nused to render each object by binding the <code>selection</code> option. When the selected\n<code>&lt;option&gt;</code> is changed, the property path provided to <code>selection</code>\nwill be updated to match the content object of the rendered <code>&lt;option&gt;</code>\nelement:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">\n<span class=\"hljs-keyword\">var</span> yehuda = {firstName: <span class=\"hljs-string\">\"Yehuda\"</span>, id: <span class=\"hljs-number\">1</span>, bff4eva: <span class=\"hljs-string\">'tom'</span>}\n<span class=\"hljs-keyword\">var</span> tom = {firstName: <span class=\"hljs-string\">\"Tom\"</span>, id: <span class=\"hljs-number\">2</span>, bff4eva: <span class=\"hljs-string\">'yehuda'</span>};\n\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedPerson: tom,\n  programmers: [ yehuda, tom ]\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span>\n       <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">programmers</span>\n       <span class=\"hljs-variable\">optionValuePath</span>=<span class=\"hljs-string\">\"content.id\"</span>\n       <span class=\"hljs-variable\">optionLabelPath</span>=<span class=\"hljs-string\">\"content.firstName\"</span>\n       <span class=\"hljs-variable\">selection</span>=<span class=\"hljs-variable\">selectedPerson</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML with a selected option:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"1\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"2\"</span> <span class=\"hljs-attribute\">selected</span>=<span class=\"hljs-value\">\"selected\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Interacting with the rendered element by selecting the first option\n(&#39;Yehuda&#39;) will update the <code>selectedPerson</code> to match the object of\nthe newly selected <code>&lt;option&gt;</code>. In this case it is the first object\nin the <code>programmers</code></p>\n<h2 id=\"supplying-a-prompt\">Supplying a Prompt</h2>\n<p>A <code>null</code> value for the <code>Ember.Select</code>&#39;s <code>value</code> or <code>selection</code> property\nresults in there being no <code>&lt;option&gt;</code> with a <code>selected</code> attribute:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.ObjectController.extend({\n  selectedProgrammer: <span class=\"hljs-literal\">null</span>,\n  programmers: [<span class=\"hljs-string\">\"Yehuda\"</span>, <span class=\"hljs-string\">\"Tom\"</span>]\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span>\n       <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">programmers</span>\n       <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">selectedProgrammer</span>\n}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Yehuda\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Tom\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Although <code>selectedProgrammer</code> is <code>null</code> and no <code>&lt;option&gt;</code>\nhas a <code>selected</code> attribute the rendered HTML will display the\nfirst item as though it were selected. You can supply a string\nvalue for the <code>Ember.Select</code> to display when there is no selection\nwith the <code>prompt</code> option:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.ObjectController.extend({\n  selectedProgrammer: <span class=\"hljs-literal\">null</span>,\n  programmers: [ <span class=\"hljs-string\">\"Yehuda\"</span>, <span class=\"hljs-string\">\"Tom\"</span> ]\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-string\">\"select\"</span>\n       <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">programmers</span>\n       <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">selectedProgrammer</span>\n       <span class=\"hljs-variable\">prompt</span>=<span class=\"hljs-string\">\"Please select a name\"</span>\n}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-select\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span>&gt;</span>Please select a name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Yehuda\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">option</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Tom\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Select#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#multiple",
      "fields": [
        {
          "name": "name",
          "value": "multiple",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>multiple</code> attribute of the select element. Indicates whether multiple\noptions can be selected.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#disabled",
      "fields": [
        {
          "name": "name",
          "value": "disabled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>disabled</code> attribute of the select element. Indicates whether\nthe element is disabled from interactions.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#required",
      "fields": [
        {
          "name": "name",
          "value": "required",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>required</code> attribute of the select element. Indicates whether\na selected option is required for form validation.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#content",
      "fields": [
        {
          "name": "name",
          "value": "content",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The list of options.</p>\n<p>If <code>optionLabelPath</code> and <code>optionValuePath</code> are not overridden, this should\nbe a list of strings, which will serve simultaneously as labels and values.</p>\n<p>Otherwise, this should be a list of objects. For instance:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n<span class=\"hljs-keyword\">var</span> App.MySelect = Ember.Select.extend({\n  content: Ember.A([\n      { id: <span class=\"hljs-number\">1</span>, firstName: <span class=\"hljs-string\">'Yehuda'</span> },\n      { id: <span class=\"hljs-number\">2</span>, firstName: <span class=\"hljs-string\">'Tom'</span> }\n    ]),\n  optionLabelPath: <span class=\"hljs-string\">'content.firstName'</span>,\n  optionValuePath: <span class=\"hljs-string\">'content.id'</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#selection",
      "fields": [
        {
          "name": "name",
          "value": "selection",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When <code>multiple</code> is <code>false</code>, the element of <code>content</code> that is currently\nselected, if any.</p>\n<p>When <code>multiple</code> is <code>true</code>, an array of such elements.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#value",
      "fields": [
        {
          "name": "name",
          "value": "value",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In single selection mode (when <code>multiple</code> is <code>false</code>), value can be used to\nget the current selection&#39;s value or set the selection by its value.</p>\n<p>It is not currently supported in multiple selection mode.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#prompt",
      "fields": [
        {
          "name": "name",
          "value": "prompt",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If given, a top-most dummy option will be rendered to serve as a user\nprompt.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#optionLabelPath",
      "fields": [
        {
          "name": "name",
          "value": "optionLabelPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The path of the option labels. See <a href=\"/api/classes/Ember.Select.html#property_content\">content</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#optionValuePath",
      "fields": [
        {
          "name": "name",
          "value": "optionValuePath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The path of the option values. See <a href=\"/api/classes/Ember.Select.html#property_content\">content</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#optionGroupPath",
      "fields": [
        {
          "name": "name",
          "value": "optionGroupPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The path of the option group.\nWhen this property is used, <code>content</code> should be sorted by <code>optionGroupPath</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#groupView",
      "fields": [
        {
          "name": "name",
          "value": "groupView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The view class for optgroup.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#optionView",
      "fields": [
        {
          "name": "name",
          "value": "optionView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The view class for option.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Select#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Select",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea",
      "fields": [
        {
          "name": "name",
          "value": "Ember.TextArea",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The internal class used to create textarea element when the <code>{{textarea}}</code>\nhelper is used.</p>\n<p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_textarea\">handlebars.helpers.textarea</a>  for usage details.</p>\n<h2 id=\"layout-and-layoutname-properties\">Layout and LayoutName properties</h2>\n<p>Because HTML <code>textarea</code> elements do not contain inner HTML the <code>layout</code> and\n<code>layoutName</code> properties will not be applied. See <a href=\"/api/classes/Ember.View.html\">Ember.View</a>&#39;s\nlayout section for more information.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#sendAction",
      "fields": [
        {
          "name": "name",
          "value": "sendAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the controller context where the component is used if\nthis controller has registered for notifications of the action.</p>\n<p>For example a component for playing or pausing music may translate click events\ninto action notifications of &quot;play&quot; or &quot;stop&quot; depending on some internal state\nof the component:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PlayButtonComponent = Ember.Component.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isPlaying'</span>)) {\n      <span class=\"hljs-keyword\">this</span>.sendAction(<span class=\"hljs-string\">'play'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">this</span>.sendAction(<span class=\"hljs-string\">'stop'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>When used inside a template these component actions are configured to\ntrigger actions in the outer application context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">play-button</span> <span class=\"hljs-variable\">play</span>=<span class=\"hljs-string\">\"musicStarted\"</span> <span class=\"hljs-variable\">stop</span>=<span class=\"hljs-string\">\"musicStopped\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>When the component receives a browser <code>click</code> event it translate this\ninteraction into application-specific semantics (&quot;play&quot; or &quot;stop&quot;) and\ntriggers the specified action name on the controller for the template\nwhere the component is used:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    musicStarted: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// called when the play button is clicked</span>\n      <span class=\"hljs-comment\">// and the music started playing</span>\n    },\n    musicStopped: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// called when the play button is clicked</span>\n      <span class=\"hljs-comment\">// and the music stopped playing</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>If no action name is passed to <code>sendAction</code> a default name of &quot;action&quot;\nis assumed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NextButtonComponent = Ember.Component.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.sendAction();\n  }\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">next-button</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"playNextSongInAlbum\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    playNextSongInAlbum: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#triggerAction",
      "fields": [
        {
          "name": "name",
          "value": "triggerAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  action: <span class=\"hljs-string\">'save'</span>,\n  actionContext: Ember.computed.alias(<span class=\"hljs-string\">'context'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>,\n      target: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controller'</span>),\n      actionContext: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'context'</span>)\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_applyAttributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "_applyAttributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the view&#39;s attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#setUnknownProperty",
      "fields": [
        {
          "name": "name",
          "value": "setUnknownProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>We&#39;re using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren&#39;t defined on a view at initialization time.</p>\n<p>Note: setUnknownProperty will only be called once for each property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#_applyClassNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "_applyClassNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates over the view&#39;s <code>classNameBindings</code> array, inserts the value\nof the specified property into the <code>classNames</code> array, then creates an\nobserver to update the view&#39;s element if the bound property ever changes\nin the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#removeAllChildren",
      "fields": [
        {
          "name": "name",
          "value": "removeAllChildren",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes all children from the <code>parentView</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#nearestChildOf",
      "fields": [
        {
          "name": "name",
          "value": "nearestChildOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor whose parent is an instance of\n<code>klass</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#nearestInstanceOf",
      "fields": [
        {
          "name": "name",
          "value": "nearestInstanceOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called on your view when it should push strings of HTML into a\n<code>Ember.RenderBuffer</code>. Most users will want to override the <code>template</code>\nor <code>templateName</code> properties instead of this method.</p>\n<p>By default, <code>Ember.View</code> will look for a function in the <code>template</code>\nproperty and invoke it with the value of <code>context</code>. The value of\n<code>context</code> will be the view&#39;s controller unless you override it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#insertNewline",
      "fields": [
        {
          "name": "name",
          "value": "insertNewline",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when either the <code>enter</code>\nkey is pressed or, in the case of the field being a textarea, when a newline\nis inserted. To use this method, give your field an <code>insert-newline</code>\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.</p>\n<p>For an example on how to use the <code>insert-newline</code> attribute, please\nreference the example near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#cancel",
      "fields": [
        {
          "name": "name",
          "value": "cancel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when the escape button\nis pressed. To use this method, give your field an <code>escape-press</code>\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.</p>\n<p>For an example on how to use the <code>escape-press</code> attribute, please reference\nthe example near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#focusIn",
      "fields": [
        {
          "name": "name",
          "value": "focusIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a field receives\nfocus. To use this method, give your field a <code>focus-in</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>focus-in</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#focusOut",
      "fields": [
        {
          "name": "name",
          "value": "focusOut",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a field loses\nfocus. To use this method, give your field a <code>focus-out</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>focus-out</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#keyPress",
      "fields": [
        {
          "name": "name",
          "value": "keyPress",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key is pressed.\nTo use this method, give your field a <code>key-press</code> attribute. The value of\nthat attribute should be the name of the action in your controller you\nthat wish to invoke.</p>\n<p>For an example on how to use the <code>key-press</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#keyUp",
      "fields": [
        {
          "name": "name",
          "value": "keyUp",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key-up event is\nfired. To use this method, give your field a <code>key-up</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>key-up</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#keyDown",
      "fields": [
        {
          "name": "name",
          "value": "keyDown",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key-down event is\nfired. To use this method, give your field a <code>key-down</code> attribute. The value\nof that attribute should be the name of the action in your controller that\nyou wish to invoke.</p>\n<p>For an example on how to use the <code>key-down</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifying a components <code>templateName</code> is deprecated without also\nproviding the <code>layout</code> or <code>layoutName</code> properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A components template property is set by passing a block\nduring its invocation. It is executed within the parent context.</p>\n<p>Example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#my-component</span>}}</span><span class=\"xml\">\n  // something that is run in the context\n  // of the parent context\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/my-component</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Specifying a template directly to a component is deprecated without\nalso specifying the layout property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#targetObject",
      "fields": [
        {
          "name": "name",
          "value": "targetObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the component is currently inserted into the DOM of a parent view, this\nproperty will point to the controller of the parent view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#attributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "attributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the type attribute to the element</span>\n<span class=\"hljs-comment\">// with the value \"button\", like &lt;div type=\"button\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'type'</span>],\n  type: <span class=\"hljs-string\">'button'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as an attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Renders something like &lt;div enabled=\"enabled\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'enabled'</span>],\n  enabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#classNames",
      "fields": [
        {
          "name": "name",
          "value": "classNames",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Standard CSS class names to apply to the view&#39;s outer element. This\nproperty automatically inherits any class names defined by the view&#39;s\nsuperclasses as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#classNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "classNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'high' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'priority'</span>]\n  priority: <span class=\"hljs-string\">'high'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'is-urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent:urgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This list of properties is inherited from the view&#39;s superclasses as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#instrumentDisplay",
      "fields": [
        {
          "name": "name",
          "value": "instrumentDisplay",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to identify this view during debugging</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#action",
      "fields": [
        {
          "name": "name",
          "value": "action",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The action to be sent when the user presses the return key.</p>\n<p>This is similar to the <code>{{action}}</code> helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#onEvent",
      "fields": [
        {
          "name": "name",
          "value": "onEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The event that should send the action.</p>\n<p>Options are:</p>\n<ul>\n<li><code>enter</code>: the user pressed enter</li>\n<li><code>keyPress</code>: the user pressed a key</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#bubbles",
      "fields": [
        {
          "name": "name",
          "value": "bubbles",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Whether the <code>keyUp</code> event that triggers an <code>action</code> to be sent continues\npropagating to other views.</p>\n<p>By default, when the user presses the return key on their keyboard and\nthe text field has an <code>action</code> set, the action will be sent to the view&#39;s\ncontroller and the key event will stop propagating.</p>\n<p>If you would like parent views to receive the <code>keyUp</code> event even after an\naction has been dispatched, set <code>bubbles</code> to true.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextArea#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextArea",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField",
      "fields": [
        {
          "name": "name",
          "value": "Ember.TextField",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The internal class used to create text inputs when the <code>{{input}}</code>\n  helper is used with <code>type</code> of <code>text</code>.\nSee <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_input\">Handlebars.helpers.input</a>  for usage details.</p>\n<h2 id=\"layout-and-layoutname-properties\">Layout and LayoutName properties</h2>\n<p>Because HTML <code>input</code> elements are self closing <code>layout</code> and <code>layoutName</code>\n  properties will not be applied. See <a href=\"/api/classes/Ember.View.html\">Ember.View</a>&#39;s\n  layout section for more information.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#sendAction",
      "fields": [
        {
          "name": "name",
          "value": "sendAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the controller context where the component is used if\nthis controller has registered for notifications of the action.</p>\n<p>For example a component for playing or pausing music may translate click events\ninto action notifications of &quot;play&quot; or &quot;stop&quot; depending on some internal state\nof the component:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PlayButtonComponent = Ember.Component.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isPlaying'</span>)) {\n      <span class=\"hljs-keyword\">this</span>.sendAction(<span class=\"hljs-string\">'play'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">this</span>.sendAction(<span class=\"hljs-string\">'stop'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>When used inside a template these component actions are configured to\ntrigger actions in the outer application context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">play-button</span> <span class=\"hljs-variable\">play</span>=<span class=\"hljs-string\">\"musicStarted\"</span> <span class=\"hljs-variable\">stop</span>=<span class=\"hljs-string\">\"musicStopped\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>When the component receives a browser <code>click</code> event it translate this\ninteraction into application-specific semantics (&quot;play&quot; or &quot;stop&quot;) and\ntriggers the specified action name on the controller for the template\nwhere the component is used:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    musicStarted: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// called when the play button is clicked</span>\n      <span class=\"hljs-comment\">// and the music started playing</span>\n    },\n    musicStopped: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// called when the play button is clicked</span>\n      <span class=\"hljs-comment\">// and the music stopped playing</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>If no action name is passed to <code>sendAction</code> a default name of &quot;action&quot;\nis assumed.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NextButtonComponent = Ember.Component.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.sendAction();\n  }\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">next-button</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"playNextSongInAlbum\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    playNextSongInAlbum: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#apply",
      "fields": [
        {
          "name": "name",
          "value": "apply",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#triggerAction",
      "fields": [
        {
          "name": "name",
          "value": "triggerAction",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Send an <code>action</code> with an <code>actionContext</code> to a <code>target</code>. The action, actionContext\nand target will be retrieved from properties of the object. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  action: <span class=\"hljs-string\">'save'</span>,\n  actionContext: Ember.computed.alias(<span class=\"hljs-string\">'context'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction(); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n                          <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>target</code>, <code>action</code>, and <code>actionContext</code> can be provided as properties of\nan optional object argument to <code>triggerAction</code> as well.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>,\n      target: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'controller'</span>),\n      actionContext: <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'context'</span>)\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with the current context</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>actionContext</code> defaults to the object you are mixing <code>TargetActionSupport</code> into.\nBut <code>target</code> and <code>action</code> must be specified either as properties or with the argument\nto <code>triggerAction</code>, or a combination:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias(<span class=\"hljs-string\">'controller'</span>),\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.triggerAction({\n      action: <span class=\"hljs-string\">'save'</span>\n    }); <span class=\"hljs-comment\">// Sends the `save` action, along with a reference to `this`,</span>\n        <span class=\"hljs-comment\">// to the current controller</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_applyAttributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "_applyAttributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates through the view&#39;s attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#setUnknownProperty",
      "fields": [
        {
          "name": "name",
          "value": "setUnknownProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>We&#39;re using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren&#39;t defined on a view at initialization time.</p>\n<p>Note: setUnknownProperty will only be called once for each property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#_applyClassNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "_applyClassNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterates over the view&#39;s <code>classNameBindings</code> array, inserts the value\nof the specified property into the <code>classNames</code> array, then creates an\nobserver to update the view&#39;s element if the bound property ever changes\nin the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#removeAllChildren",
      "fields": [
        {
          "name": "name",
          "value": "removeAllChildren",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes all children from the <code>parentView</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#nearestChildOf",
      "fields": [
        {
          "name": "name",
          "value": "nearestChildOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor whose parent is an instance of\n<code>klass</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#nearestInstanceOf",
      "fields": [
        {
          "name": "name",
          "value": "nearestInstanceOf",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called on your view when it should push strings of HTML into a\n<code>Ember.RenderBuffer</code>. Most users will want to override the <code>template</code>\nor <code>templateName</code> properties instead of this method.</p>\n<p>By default, <code>Ember.View</code> will look for a function in the <code>template</code>\nproperty and invoke it with the value of <code>context</code>. The value of\n<code>context</code> will be the view&#39;s controller unless you override it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#insertNewline",
      "fields": [
        {
          "name": "name",
          "value": "insertNewline",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when either the <code>enter</code>\nkey is pressed or, in the case of the field being a textarea, when a newline\nis inserted. To use this method, give your field an <code>insert-newline</code>\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.</p>\n<p>For an example on how to use the <code>insert-newline</code> attribute, please\nreference the example near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#cancel",
      "fields": [
        {
          "name": "name",
          "value": "cancel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when the escape button\nis pressed. To use this method, give your field an <code>escape-press</code>\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.</p>\n<p>For an example on how to use the <code>escape-press</code> attribute, please reference\nthe example near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#focusIn",
      "fields": [
        {
          "name": "name",
          "value": "focusIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a field receives\nfocus. To use this method, give your field a <code>focus-in</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>focus-in</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#focusOut",
      "fields": [
        {
          "name": "name",
          "value": "focusOut",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a field loses\nfocus. To use this method, give your field a <code>focus-out</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>focus-out</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#keyPress",
      "fields": [
        {
          "name": "name",
          "value": "keyPress",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key is pressed.\nTo use this method, give your field a <code>key-press</code> attribute. The value of\nthat attribute should be the name of the action in your controller you\nthat wish to invoke.</p>\n<p>For an example on how to use the <code>key-press</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#keyUp",
      "fields": [
        {
          "name": "name",
          "value": "keyUp",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key-up event is\nfired. To use this method, give your field a <code>key-up</code> attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.</p>\n<p>For an example on how to use the <code>key-up</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#keyDown",
      "fields": [
        {
          "name": "name",
          "value": "keyDown",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Allows you to specify a controller action to invoke when a key-down event is\nfired. To use this method, give your field a <code>key-down</code> attribute. The value\nof that attribute should be the name of the action in your controller that\nyou wish to invoke.</p>\n<p>For an example on how to use the <code>key-down</code> attribute, please reference the\nexample near the top of this file.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifying a components <code>templateName</code> is deprecated without also\nproviding the <code>layout</code> or <code>layoutName</code> properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A components template property is set by passing a block\nduring its invocation. It is executed within the parent context.</p>\n<p>Example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#my-component</span>}}</span><span class=\"xml\">\n  // something that is run in the context\n  // of the parent context\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/my-component</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Specifying a template directly to a component is deprecated without\nalso specifying the layout property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#targetObject",
      "fields": [
        {
          "name": "name",
          "value": "targetObject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the component is currently inserted into the DOM of a parent view, this\nproperty will point to the controller of the parent view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#attributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "attributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the type attribute to the element</span>\n<span class=\"hljs-comment\">// with the value \"button\", like &lt;div type=\"button\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'type'</span>],\n  type: <span class=\"hljs-string\">'button'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as an attribute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Renders something like &lt;div enabled=\"enabled\"&gt;</span>\nEmber.View.extend({\n  attributeBindings: [<span class=\"hljs-string\">'enabled'</span>],\n  enabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#classNames",
      "fields": [
        {
          "name": "name",
          "value": "classNames",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Standard CSS class names to apply to the view&#39;s outer element. This\nproperty automatically inherits any class names defined by the view&#39;s\nsuperclasses as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#classNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "classNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'high' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'priority'</span>]\n  priority: <span class=\"hljs-string\">'high'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'is-urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies the 'urgent' class to the view element</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent:urgent'</span>]\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This list of properties is inherited from the view&#39;s superclasses as well.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#instrumentDisplay",
      "fields": [
        {
          "name": "name",
          "value": "instrumentDisplay",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to identify this view during debugging</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#action",
      "fields": [
        {
          "name": "name",
          "value": "action",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The action to be sent when the user presses the return key.</p>\n<p>This is similar to the <code>{{action}}</code> helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#onEvent",
      "fields": [
        {
          "name": "name",
          "value": "onEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The event that should send the action.</p>\n<p>Options are:</p>\n<ul>\n<li><code>enter</code>: the user pressed enter</li>\n<li><code>keyPress</code>: the user pressed a key</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#bubbles",
      "fields": [
        {
          "name": "name",
          "value": "bubbles",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Whether the <code>keyUp</code> event that triggers an <code>action</code> to be sent continues\npropagating to other views.</p>\n<p>By default, when the user presses the return key on their keyboard and\nthe text field has an <code>action</code> set, the action will be sent to the view&#39;s\ncontroller and the key event will stop propagating.</p>\n<p>If you would like parent views to receive the <code>keyUp</code> event even after an\naction has been dispatched, set <code>bubbles</code> to true.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#value",
      "fields": [
        {
          "name": "name",
          "value": "value",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>value</code> attribute of the input element. As the user inputs text, this\nproperty is updated live.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#type",
      "fields": [
        {
          "name": "name",
          "value": "type",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>type</code> attribute of the input element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#size",
      "fields": [
        {
          "name": "name",
          "value": "size",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>size</code> of the text field in characters.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#pattern",
      "fields": [
        {
          "name": "name",
          "value": "pattern",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>pattern</code> attribute of input element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#min",
      "fields": [
        {
          "name": "name",
          "value": "min",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>min</code> attribute of input element used with <code>type=&quot;number&quot;</code> or <code>type=&quot;range&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#max",
      "fields": [
        {
          "name": "name",
          "value": "max",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>max</code> attribute of input element used with <code>type=&quot;number&quot;</code> or <code>type=&quot;range&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.TextField#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.TextField",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View",
      "fields": [
        {
          "name": "name",
          "value": "Ember.View",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.View</code> is the class in Ember responsible for encapsulating templates of\nHTML content, combining templates with data to render as sections of a page&#39;s\nDOM, and registering and responding to user-initiated events.</p>\n<h2 id=\"html-tag\">HTML Tag</h2>\n<p>The default HTML tag name used for a view&#39;s DOM representation is <code>div</code>. This\ncan be customized by setting the <code>tagName</code> property. The following view\nclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">ParagraphView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'em'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Would result in instances with the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">em</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">em</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"html-class-attribute\">HTML <code>class</code> Attribute</h2>\n<p>The HTML <code>class</code> attribute of a view&#39;s tag can be set by providing a\n<code>classNames</code> property that is set to an array of strings:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyView = Ember.View.extend({\n  classNames: [<span class=\"hljs-string\">'my-class'</span>, <span class=\"hljs-string\">'my-other-class'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view my-class my-other-class\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p><code>class</code> attribute values can also be set by providing a <code>classNameBindings</code>\nproperty set to an array of properties names for the view. The return value\nof these properties will be added as part of the value for the view&#39;s <code>class</code>\nattribute. These properties can be computed properties:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'propertyA'</span>, <span class=\"hljs-string\">'propertyB'</span>],\n  propertyA: <span class=\"hljs-string\">'from-a'</span>,\n  propertyB: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (someLogic) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'from-b'</span>; }\n  }.property()\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view from-a from-b\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>If the value of a class name binding returns a boolean the property name\nitself will be used as the class name if the property is true. The class name\nwill not be added if the value is <code>false</code> or <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'hovered'</span>],\n  hovered: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view hovered\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>When using boolean class name bindings you can supply a string value other\nthan the property name for use as the <code>class</code> HTML attribute by appending the\npreferred value after a &quot;:&quot; character when defining the binding:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'awesome:so-very-cool'</span>],\n  awesome: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view so-very-cool\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Boolean value class name bindings whose property names are in a\ncamelCase-style format will be converted to a dasherized format:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isUrgent'</span>],\n  isUrgent: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view is-urgent\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Class name bindings can also refer to object values that are found by\ntraversing a path relative to the view itself:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'messages.empty'</span>]\n  messages: Ember.Object.create({\n    empty: <span class=\"hljs-literal\">true</span>\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view empty\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>If you want to add a class name for a property which evaluates to true and\nand a different class name if it evaluates to false, you can pass a binding\nlike this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isEnabled:enabled:disabled'</span>]\n  isEnabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view enabled\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>When isEnabled is <code>false</code>, the resulting HTML representation looks like\nthis:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view disabled\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>This syntax offers the convenience to add a class if a property is <code>false</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false</span>\nEmber.View.extend({\n  classNameBindings: [<span class=\"hljs-string\">'isEnabled::disabled'</span>]\n  isEnabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>When the <code>isEnabled</code> property on the view is set to <code>false</code>, it will result\nin view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view disabled\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Updates to the the value of a class name binding will result in automatic\nupdate of the  HTML <code>class</code> attribute in the view&#39;s rendered HTML\nrepresentation. If the value becomes <code>false</code> or <code>undefined</code> the class name\nwill be removed.</p>\n<p>Both <code>classNames</code> and <code>classNameBindings</code> are concatenated properties. See\n<a href=\"/api/classes/Ember.Object.html\">Ember.Object</a> documentation for more\ninformation about concatenated properties.</p>\n<h2 id=\"html-attributes\">HTML Attributes</h2>\n<p>The HTML attribute section of a view&#39;s tag can be set by providing an\n<code>attributeBindings</code> property set to an array of property names on the view.\nThe return value of these properties will be used as the value of the view&#39;s\nHTML associated attribute:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AnchorView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'a'</span>,\n  attributeBindings: [<span class=\"hljs-string\">'href'</span>],\n  href: <span class=\"hljs-string\">'http://google.com'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"http://google.com\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>One property can be mapped on to another by placing a &quot;:&quot; between\nthe source property and the destination property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AnchorView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'a'</span>,\n  attributeBindings: [<span class=\"hljs-string\">'url:href'</span>],\n  url: <span class=\"hljs-string\">'http://google.com'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"http://google.com\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Namespaced attributes (e.g. <code>xlink:href</code>) are supported, but have to be\nmapped, since <code>:</code> is not a valid character for properties in Javascript:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">UseView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'use'</span>,\n  attributeBindings: [<span class=\"hljs-string\">'xlinkHref:xlink:href'</span>],\n  xlinkHref: <span class=\"hljs-string\">'#triangle'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">use</span> <span class=\"hljs-attribute\">xlink:href</span>=<span class=\"hljs-value\">\"#triangle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">use</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>If the return value of an <code>attributeBindings</code> monitored property is a boolean\nthe property will follow HTML&#39;s pattern of repeating the attribute&#39;s name as\nits value:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyTextInput = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'input'</span>,\n  attributeBindings: [<span class=\"hljs-string\">'disabled'</span>],\n  disabled: <span class=\"hljs-literal\">true</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span> <span class=\"hljs-attribute\">disabled</span>=<span class=\"hljs-value\">\"disabled\"</span> /&gt;</span></pre></td>      </tr>    </table>  </div></div><p><code>attributeBindings</code> can refer to computed properties:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyTextInput = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'input'</span>,\n  attributeBindings: [<span class=\"hljs-string\">'disabled'</span>],\n  disabled: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (someLogic) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n  }.property()\n});</pre></td>      </tr>    </table>  </div></div><p>Updates to the the property of an attribute binding will result in automatic\nupdate of the  HTML attribute in the view&#39;s rendered HTML representation.</p>\n<p><code>attributeBindings</code> is a concatenated property. See <a href=\"/api/classes/Ember.Object.html\">Ember.Object</a>\ndocumentation for more information about concatenated properties.</p>\n<h2 id=\"templates\">Templates</h2>\n<p>The HTML contents of a view&#39;s rendered representation are determined by its\ntemplate. Templates can be any function that accepts an optional context\nparameter and returns a string of HTML that will be inserted within the\nview&#39;s tag. Most typically in Ember this function will be a compiled\n<code>Ember.Handlebars</code> template.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'I am the template'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>I am the template<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Within an Ember application is more common to define a Handlebars templates as\npart of a page:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">'text/x-handlebars'</span> <span class=\"hljs-attribute\">data-template-name</span>=<span class=\"hljs-value\">'some-template'</span>&gt;</span><span class=\"nginx\">\n  <span class=\"hljs-title\">Hello</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>And associate it by name using a view&#39;s <code>templateName</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  templateName: <span class=\"hljs-string\">'some-template'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If you have nested resources, your Handlebars template will look like this:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">'text/x-handlebars'</span> <span class=\"hljs-attribute\">data-template-name</span>=<span class=\"hljs-value\">'posts/new'</span>&gt;</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span>New Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>And <code>templateName</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  templateName: <span class=\"hljs-string\">'posts/new'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Using a value for <code>templateName</code> that does not have a Handlebars template\nwith a matching <code>data-template-name</code> attribute will throw an error.</p>\n<p>For views classes that may have a template later defined (e.g. as the block\nportion of a <code>{{view}}</code> Handlebars helper call in another template or in\na subclass), you can provide a <code>defaultTemplate</code> property set to compiled\ntemplate function. If a template is not later provided for the view instance\nthe <code>defaultTemplate</code> value will be used:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile(<span class=\"hljs-string\">'I was the default'</span>),\n  template: <span class=\"hljs-literal\">null</span>,\n  templateName: <span class=\"hljs-literal\">null</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>I was the default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>If a <code>template</code> or <code>templateName</code> is provided it will take precedence over\n<code>defaultTemplate</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile(<span class=\"hljs-string\">'I was the default'</span>)\n});\n\naView = AView.create({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'I was the template, not default'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML representation when rendered:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>I was the template, not default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"view-context\">View Context</h2>\n<p>The default context of the compiled template is the view&#39;s controller:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'Hello {{excitedGreeting}}'</span>)\n});\n\naController = Ember.Object.create({\n  firstName: <span class=\"hljs-string\">'Barry'</span>,\n  excitedGreeting: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">\"content.firstName\"</span>) + <span class=\"hljs-string\">\"!!!\"</span>\n  }.property()\n});\n\naView = AView.create({\n  controller: aController\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hello Barry!!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>A context can also be explicitly supplied through the view&#39;s <code>context</code>\nproperty. If the view has neither <code>context</code> nor <code>controller</code> properties, the\n<code>parentView</code>&#39;s context will be used.</p>\n<h2 id=\"layouts\">Layouts</h2>\n<p>Views can have a secondary template that wraps their main template. Like\nprimary templates, layouts can be any function that  accepts an optional\ncontext parameter and returns a string of HTML that will be inserted inside\nview&#39;s tag. Views whose HTML element is self closing (e.g. <code>&lt;input /&gt;</code>)\ncannot have a layout and this property will be ignored.</p>\n<p>Most typically in Ember a layout will be a compiled <code>Ember.Handlebars</code>\ntemplate.</p>\n<p>A view&#39;s layout can be set directly with the <code>layout</code> property or reference\nan existing Handlebars template by name with the <code>layoutName</code> property.</p>\n<p>A template used as a layout must contain a single use of the Handlebars\n<code>{{yield}}</code> helper. The HTML contents of a view&#39;s rendered <code>template</code> will be\ninserted at this location:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AViewWithLayout = Ember.View.extend({\n  layout: Ember.Handlebars.compile(<span class=\"hljs-string\">\"&lt;div class='my-decorative-class'&gt;{{yield}}&lt;/div&gt;\"</span>),\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"I got wrapped\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in view instances with an HTML representation of:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"my-decorative-class\"</span>&gt;</span>\n    I got wrapped\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_yield\">Ember.Handlebars.helpers.yield</a>\nfor more information.</p>\n<h2 id=\"responding-to-browser-events\">Responding to Browser Events</h2>\n<p>Views can respond to user-initiated events in one of three ways: method\nimplementation, through an event manager, and through <code>{{action}}</code> helper use\nin their template or layout.</p>\n<h3 id=\"method-implementation\">Method Implementation</h3>\n<p>Views can respond to user-initiated events by implementing a method that\nmatches the event name. A <code>jQuery.Event</code> object will be passed as the\nargument to this method.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n    <span class=\"hljs-comment\">// will be called when when an instance's</span>\n    <span class=\"hljs-comment\">// rendered element is clicked</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><h3 id=\"event-managers\">Event Managers</h3>\n<p>Views can define an object as their <code>eventManager</code> property. This object can\nthen implement methods that match the desired event names. Matching events\nthat occur on the view&#39;s rendered HTML or the rendered HTML of any of its DOM\ndescendants will trigger this method. A <code>jQuery.Event</code> object will be passed\nas the first argument to the method and an  <code>Ember.View</code> object as the\nsecond. The <code>Ember.View</code> will be the view whose rendered HTML was interacted\nwith. This may be the view with the <code>eventManager</code> property or one of its\ndescendant views.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  eventManager: Ember.Object.create({\n    doubleClick: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event, view)</span> </span>{\n      <span class=\"hljs-comment\">// will be called when when an instance's</span>\n      <span class=\"hljs-comment\">// rendered element or any rendering</span>\n      <span class=\"hljs-comment\">// of this view's descendant</span>\n      <span class=\"hljs-comment\">// elements is clicked</span>\n    }\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>An event defined for an event manager takes precedence over events of the\nsame name handled through methods on the view.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  mouseEnter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n    <span class=\"hljs-comment\">// will never trigger.</span>\n  },\n  eventManager: Ember.Object.create({\n    mouseEnter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event, view)</span> </span>{\n      <span class=\"hljs-comment\">// takes precedence over AView#mouseEnter</span>\n    }\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>Similarly a view&#39;s event manager will take precedence for events of any views\nrendered as a descendant. A method name that matches an event name will not\nbe called if the view instance was rendered inside the HTML representation of\na view that has an <code>eventManager</code> property defined that handles events of the\nname. Events not handled by the event manager will still trigger method calls\non the descendant.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\nApp.OuterView = Ember.View.extend({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"outer {{#view 'inner'}}inner{{/view}} outer\"</span>),\n  eventManager: Ember.Object.create({\n    mouseEnter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event, view)</span> </span>{\n      <span class=\"hljs-comment\">// view might be instance of either</span>\n      <span class=\"hljs-comment\">// OuterView or InnerView depending on</span>\n      <span class=\"hljs-comment\">// where on the page the user interaction occurred</span>\n    }\n  })\n});\n\nApp.InnerView = Ember.View.extend({\n  click: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n    <span class=\"hljs-comment\">// will be called if rendered inside</span>\n    <span class=\"hljs-comment\">// an OuterView because OuterView's</span>\n    <span class=\"hljs-comment\">// eventManager doesn't handle click events</span>\n  },\n  mouseEnter: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n    <span class=\"hljs-comment\">// will never be called if rendered inside</span>\n    <span class=\"hljs-comment\">// an OuterView.</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><h3 id=\"handlebars-action-helper\">Handlebars <code>{{action}}</code> Helper</h3>\n<p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_action\">Handlebars.helpers.action</a>.</p>\n<h3 id=\"event-names\">Event Names</h3>\n<p>All of the event handling approaches described above respond to the same set\nof events. The names of the built-in events are listed below. (The hash of\nbuilt-in events exists in <code>Ember.EventDispatcher</code>.) Additional, custom events\ncan be registered by using <code>Ember.Application.customEvents</code>.</p>\n<p>Touch events:</p>\n<ul>\n<li><code>touchStart</code></li>\n<li><code>touchMove</code></li>\n<li><code>touchEnd</code></li>\n<li><code>touchCancel</code></li>\n</ul>\n<p>Keyboard events</p>\n<ul>\n<li><code>keyDown</code></li>\n<li><code>keyUp</code></li>\n<li><code>keyPress</code></li>\n</ul>\n<p>Mouse events</p>\n<ul>\n<li><code>mouseDown</code></li>\n<li><code>mouseUp</code></li>\n<li><code>contextMenu</code></li>\n<li><code>click</code></li>\n<li><code>doubleClick</code></li>\n<li><code>mouseMove</code></li>\n<li><code>focusIn</code></li>\n<li><code>focusOut</code></li>\n<li><code>mouseEnter</code></li>\n<li><code>mouseLeave</code></li>\n</ul>\n<p>Form events:</p>\n<ul>\n<li><code>submit</code></li>\n<li><code>change</code></li>\n<li><code>focusIn</code></li>\n<li><code>focusOut</code></li>\n<li><code>input</code></li>\n</ul>\n<p>HTML5 drag and drop events:</p>\n<ul>\n<li><code>dragStart</code></li>\n<li><code>drag</code></li>\n<li><code>dragEnter</code></li>\n<li><code>dragLeave</code></li>\n<li><code>dragOver</code></li>\n<li><code>dragEnd</code></li>\n<li><code>drop</code></li>\n</ul>\n<h2 id=\"handlebars-view-helper\">Handlebars <code>{{view}}</code> Helper</h2>\n<p>Other <code>Ember.View</code> instances can be included as part of a view&#39;s template by\nusing the <code>{{view}}</code> Handlebars helper. See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_view\">Ember.Handlebars.helpers.view</a>\nfor additional information.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.View#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Setup a view, but do not finish waking it up.</p>\n<ul>\n<li>configure <code>childViews</code></li>\n<li>register the view with the global views hash, which is used for event\ndispatch</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.View#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.View",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Handlebars",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Lookup both on root and on window. If the path starts with\na keyword, the corresponding object will be looked up in the\ntemplate&#39;s data hash and used to resolve the path.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars#makeBoundHelper",
      "fields": [
        {
          "name": "name",
          "value": "makeBoundHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A helper function used by <code>registerBoundHelper</code>. Takes the\nprovided Handlebars helper function fn and returns it in wrapped\nbound helper form.</p>\n<p>The main use case for using this outside of <code>registerBoundHelper</code>\nis for registering helpers on the container:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-keyword\">var</span> boundHelperFn = Ember.Handlebars.makeBoundHelper(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(word)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> word.toUpperCase();\n});\n\ncontainer.register(<span class=\"hljs-string\">'helper:my-bound-helper'</span>, boundHelperFn);</pre></td>      </tr>    </table>  </div></div><p>In the above example, if the helper function hadn&#39;t been wrapped in\n<code>makeBoundHelper</code>, the registered helper would be unbound.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars#registerBoundHelper",
      "fields": [
        {
          "name": "name",
          "value": "registerBoundHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Register a bound handlebars helper. Bound helpers behave similarly to regular\nhandlebars helpers, with the added ability to re-render when the underlying data\nchanges.</p>\n<h2 id=\"simple-example\">Simple example</h2>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Handlebars.registerBoundHelper(<span class=\"hljs-string\">'capitalize'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> Ember.String.capitalize(value);\n});</pre></td>      </tr>    </table>  </div></div><p>The above bound helper can be used inside of templates as follows:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">capitalize</span> <span class=\"hljs-variable\">name</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>In this case, when the <code>name</code> property of the template&#39;s context changes,\nthe rendered value of the helper will update to reflect this change.</p>\n<h2 id=\"example-with-options\">Example with options</h2>\n<p>Like normal handlebars helpers, bound helpers have access to the options\npassed into the helper call.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Handlebars.registerBoundHelper(<span class=\"hljs-string\">'repeat'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value, options)</span> </span>{\n  <span class=\"hljs-keyword\">var</span> count = options.hash.count;\n  <span class=\"hljs-keyword\">var</span> a = [];\n  <span class=\"hljs-keyword\">while</span>(a.length &lt; count) {\n      a.push(value);\n  }\n  <span class=\"hljs-keyword\">return</span> a.join(<span class=\"hljs-string\">''</span>);\n});</pre></td>      </tr>    </table>  </div></div><p>This helper could be used in a template as follows:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">repeat</span> <span class=\"hljs-variable\">text</span> <span class=\"hljs-variable\">count</span>=3}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><h2 id=\"example-with-bound-options\">Example with bound options</h2>\n<p>Bound hash options are also supported. Example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">repeat</span> <span class=\"hljs-variable\">text</span> <span class=\"hljs-variable\">count</span>=<span class=\"hljs-variable\">numRepeats</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>In this example, count will be bound to the value of\nthe <code>numRepeats</code> property on the context. If that property\nchanges, the helper will be re-rendered.</p>\n<h2 id=\"example-with-extra-dependencies\">Example with extra dependencies</h2>\n<p>The <code>Ember.Handlebars.registerBoundHelper</code> method takes a variable length\nthird parameter which indicates extra dependencies on the passed in value.\nThis allows the handlebars helper to update when these dependencies change.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Handlebars.registerBoundHelper(<span class=\"hljs-string\">'capitalizeName'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> value.get(<span class=\"hljs-string\">'name'</span>).toUpperCase();\n}, <span class=\"hljs-string\">'name'</span>);</pre></td>      </tr>    </table>  </div></div><h2 id=\"example-with-multiple-bound-properties\">Example with multiple bound properties</h2>\n<p><code>Ember.Handlebars.registerBoundHelper</code> supports binding to\nmultiple properties, e.g.:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Handlebars.registerBoundHelper(<span class=\"hljs-string\">'concatenate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> values = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> values.join(<span class=\"hljs-string\">'||'</span>);\n});</pre></td>      </tr>    </table>  </div></div><p>Which allows for template syntax such as <code>{{concatenate prop1 prop2}}</code> or\n<code>{{concatenate prop1 prop2 prop3}}</code>. If any of the properties change,\nthe helper will re-render.  Note that dependency keys cannot be\nusing in conjunction with multi-property helpers, since it is ambiguous\nwhich property the dependent keys would belong to.</p>\n<h2 id=\"use-with-unbound-helper\">Use with unbound helper</h2>\n<p>The <code>{{unbound}}</code> helper can be used with bound helper invocations\nto render them in their unbound form, e.g.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">unbound</span></span> <span class=\"hljs-variable\">capitalize</span> <span class=\"hljs-variable\">name</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>In this example, if the name property changes, the helper\nwill not re-render.</p>\n<h2 id=\"use-with-blocks-not-supported\">Use with blocks not supported</h2>\n<p>Bound helpers do not support use with Handlebars blocks or\nthe addition of child views of any kind.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars#bootstrap",
      "fields": [
        {
          "name": "name",
          "value": "bootstrap",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Find templates stored in the head tag as script tags and make them available\nto <code>Ember.CoreView</code> in the global <code>Ember.TEMPLATES</code> object. This will be run\nas as jQuery DOM-ready callback.</p>\n<p>Script tags with <code>text/x-handlebars</code> will be compiled\nwith Ember&#39;s Handlebars and are suitable for use as a view&#39;s template.\nThose with type <code>text/x-raw-handlebars</code> will be compiled with regular\nHandlebars and are suitable for use in views&#39; computed properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "HandlebarsCompatibleHelper",
      "fields": [
        {
          "name": "name",
          "value": "HandlebarsCompatibleHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Wraps an Handlebars helper with an HTMLBars helper for backwards compatibility.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#bind-attr",
      "fields": [
        {
          "name": "name",
          "value": "bind-attr",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>bind-attr</code> allows you to create a binding between DOM element attributes and\nEmber objects. For example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">src</span>=<span class=\"hljs-variable\">imageUrl</span> <span class=\"hljs-variable\">alt</span>=<span class=\"hljs-variable\">imageTitle</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>The above handlebars template will fill the <code>&lt;img&gt;</code>&#39;s <code>src</code> attribute with\nthe value of the property referenced with <code>imageUrl</code> and its <code>alt</code>\nattribute with the value of the property referenced with <code>imageTitle</code>.</p>\n<p>If the rendering context of this template is the following object:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{\n  imageUrl: <span class=\"hljs-string\">'http://lolcats.info/haz-a-funny'</span>,\n  imageTitle: <span class=\"hljs-string\">'A humorous image of a cat'</span>\n}</pre></td>      </tr>    </table>  </div></div><p>The resulting HTML output will be:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"http://lolcats.info/haz-a-funny\"</span> <span class=\"hljs-attribute\">alt</span>=<span class=\"hljs-value\">\"A humorous image of a cat\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p><code>bind-attr</code> cannot redeclare existing DOM element attributes. The use of <code>src</code>\nin the following <code>bind-attr</code> example will be ignored and the hard coded value\nof <code>src=&quot;/failwhale.gif&quot;</code> will take precedence:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-value\">\"/failwhale.gif\"</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">src</span>=<span class=\"hljs-variable\">imageUrl</span> <span class=\"hljs-variable\">alt</span>=<span class=\"hljs-variable\">imageTitle</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-bind-attr-and-the-class-attribute\"><code>bind-attr</code> and the <code>class</code> attribute</h3>\n<p><code>bind-attr</code> supports a special syntax for handling a number of cases unique\nto the <code>class</code> DOM element attribute. The <code>class</code> attribute combines\nmultiple discrete values into a single attribute as a space-delimited\nlist of strings. Each string can be:</p>\n<ul>\n<li>a string return value of an object&#39;s property.</li>\n<li>a boolean return value of an object&#39;s property</li>\n<li>a hard-coded value</li>\n</ul>\n<p>A string return value works identically to other uses of <code>bind-attr</code>. The\nreturn value of the property will become the value of the attribute. For\nexample, the following view and template:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  AView = View.extend({\n    someProperty: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"aValue\"</span>;\n    }.property()\n  })</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.someProperty</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Result in the following rendered output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"aValue\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>A boolean return value will insert a specified class name if the property\nreturns <code>true</code> and remove the class name if the property returns <code>false</code>.</p>\n<p>A class name is provided via the syntax\n<code>somePropertyName:class-name-if-true</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = View.extend({\n  someBool: <span class=\"hljs-literal\">true</span>\n})</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\"view.someBool:class-name-if-true\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Result in the following rendered output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"class-name-if-true\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>An additional section of the binding can be provided if you want to\nreplace the existing class instead of removing it when the boolean\nvalue changes:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\"view.someBool:class-name-if-true:class-name-if-false\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>A hard-coded value can be used by prepending <code>:</code> to the desired\nclass name: <code>:class-name-to-always-apply</code>.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\":class-name-to-always-apply\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Results in the following rendered output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"class-name-to-always-apply\"</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>All three strategies - string return value, boolean return value, and\nhard-coded value – can be combined in a single declaration:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">bind-attr</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#bindAttr",
      "fields": [
        {
          "name": "name",
          "value": "bindAttr",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <code>bind-attr</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#collection",
      "fields": [
        {
          "name": "name",
          "value": "collection",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>{{collection}}</code> is a <code>Ember.Handlebars</code> helper for adding instances of\n<code>Ember.CollectionView</code> to a template. See <a href=\"/api/classes/Ember.CollectionView.html\">Ember.CollectionView</a>\n for additional information on how a <code>CollectionView</code> functions.</p>\n<p><code>{{collection}}</code>&#39;s primary use is as a block helper with a <code>contentBinding</code>\noption pointing towards an <code>Ember.Array</code>-compatible object. An <code>Ember.View</code>\ninstance will be created for each item in its <code>content</code> property. Each view\nwill have its own <code>content</code> property set to the appropriate item in the\ncollection.</p>\n<p>The provided block will be applied as the template for each item&#39;s view.</p>\n<p>Given an empty <code>&lt;body&gt;</code> the following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">collection</span> content</span>=<span class=\"hljs-variable\">model</span>}}</span><span class=\"xml\">\n  Hi </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.content.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">collection</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>And the following application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.ApplicationRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> [{name: <span class=\"hljs-string\">'Yehuda'</span>},{name: <span class=\"hljs-string\">'Tom'</span>},{name: <span class=\"hljs-string\">'Peter'</span>}];\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The following HTML will result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hi Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hi Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Hi Peter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"non-block-version-of-collection\">Non-block version of collection</h3>\n<p>If you provide an <code>itemViewClass</code> option that has its own <code>template</code> you may\nomit the block.</p>\n<p>The following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">collection</span></span> <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">model</span> <span class=\"hljs-variable\">itemViewClass</span>=<span class=\"hljs-string\">\"an-item\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>And application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.ApplicationRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> [{name: <span class=\"hljs-string\">'Yehuda'</span>},{name: <span class=\"hljs-string\">'Tom'</span>},{name: <span class=\"hljs-string\">'Peter'</span>}];\n  }\n});\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"Greetings {{view.content.name}}\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in the HTML structure below</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Greetings Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Greetings Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Greetings Peter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-a-collectionview-subclass\">Specifying a CollectionView subclass</h3>\n<p>By default the <code>{{collection}}</code> helper will create an instance of\n<code>Ember.CollectionView</code>. You can supply a <code>Ember.CollectionView</code> subclass to\nthe helper by passing it as the first argument:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">collection</span> </span><span class=\"hljs-string\">\"my-custom-collection\"</span> <span class=\"hljs-variable\">content</span>=<span class=\"hljs-variable\">model</span>}}</span><span class=\"xml\">\n  Hi </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.content.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">collection</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>This example would look for the class <code>App.MyCustomCollection</code>.</p>\n<h3 id=\"forwarded-item-named-options\">Forwarded <code>item.*</code>-named Options</h3>\n<p>As with the <code>{{view}}</code>, helper options passed to the <code>{{collection}}</code> will be\nset on the resulting <code>Ember.CollectionView</code> as properties. Additionally,\noptions prefixed with <code>item</code> will be applied to the views rendered for each\nitem (note the camelcasing):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">collection</span> content</span>=<span class=\"hljs-variable\">model</span>\n              <span class=\"hljs-variable\">itemTagName</span>=<span class=\"hljs-string\">\"p\"</span>\n              <span class=\"hljs-variable\">itemClassNames</span>=<span class=\"hljs-string\">\"greeting\"</span>}}</span><span class=\"xml\">\n  Howdy </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span>.content.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">collection</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view greeting\"</span>&gt;</span>Howdy Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view greeting\"</span>&gt;</span>Howdy Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view greeting\"</span>&gt;</span>Howdy Peter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#component",
      "fields": [
        {
          "name": "name",
          "value": "component",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>{{component}}</code> helper lets you add instances of <code>Ember.Component</code> to a\ntemplate. See <a href=\"/api/classes/Ember.Component.html\">Ember.Component</a> for\nadditional information on how a <code>Component</code> functions.</p>\n<p><code>{{component}}</code>&#39;s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges.</p>\n<p>The provided block will be applied as the template for the component.</p>\n<p>Given an empty <code>&lt;body&gt;</code> the following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">component</span> <span class=\"hljs-variable\">infographicComponentName</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>And the following application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.ApplicationController = Ember.Controller.extend({\n  infographicComponentName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isMarketOpen'</span>)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"live-updating-chart\"</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"market-close-summary\"</span>;\n    }\n  }.property(<span class=\"hljs-string\">'isMarketOpen'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>live-updating-chart</code> component will be appended when <code>isMarketOpen</code> is\n<code>true</code>, and the <code>market-close-summary</code> component will be appended when\n<code>isMarketOpen</code> is <code>false</code>. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.</p>\n<p>Note: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">live-updating-chart</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#debugger",
      "fields": [
        {
          "name": "name",
          "value": "debugger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Execute the <code>debugger</code> statement in the current template&#39;s context.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">debugger</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>When using the debugger helper you will have access to a <code>get</code> function. This\nfunction retrieves values available in the context of the template.</p>\n<p>For example, if you&#39;re wondering why a value <code>{{foo}}</code> isn&#39;t rendering as\nexpected within a template, you could place a <code>{{debugger}}</code> statement and,\nwhen the <code>debugger;</code> breakpoint is hit, you can attempt to retrieve this value:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">&gt; get(<span class=\"hljs-string\">'foo'</span>)</pre></td>      </tr>    </table>  </div></div><p><code>get</code> is also aware of keywords. So in this situation</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> items as </span>|<span class=\"hljs-variable\">item</span>|}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">debugger</span></span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>you&#39;ll be able to get values from the current item:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">&gt; get(<span class=\"hljs-string\">'item.name'</span>)</pre></td>      </tr>    </table>  </div></div><p>You can also access the context of the view to make sure it is the object that\nyou expect:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">&gt; context</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#each",
      "fields": [
        {
          "name": "name",
          "value": "each",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>{{#each}}</code> helper loops over elements in a collection. It is an extension\nof the base Handlebars <code>{{#each}}</code> helper.</p>\n<p>The default behavior of <code>{{#each}}</code> is to yield its inner block once for every\nitem in an array.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> developers = [{name: <span class=\"hljs-string\">'Yehuda'</span>},{name: <span class=\"hljs-string\">'Tom'</span>}, {name: <span class=\"hljs-string\">'Paul'</span>}];</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> developers</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.name</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{! `<span class=\"hljs-variable\">this</span>` <span class=\"hljs-variable\">is</span> <span class=\"hljs-variable\">whatever</span> <span class=\"hljs-variable\">it</span> <span class=\"hljs-variable\">was</span> <span class=\"hljs-variable\">outside</span> <span class=\"hljs-variable\">the</span> <span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> </span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The same rules apply to arrays of primitives, but the items may need to be\nreferences with <code>{{this}}</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> developerNames = [<span class=\"hljs-string\">'Yehuda'</span>, <span class=\"hljs-string\">'Tom'</span>, <span class=\"hljs-string\">'Paul'</span>]</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> name <span class=\"hljs-keyword\">in</span> developerNames</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-else-condition\">{{else}} condition</h3>\n<p><code>{{#each}}</code> can have a matching <code>{{else}}</code>. The contents of this block will render\nif the collection is empty.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{{#each person in developers}}\n  {{person.name}}\n{{else}}\n  &lt;p&gt;Sorry, nobody is available for this task.&lt;/p&gt;\n{{/each}}</pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-an-alternative-view-for-each-item\">Specifying an alternative view for each item</h3>\n<p><code>itemViewClass</code> can control which view will be used during the render of each\nitem&#39;s template.</p>\n<p>The following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> developer <span class=\"hljs-keyword\">in</span> developers itemViewClass</span>=<span class=\"hljs-string\">\"person\"</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">developer.name</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Will use the following view for each item</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Resulting in HTML output that looks like the following:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Yehuda<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Tom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>Paul<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p><code>itemViewClass</code> also enables a non-block form of <code>{{each}}</code>. The view\nmust {{#crossLink &quot;Ember.View/toc_templates&quot;}}provide its own template{{/crossLink}},\nand then the block should be dropped. An example that outputs the same HTML\nas the previous one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  template: <span class=\"hljs-string\">'{{developer.name}}'</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">each</span></span> <span class=\"hljs-variable\">developer</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">in</span></span> <span class=\"hljs-variable\">developers</span> <span class=\"hljs-variable\">itemViewClass</span>=<span class=\"hljs-string\">\"person\"</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-an-alternative-view-for-no-items-else-\">Specifying an alternative view for no items (else)</h3>\n<p>The <code>emptyViewClass</code> option provides the same flexibility to the <code>{{else}}</code>\ncase of the each helper.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NoPeopleView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  template: <span class=\"hljs-string\">'No person is available, sorry'</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> developer <span class=\"hljs-keyword\">in</span> developers emptyViewClass</span>=<span class=\"hljs-string\">\"no-people\"</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">developer.name</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"wrapping-each-item-in-a-controller\">Wrapping each item in a controller</h3>\n<p>Controllers in Ember manage state and decorate data. In many cases,\nproviding a controller for each item in a list can be useful.\nSpecifically, an {{#crossLink &quot;Ember.ObjectController&quot;}}Ember.ObjectController{{/crossLink}}\nshould probably be used. Item controllers are passed the item they\nwill present as a <code>model</code> property, and an object controller will\nproxy property lookups to <code>model</code> for us.</p>\n<p>This allows state and decoration to be added to the controller\nwhile any other property lookups are delegated to the model. An example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.RecruitController = Ember.ObjectController.extend({\n  isAvailableForHire: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isEmployed'</span>) &amp;&amp; <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'isSeekingWork'</span>);\n  }.property(<span class=\"hljs-string\">'isEmployed'</span>, <span class=\"hljs-string\">'isSeekingWork'</span>)\n})</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> developers itemController</span>=<span class=\"hljs-string\">\"recruit\"</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">person.name</span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">if</span> person.isAvailableForHire</span>}}</span><span class=\"xml\">Hire me!</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">if</span></span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#if",
      "fields": [
        {
          "name": "name",
          "value": "if",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#unless",
      "fields": [
        {
          "name": "name",
          "value": "unless",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#input",
      "fields": [
        {
          "name": "name",
          "value": "input",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>{{input}}</code> helper inserts an HTML <code>&lt;input&gt;</code> tag into the template,\n  with a <code>type</code> value of either <code>text</code> or <code>checkbox</code>. If no <code>type</code> is provided,\n  <code>text</code> will be the default value applied. The attributes of <code>{{input}}</code>\n  match those of the native HTML tag as closely as possible for these two types.</p>\n<h2 id=\"use-as-text-field\">Use as text field</h2>\n<p>  An <code>{{input}}</code> with no <code>type</code> or a <code>type</code> of <code>text</code> will render an HTML text input.\n  The following HTML attributes can be set via the helper:</p>\n <table>\n  <tr><td><code>readonly</code></td><td><code>required</code></td><td><code>autofocus</code></td></tr>\n  <tr><td><code>value</code></td><td><code>placeholder</code></td><td><code>disabled</code></td></tr>\n  <tr><td><code>size</code></td><td><code>tabindex</code></td><td><code>maxlength</code></td></tr>\n  <tr><td><code>name</code></td><td><code>min</code></td><td><code>max</code></td></tr>\n  <tr><td><code>pattern</code></td><td><code>accept</code></td><td><code>autocomplete</code></td></tr>\n  <tr><td><code>autosave</code></td><td><code>formaction</code></td><td><code>formenctype</code></td></tr>\n  <tr><td><code>formmethod</code></td><td><code>formnovalidate</code></td><td><code>formtarget</code></td></tr>\n  <tr><td><code>height</code></td><td><code>inputmode</code></td><td><code>multiple</code></td></tr>\n  <tr><td><code>step</code></td><td><code>width</code></td><td><code>form</code></td></tr>\n  <tr><td><code>selectionDirection</code></td><td><code>spellcheck</code></td><td>&nbsp;</td></tr>\n </table>\n\n<p>When set to a quoted string, these values will be directly applied to the HTML\n  element. When left unquoted, these values will be bound to a property on the\n  template&#39;s current rendering context (most typically a controller instance).</p>\n<h2 id=\"unbound-\">Unbound:</h2>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-string\">\"http://www.facebook.com\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"http://www.facebook.com\"</span>/&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"bound-\">Bound:</h2>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  App.ApplicationController = Ember.Controller.extend({\n    firstName: <span class=\"hljs-string\">\"Stanley\"</span>,\n    entryNotAllowed: <span class=\"hljs-literal\">true</span>\n  });</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">firstName</span> <span class=\"hljs-variable\">disabled</span>=<span class=\"hljs-variable\">entryNotAllowed</span> <span class=\"hljs-variable\">size</span>=<span class=\"hljs-string\">\"50\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"Stanley\"</span> <span class=\"hljs-attribute\">disabled</span>=<span class=\"hljs-value\">\"disabled\"</span> <span class=\"hljs-attribute\">size</span>=<span class=\"hljs-value\">\"50\"</span>/&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"actions\">Actions</h2>\n<p>The helper can send multiple actions based on user events.\nThe action property defines the action which is sent when\n  the user presses the return key.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"submit\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The helper allows some user events to send actions.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-press</code></li>\n</ul>\n<p>For example, if you desire an action to be sent when the input is blurred,\n  you only need to setup the action name to the event name property.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">focus-<span class=\"hljs-keyword\">in</span></span>=<span class=\"hljs-string\">\"alertMessage\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>See more about <a href=\"/api/classes/Ember.TextField.html\">Text Support Actions</a></p>\n<h2 id=\"extension\">Extension</h2>\n<p>Internally, <code>{{input type=&quot;text&quot;}}</code> creates an instance of <code>Ember.TextField</code>, passing\n  arguments from the helper to <code>Ember.TextField</code>&#39;s <code>create</code> method. You can extend the\n  capabilities of text inputs in your applications by reopening this class. For example,\n  if you are building a Bootstrap project where <code>data-*</code> attributes are used, you\n  can add one to the <code>TextField</code>&#39;s <code>attributeBindings</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  Ember.TextField.reopen({\n    attributeBindings: [<span class=\"hljs-string\">'data-error'</span>]\n  });</pre></td>      </tr>    </table>  </div></div><p>Keep in mind when writing <code>Ember.TextField</code> subclasses that <code>Ember.TextField</code>\n  itself extends <code>Ember.Component</code>, meaning that it does NOT inherit\n  the <code>controller</code> of the parent view.\nSee more about <a href=\"/api/classes/Ember.Component.html\">Ember components</a></p>\n<h2 id=\"use-as-checkbox\">Use as checkbox</h2>\n<p>An <code>{{input}}</code> with a <code>type</code> of <code>checkbox</code> will render an HTML checkbox input.\n  The following HTML attributes can be set via the helper:</p>\n<ul>\n<li><code>checked</code></li>\n<li><code>disabled</code></li>\n<li><code>tabindex</code></li>\n<li><code>indeterminate</code></li>\n<li><code>name</code></li>\n<li><code>autofocus</code></li>\n<li><code>form</code></li>\n</ul>\n<p>When set to a quoted string, these values will be directly applied to the HTML\n  element. When left unquoted, these values will be bound to a property on the\n  template&#39;s current rendering context (most typically a controller instance).</p>\n<h2 id=\"unbound-\">Unbound:</h2>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-variable\">name</span>=<span class=\"hljs-string\">\"isAdmin\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"checkbox\"</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"isAdmin\"</span> /&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"bound-\">Bound:</h2>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  App.ApplicationController = Ember.Controller.extend({\n    isAdmin: <span class=\"hljs-literal\">true</span>\n  });</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-variable\">checked</span>=<span class=\"hljs-variable\">isAdmin</span> }}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"checkbox\"</span> <span class=\"hljs-attribute\">checked</span>=<span class=\"hljs-value\">\"checked\"</span> /&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"extension\">Extension</h2>\n<p>Internally, <code>{{input type=&quot;checkbox&quot;}}</code> creates an instance of <code>Ember.Checkbox</code>, passing\n  arguments from the helper to <code>Ember.Checkbox</code>&#39;s <code>create</code> method. You can extend the\n  capablilties of checkbox inputs in your applications by reopening this class. For example,\n  if you wanted to add a css class to all checkboxes in your application:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  Ember.Checkbox.reopen({\n    classNames: [<span class=\"hljs-string\">'my-app-checkbox'</span>]\n  });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#loc",
      "fields": [
        {
          "name": "name",
          "value": "loc",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calls <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a> with the\nprovided string.</p>\n<p>This is a convenient way to localize text within a template:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.STRINGS = {\n  <span class=\"hljs-string\">'_welcome_'</span>: <span class=\"hljs-string\">'Bonjour'</span>\n};</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'message'</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">loc</span> '_<span class=\"hljs-variable\">welcome</span>_'}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'message'</span>&gt;</span>\n  Bonjour\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>See <a href=\"/api/classes/Ember.String.html#method_loc\">Ember.String.loc</a> for how to\nset up localized string references.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#log",
      "fields": [
        {
          "name": "name",
          "value": "log",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>log</code> allows you to output the value of variables in the current rendering\ncontext. <code>log</code> also accepts primitive types such as strings or numbers.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">log</span></span> <span class=\"hljs-string\">\"myVariable:\"</span> <span class=\"hljs-variable\">myVariable</span> }}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#partial",
      "fields": [
        {
          "name": "name",
          "value": "partial",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>partial</code> helper renders another template without\nchanging the template context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">foo</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">partial</span> <span class=\"hljs-string\">\"nav\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The above example template will render a template named\n&quot;_nav&quot;, which has the same context as the parent template\nit&#39;s rendered into, so if the &quot;_nav&quot; template also referenced\n<code>{{foo}}</code>, it would print the same thing as the <code>{{foo}}</code>\nin the above example.</p>\n<p>If a &quot;_nav&quot; template isn&#39;t found, the <code>partial</code> helper will\nfall back to a template named &quot;nav&quot;.</p>\n<h2 id=\"bound-template-names\">Bound template names</h2>\n<p>The parameter supplied to <code>partial</code> can also be a path\nto a property containing a template name, e.g.:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">partial</span> <span class=\"hljs-variable\">someTemplateName</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The above example will look up the value of <code>someTemplateName</code>\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If <code>someTemplateName</code>\nchanges, the partial will be re-rendered using the new template\nname.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#textarea",
      "fields": [
        {
          "name": "name",
          "value": "textarea",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>{{textarea}}</code> inserts a new instance of <code>&lt;textarea&gt;</code> tag into the template.\nThe attributes of <code>{{textarea}}</code> match those of the native HTML tags as\nclosely as possible.</p>\n<p>The following HTML attributes can be set:</p>\n<ul>\n<li><code>value</code></li>\n<li><code>name</code></li>\n<li><code>rows</code></li>\n<li><code>cols</code></li>\n<li><code>placeholder</code></li>\n<li><code>disabled</code></li>\n<li><code>maxlength</code></li>\n<li><code>tabindex</code></li>\n<li><code>selectionEnd</code></li>\n<li><code>selectionStart</code></li>\n<li><code>selectionDirection</code></li>\n<li><code>wrap</code></li>\n<li><code>readonly</code></li>\n<li><code>autofocus</code></li>\n<li><code>form</code></li>\n<li><code>spellcheck</code></li>\n<li><code>required</code></li>\n</ul>\n<p>When set to a quoted string, these value will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate&#39;s current rendering context (most typically a controller instance).</p>\n<p>Unbound:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-string\">\"Lots of static text that ISN'T bound\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of static text that ISN'T bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Bound:</p>\n<p>In the following example, the <code>writtenWords</code> property on <code>App.ApplicationController</code>\nwill be updated live as the user types &#39;Lots of text that IS bound&#39; into\nthe text area of their browser&#39;s window.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: <span class=\"hljs-string\">\"Lots of text that IS bound\"</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">writtenWords</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p> Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>If you wanted a one way binding between the text area and a div tag\nsomewhere else on your screen, you could use <code>Ember.computed.oneWay</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: <span class=\"hljs-string\">\"Lots of text that IS bound\"</span>,\n  outputWrittenWords: Ember.computed.oneWay(<span class=\"hljs-string\">\"writtenWords\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">writtenWords</span>}}</span><span class=\"xml\">\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">outputWrittenWords</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Would result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">--</span> <span class=\"hljs-attribute\">the</span> <span class=\"hljs-attribute\">following</span> <span class=\"hljs-attribute\">div</span> <span class=\"hljs-attribute\">will</span> <span class=\"hljs-attribute\">be</span> <span class=\"hljs-attribute\">updated</span> <span class=\"hljs-attribute\">in</span> <span class=\"hljs-attribute\">real</span> <span class=\"hljs-attribute\">time</span> <span class=\"hljs-attribute\">as</span> <span class=\"hljs-attribute\">you</span> <span class=\"hljs-attribute\">type</span> <span class=\"hljs-attribute\">--</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Finally, this example really shows the power and ease of Ember when two\nproperties are bound to eachother via <code>Ember.computed.alias</code>. Type into\neither text area box and they&#39;ll both stay in sync. Note that\n<code>Ember.computed.alias</code> costs more in terms of performance, so only use it when\nyour really binding in both directions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: <span class=\"hljs-string\">\"Lots of text that IS bound\"</span>,\n  twoWayWrittenWords: Ember.computed.alias(<span class=\"hljs-string\">\"writtenWords\"</span>)\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">writtenWords</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">twoWayWrittenWords</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">--</span> <span class=\"hljs-attribute\">both</span> <span class=\"hljs-attribute\">updated</span> <span class=\"hljs-attribute\">in</span> <span class=\"hljs-attribute\">real</span> <span class=\"hljs-attribute\">time</span> <span class=\"hljs-attribute\">--</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">textarea</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-text-area\"</span>&gt;</span>\n  Lots of text that IS bound\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">textarea</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h2 id=\"actions\">Actions</h2>\n<p>The helper can send multiple actions based on user events.</p>\n<p>The action property defines the action which is send when\nthe user presses the return key.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span>=<span class=\"hljs-string\">\"submit\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The helper allows some user events to send actions.</p>\n<ul>\n<li><code>enter</code></li>\n<li><code>insert-newline</code></li>\n<li><code>escape-press</code></li>\n<li><code>focus-in</code></li>\n<li><code>focus-out</code></li>\n<li><code>key-press</code></li>\n</ul>\n<p>For example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">textarea</span> <span class=\"hljs-variable\">focus-<span class=\"hljs-keyword\">in</span></span>=<span class=\"hljs-string\">\"alertMessage\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>See more about <a href=\"/api/classes/Ember.TextArea.html\">Text Support Actions</a></p>\n<h2 id=\"extension\">Extension</h2>\n<p>Internally, <code>{{textarea}}</code> creates an instance of <code>Ember.TextArea</code>, passing\narguments from the helper to <code>Ember.TextArea</code>&#39;s <code>create</code> method. You can\nextend the capabilities of text areas in your application by reopening this\nclass. For example, if you are building a Bootstrap project where <code>data-*</code>\nattributes are used, you can globally add support for a <code>data-*</code> attribute\non all <code>{{textarea}}</code>s&#39; in your app by reopening <code>Ember.TextArea</code> or\n<code>Ember.TextSupport</code> and adding it to the <code>attributeBindings</code> concatenated\nproperty:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.TextArea.reopen({\n  attributeBindings: [<span class=\"hljs-string\">'data-error'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>Keep in mind when writing <code>Ember.TextArea</code> subclasses that <code>Ember.TextArea</code>\nitself extends <code>Ember.Component</code>, meaning that it does NOT inherit\nthe <code>controller</code> of the parent view.</p>\n<p>See more about <a href=\"/api/classes/Ember.Component.html\">Ember components</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#unbound",
      "fields": [
        {
          "name": "name",
          "value": "unbound",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>unbound</code> allows you to output a property without binding. <em>Important:</em> The\noutput will not be updated if the property changes. Use with caution.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">unbound</span></span> <span class=\"hljs-variable\">somePropertyThatDoesntChange</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p><code>unbound</code> can also be used in conjunction with a bound helper to\nrender it in its unbound form:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">unbound</span></span> <span class=\"hljs-variable\">helperName</span> <span class=\"hljs-variable\">somePropertyThatDoesntChange</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#view",
      "fields": [
        {
          "name": "name",
          "value": "view",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>{{view}}</code> inserts a new instance of an <code>Ember.View</code> into a template passing its\noptions to the <code>Ember.View</code>&#39;s <code>create</code> method and using the supplied block as\nthe view&#39;s own template.</p>\n<p>An empty <code>&lt;body&gt;</code> and the following template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">A span:\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> tagName</span>=<span class=\"hljs-string\">\"span\"</span>}}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Will result in HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Note: the handlebars template script\n       also results in a rendered Ember.View\n       which is the outer &lt;div&gt; here --&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    A span:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n      Hello.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-parentview-setting\"><code>parentView</code> setting</h3>\n<p>The <code>parentView</code> property of the new <code>Ember.View</code> instance created through\n<code>{{view}}</code> will be set to the <code>Ember.View</code> instance of the template where\n<code>{{view}}</code> was called.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aView = Ember.View.create({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">\"{{#view}} my parent: {{parentView.elementId}} {{/view}}\"</span>)\n});\n\naView.appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Will result in HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    my parent: ember1\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"setting-css-id-and-class-attributes\">Setting CSS id and class attributes</h3>\n<p>The HTML <code>id</code> attribute can be set on the <code>{{view}}</code>&#39;s resulting element with\nthe <code>id</code> option. This option will <em>not</em> be passed to <code>Ember.View.create</code>.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> tagName</span>=<span class=\"hljs-string\">\"span\"</span> <span class=\"hljs-variable\">id</span>=<span class=\"hljs-string\">\"a-custom-id\"</span>}}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Results in the following HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"a-custom-id\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n    hello.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The HTML <code>class</code> attribute can be set on the <code>{{view}}</code>&#39;s resulting element\nwith the <code>class</code> or <code>classNameBindings</code> options. The <code>class</code> option will\ndirectly set the CSS <code>class</code> attribute and will not be passed to\n<code>Ember.View.create</code>. <code>classNameBindings</code> will be passed to <code>create</code> and use\n<code>Ember.View</code>&#39;s class name binding functionality:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> tagName</span>=<span class=\"hljs-string\">\"span\"</span> <span class=\"hljs-variable\">class</span>=<span class=\"hljs-string\">\"a-custom-class\"</span>}}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Results in the following HTML structure:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view a-custom-class\"</span>&gt;</span>\n    hello.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-a-different-view-class\">Supplying a different view class</h3>\n<p><code>{{view}}</code> can take an optional first argument before its supplied options to\nspecify a path to a custom view class.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">view</span> </span><span class=\"hljs-string\">\"custom\"</span>}}</span><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">will</span> <span class=\"hljs-variable\">look</span> <span class=\"hljs-variable\">up</span> <span class=\"hljs-variable\">App.CustomView</span> }}</span><span class=\"xml\">\n  hello.\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>The first argument can also be a relative path accessible from the current\ncontext.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyApp = Ember.Application.create({});\nMyApp.OuterView = Ember.View.extend({\n  innerViewClass: Ember.View.extend({\n    classNames: [<span class=\"hljs-string\">'a-custom-view-class-as-property'</span>]\n  }),\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{#view view.innerViewClass}} hi {{/view}}'</span>)\n});\n\nMyApp.OuterView.create().appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember1\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"ember2\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view a-custom-view-class-as-property\"</span>&gt;</span>\n    hi\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"blockless-use\">Blockless use</h3>\n<p>If you supply a custom <code>Ember.View</code> subclass that specifies its own template\nor provide a <code>templateName</code> option to <code>{{view}}</code> it can be used without\nsupplying a block. Attempts to use both a <code>templateName</code> option and supply a\nblock will throw an error.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\nApp.WithTemplateDefinedView = Ember.View.extend({\n  templateName: <span class=\"hljs-string\">'defined-template'</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">application.hbs</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span> '<span class=\"hljs-variable\"><span class=\"hljs-keyword\">with</span>-<span class=\"hljs-keyword\">template</span>-defined</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">defined-<span class=\"hljs-keyword\">template</span>.hbs</span> }}</span><span class=\"xml\">\nSome content for the defined template view.</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"-viewname-property\"><code>viewName</code> property</h3>\n<p>You can supply a <code>viewName</code> option to <code>{{view}}</code>. The <code>Ember.View</code> instance\nwill be referenced as a property of its parent view by this name.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">aView = Ember.View.create({\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{#view viewName=\"aChildByName\"}} hi {{/view}}'</span>)\n});\n\naView.appendTo(<span class=\"hljs-string\">'body'</span>);\naView.get(<span class=\"hljs-string\">'aChildByName'</span>) <span class=\"hljs-comment\">// the instance of Ember.View created by {{view}} helper</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#with",
      "fields": [
        {
          "name": "name",
          "value": "with",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Use the <code>{{with}}</code> helper when you want to aliases the to a new name. It&#39;s helpful\nfor semantic clarity and to retain default scope or to reference from another\n<code>{{with}}</code> block.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">// posts might not be\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">with</span> user.posts as blogPosts</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"notice\"</span>&gt;</span>\n    There are </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">blogPosts.length</span>}}</span><span class=\"xml\"> blog posts written by </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">user.name</span>}}</span><span class=\"xml\">.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> post <span class=\"hljs-keyword\">in</span> blogPosts</span>}}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">post.title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">with</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Without the <code>as</code> operator, it would be impossible to reference <code>user.name</code> in the example above.</p>\n<p>NOTE: The alias should not reuse a name from the bound property path.\nFor example: <code>{{#with foo.bar as foo}}</code> is not supported because it attempts to alias using\nthe first part of the property path, <code>foo</code>. Instead, use <code>{{#with foo.bar as baz}}</code>.</p>\n<h3 id=\"-controller-option\"><code>controller</code> option</h3>\n<p>Adding <code>controller=&#39;something&#39;</code> instructs the <code>{{with}}</code> helper to create and use an instance of\nthe specified controller wrapping the aliased keyword.</p>\n<p>This is very similar to using an <code>itemController</code> option with the <code>{{each}}</code> helper.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">with</span> users.posts as posts controller</span>='<span class=\"hljs-variable\">userBlogPosts</span>'}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{!<span class=\"hljs-variable\">-</span> `<span class=\"hljs-variable\">posts</span>` <span class=\"hljs-variable\">is</span> <span class=\"hljs-variable\">wrapped</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">in</span></span> <span class=\"hljs-variable\">our</span> <span class=\"hljs-variable\">controller</span> <span class=\"hljs-variable\">instance</span> }}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">with</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>In the above example, the <code>posts</code> keyword is now wrapped in the <code>userBlogPost</code> controller,\nwhich provides an elegant way to decorate the context with custom\nfunctions/properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#yield",
      "fields": [
        {
          "name": "name",
          "value": "yield",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>{{yield}}</code> denotes an area of a template that will be rendered inside\nof another template. It has two main uses:</p>\n<h3 id=\"use-with-layout-\">Use with <code>layout</code></h3>\n<p>When used in a Handlebars template that is assigned to an <code>Ember.View</code>\ninstance&#39;s <code>layout</code> property Ember will render the layout template first,\ninserting the view&#39;s own rendered output at the <code>{{yield}}</code> location.</p>\n<p>An empty <code>&lt;body&gt;</code> and the following application code:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">AView = Ember.View.extend({\n  classNames: [<span class=\"hljs-string\">'a-view-with-layout'</span>],\n  layout: Ember.Handlebars.compile(<span class=\"hljs-string\">'&lt;div class=\"wrapper\"&gt;{{yield}}&lt;/div&gt;'</span>),\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'&lt;span&gt;I am wrapped&lt;/span&gt;'</span>)\n});\n\naView = AView.create();\naView.appendTo(<span class=\"hljs-string\">'body'</span>);</pre></td>      </tr>    </table>  </div></div><p>Will result in the following HTML output:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'ember-view a-view-with-layout'</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"wrapper\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span>&gt;</span>I am wrapped<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The <code>yield</code> helper cannot be used outside of a template assigned to an\n<code>Ember.View</code>&#39;s <code>layout</code> property and will throw an error if attempted.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">BView = Ember.View.extend({\n  classNames: [<span class=\"hljs-string\">'a-view-with-layout'</span>],\n  template: Ember.Handlebars.compile(<span class=\"hljs-string\">'{{yield}}'</span>)\n});\n\nbView = BView.create();\nbView.appendTo(<span class=\"hljs-string\">'body'</span>);\n\n<span class=\"hljs-comment\">// throws</span>\n<span class=\"hljs-comment\">// Uncaught Error: assertion failed:</span>\n<span class=\"hljs-comment\">// You called yield in a template that was not a layout</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"use-with-ember-component\">Use with Ember.Component</h3>\n<p>When designing components <code>{{yield}}</code> is used to denote where, inside the component&#39;s\ntemplate, an optional block passed to the component should render:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- application.hbs --&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#labeled-textfield value</span>=<span class=\"hljs-variable\">someProperty</span>}}</span><span class=\"xml\">\n  First name:\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/labeled-textfield</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- components/labeled-textfield.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">label</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">yield</span></span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">input</span> <span class=\"hljs-variable\">value</span>=<span class=\"hljs-variable\">value</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">label</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Result:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">label</span>&gt;</span>\n  First name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"text\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">label</span>&gt;</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#action",
      "fields": [
        {
          "name": "name",
          "value": "action",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>{{action}}</code> helper provides a useful shortcut for registering an HTML\nelement within a template for a single DOM event and forwarding that\ninteraction to the template&#39;s controller or specified <code>target</code> option.</p>\n<p>If the controller does not implement the specified action, the event is sent\nto the current route, and it bubbles up the route hierarchy from there.</p>\n<p>For more advanced event handling see <a href=\"/api/classes/Ember.Component.html\">Ember.Component</a></p>\n<h3 id=\"use\">Use</h3>\n<p>Given the following application Handlebars template on the page</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">anActionName</span>'}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>And application code</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  actions: {\n    anActionName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Will result in the following rendered HTML</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"ember-view\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">data-ember-action</span>=<span class=\"hljs-value\">\"1\"</span>&gt;</span>\n    click me\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Clicking &quot;click me&quot; will trigger the <code>anActionName</code> action of the\n<code>App.ApplicationController</code>. In this case, no additional parameters will be passed.</p>\n<p>If you provide additional parameters to the helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">edit</span>' <span class=\"hljs-variable\">post</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>Those parameters will be passed along as arguments to the JavaScript\nfunction implementing the action.</p>\n<h3 id=\"event-propagation\">Event Propagation</h3>\n<p>Events triggered through the action helper will automatically have\n<code>.preventDefault()</code> called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the <code>preventDefault=false</code> option to the <code>{{action}}</code> helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"sayHello\"</span> <span class=\"hljs-variable\">preventDefault</span>=<span class=\"hljs-variable\">false</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"file\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"checkbox\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>To disable bubbling, pass <code>bubbles=false</code> to the helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> '<span class=\"hljs-variable\">edit</span>' <span class=\"hljs-variable\">post</span> <span class=\"hljs-variable\">bubbles</span>=<span class=\"hljs-variable\">false</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>If you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See <a href=\"/api/classes/Ember.View.html\">Ember.View</a>\n&#39;Responding to Browser Events&#39; for more information.</p>\n<h3 id=\"specifying-dom-event-type\">Specifying DOM event type</h3>\n<p>By default the <code>{{action}}</code> helper registers for DOM <code>click</code> events. You can\nsupply an <code>on</code> option to the helper to specify a different DOM event name:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">on</span>=<span class=\"hljs-string\">\"doubleClick\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>See <code>Ember.View</code> &#39;Responding to Browser Events&#39; for a list of\nacceptable DOM event names.</p>\n<h3 id=\"specifying-whitelisted-modifier-keys\">Specifying whitelisted modifier keys</h3>\n<p>By default the <code>{{action}}</code> helper will ignore click event with pressed modifier\nkeys. You can supply an <code>allowedKeys</code> option to specify which keys should not be ignored.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">allowedKeys</span>=<span class=\"hljs-string\">\"alt\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>This way the <code>{{action}}</code> will fire when clicking with the alt key pressed down.</p>\n<p>Alternatively, supply &quot;any&quot; to the <code>allowedKeys</code> option to accept any combination of modifier keys.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">allowedKeys</span>=<span class=\"hljs-string\">\"any\"</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me with any key pressed\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"specifying-a-target\">Specifying a Target</h3>\n<p>There are several possible target objects for <code>{{action}}</code> helpers:</p>\n<p>In a typical Ember application, where templates are managed through use of the\n<code>{{outlet}}</code> helper, actions will bubble to the current controller, then\nto the current route, and then up the route hierarchy.</p>\n<p>Alternatively, a <code>target</code> option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{! <span class=\"hljs-variable\">the</span> <span class=\"hljs-variable\">application</span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">template</span></span> }}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"anActionName\"</span> <span class=\"hljs-variable\">target</span>=<span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n  click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationView = Ember.View.extend({\n  actions: {\n    anActionName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{}\n  }\n});</pre></td>      </tr>    </table>  </div></div><h3 id=\"additional-parameters\">Additional Parameters</h3>\n<p>You may specify additional parameters to the <code>{{action}}</code> helper. These\nparameters are passed along as the arguments to the JavaScript function\nimplementing the action.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#<span class=\"hljs-keyword\">each</span> person <span class=\"hljs-keyword\">in</span> people</span>}}</span><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> </span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">action</span></span> <span class=\"hljs-string\">\"edit\"</span> <span class=\"hljs-variable\">person</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span>\n    click me\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/<span class=\"hljs-keyword\">each</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Clicking &quot;click me&quot; will trigger the <code>edit</code> method on the current controller\nwith the value of <code>person</code> as a parameter.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#link-to",
      "fields": [
        {
          "name": "name",
          "value": "link-to",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>{{link-to}}</code> helper renders a link to the supplied\n<code>routeName</code> passing an optionally supplied model to the\nroute as its <code>model</code> context of the route. The block\nfor <code>{{link-to}}</code> becomes the innerHTML of the rendered\nelement:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>'}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>You can also use an inline form of <code>{{link-to}}</code> helper by\npassing the link text as the first argument\nto the helper:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">link-to</span> '<span class=\"hljs-variable\">Great</span> <span class=\"hljs-variable\">Hamster</span> <span class=\"hljs-variable\">Photos</span>' '<span class=\"hljs-variable\">photoGallery</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Both will result in:</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos\"</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-a-tagname\">Supplying a tagName</h3>\n<p>By default <code>{{link-to}}</code> renders an <code>&lt;a&gt;</code> element. This can\nbe overridden for a single use of <code>{{link-to}}</code> by supplying\na <code>tagName</code> option:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">tagName</span>=<span class=\"hljs-string\">\"li\"</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"disabling-the-link-to-helper\">Disabling the <code>link-to</code> helper</h3>\n<p>By default <code>{{link-to}}</code> is enabled.\nany passed value to <code>disabled</code> helper property will disable the <code>link-to</code> helper.</p>\n<p>static use: the <code>disabled</code> option:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">disabled</span>=<span class=\"hljs-variable\">true</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>dynamic use: the <code>disabledWhen</code> option:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">disabledWhen</span>=<span class=\"hljs-variable\">controller.someProperty</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>any passed value to <code>disabled</code> will disable it except <code>undefined</code>.\nto ensure that only <code>true</code> disable the <code>link-to</code> helper you can\noverride the global behaviour of <code>Ember.LinkView</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.LinkView.reopen({\n  disabled: Ember.computed(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key, value)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (value !== <span class=\"hljs-literal\">undefined</span>) {\n      <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'_isDisabled'</span>, value === <span class=\"hljs-literal\">true</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> value === <span class=\"hljs-literal\">true</span> ? get(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">'disabledClass'</span>) : <span class=\"hljs-literal\">false</span>;\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>see &quot;Overriding Application-wide Defaults&quot; for more.</p>\n<h3 id=\"handling-href-\">Handling <code>href</code></h3>\n<p><code>{{link-to}}</code> will use your application&#39;s Router to\nfill the element&#39;s <code>href</code> property with a url that\nmatches the path to the supplied <code>routeName</code> for your\nrouter&#39;s configured <code>Location</code> scheme, which defaults\nto Ember.HashLocation.</p>\n<h3 id=\"handling-current-route\">Handling current route</h3>\n<p><code>{{link-to}}</code> will apply a CSS class name of &#39;active&#39;\nwhen the application&#39;s current route matches\nthe supplied routeName. For example, if the application&#39;s\ncurrent route is &#39;photoGallery.recent&#39; the following\nuse of <code>{{link-to}}</code>:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery.recent</span>'}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>will result in</p>\n<div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/this-week\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"active\"</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>The CSS class name used for active classes can be customized\nfor a single use of <code>{{link-to}}</code> by passing an <code>activeClass</code>\noption:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery.recent</span>' <span class=\"hljs-variable\">activeClass</span>=<span class=\"hljs-string\">\"current-url\"</span>}}</span><span class=\"xml\">\n  Great Hamster Photos\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/this-week\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"current-url\"</span>&gt;</span>\n  Great Hamster Photos\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>To override this option for your entire application, see\n&quot;Overriding Application-wide Defaults&quot;.</p>\n<h3 id=\"supplying-a-model\">Supplying a model</h3>\n<p>An optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"photoGallery\"</span>, {path: <span class=\"hljs-string\">\"hamster-photos/:photo_id\"</span>});\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">aPhoto</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">aPhoto.title</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/42\"</span>&gt;</span>\n  Tomster\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-multiple-models\">Supplying multiple models</h3>\n<p>For deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"photoGallery\"</span>, {path: <span class=\"hljs-string\">\"hamster-photos/:photo_id\"</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"comment\"</span>, {path: <span class=\"hljs-string\">\"comments/:comment_id\"</span>});\n  });\n});</pre></td>      </tr>    </table>  </div></div><p>This argument will become the model context of the linked route:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery.comment</span>' <span class=\"hljs-variable\">aPhoto</span> <span class=\"hljs-variable\">comment</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">comment.body</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/42/comments/718\"</span>&gt;</span>\n  A+++ would snuggle again.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><h3 id=\"supplying-an-explicit-dynamic-segment-value\">Supplying an explicit dynamic segment value</h3>\n<p>If you don&#39;t have a model object available to pass to <code>{{link-to}}</code>,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"photoGallery\"</span>, {path: <span class=\"hljs-string\">\"hamster-photos/:photo_id\"</span>});\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">aPhotoId</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">aPhoto.title</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"/hamster-photos/42\"</span>&gt;</span>\n  Tomster\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>When transitioning into the linked route, the <code>model</code> hook will\nbe triggered with parameters including this passed identifier.</p>\n<h3 id=\"allowing-default-action\">Allowing Default Action</h3>\n<p> By default the <code>{{link-to}}</code> helper prevents the default browser action\n by calling <code>preventDefault()</code> as this sort of action bubbling is normally\n handled internally and we do not want to take the browser to a new URL (for\n example).</p>\n<p> If you need to override this behavior specify <code>preventDefault=false</code> in\n your template:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to </span>'<span class=\"hljs-variable\">photoGallery</span>' <span class=\"hljs-variable\">aPhotoId</span> <span class=\"hljs-variable\">preventDefault</span>=<span class=\"hljs-variable\">false</span>}}</span><span class=\"xml\">\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">aPhotoId.title</span>}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><h3 id=\"overriding-attributes\">Overriding attributes</h3>\n<p>You can override any given property of the Ember.LinkView\nthat is generated by the <code>{{link-to}}</code> helper by passing\nkey/value pairs, like so:</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-begin-block\">#link-to  aPhoto tagName</span>='<span class=\"hljs-variable\">li</span>' <span class=\"hljs-variable\">title</span>='<span class=\"hljs-variable\">Following</span> <span class=\"hljs-variable\">this</span> <span class=\"hljs-variable\">link</span> <span class=\"hljs-variable\">will</span> <span class=\"hljs-variable\">change</span> <span class=\"hljs-variable\">your</span> <span class=\"hljs-variable\">life</span>' <span class=\"hljs-variable\">classNames</span>='<span class=\"hljs-variable\">pic</span> <span class=\"hljs-variable\">sweet</span>'}}</span><span class=\"xml\">\n  Uh-mazing!\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-end-block\">/link-to</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>See <a href=\"/api/classes/Ember.LinkView.html\">Ember.LinkView</a> for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of <code>LinkView</code>.</p>\n<h3 id=\"overriding-application-wide-defaults\">Overriding Application-wide Defaults</h3>\n<p><code>{{link-to}}</code> creates an instance of Ember.LinkView\nfor rendering. To override options for your entire\napplication, reopen Ember.LinkView and supply the\ndesired values:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.LinkView.reopen({\n  activeClass: <span class=\"hljs-string\">\"is-active\"</span>,\n  tagName: <span class=\"hljs-string\">'li'</span>\n})</pre></td>      </tr>    </table>  </div></div><p>It is also possible to override the default event in\nthis manner:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.LinkView.reopen({\n  eventName: <span class=\"hljs-string\">'customEventName'</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#linkTo",
      "fields": [
        {
          "name": "name",
          "value": "linkTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>See <a href=\"/api/classes/Ember.Handlebars.helpers.html#method_link-to\">link-to</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#outlet",
      "fields": [
        {
          "name": "name",
          "value": "outlet",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>outlet</code> helper is a placeholder that the router will fill in with\nthe appropriate template based on the current state of the application.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>By default, a template based on Ember&#39;s naming conventions will be rendered\ninto the <code>outlet</code> (e.g. <code>App.PostsRoute</code> will render the <code>posts</code> template).</p>\n<p>You can render a different template by using the <code>render()</code> method in the\nroute&#39;s <code>renderTemplate</code> hook. The following will render the <code>favoritePost</code>\ntemplate into the <code>outlet</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'favoritePost'</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>You can create custom named outlets for more control.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> '<span class=\"hljs-variable\">favoritePost</span>'}}</span><span class=\"xml\">\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> '<span class=\"hljs-variable\">posts</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>Then you can define what template is rendered into each outlet in your\nroute.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'favoritePost'</span>, { outlet: <span class=\"hljs-string\">'favoritePost'</span> });\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'posts'</span>, { outlet: <span class=\"hljs-string\">'posts'</span> });\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>You can specify the view that the outlet uses to contain and manage the\ntemplates rendered into it.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> <span class=\"hljs-variable\"><span class=\"hljs-keyword\">view</span></span>='<span class=\"hljs-variable\">sectionContainer</span>'}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.SectionContainer = Ember.ContainerView.extend({\n  tagName: <span class=\"hljs-string\">'section'</span>,\n  classNames: [<span class=\"hljs-string\">'special'</span>]\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#query-params",
      "fields": [
        {
          "name": "name",
          "value": "query-params",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a sub-expression to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.</p>\n<p>Example</p>\n<p>{{#link-to &#39;posts&#39; (query-params direction=&quot;asc&quot;)}}Sort{{/link-to}}</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Handlebars.helpers#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calling <code>{{render}}</code> from within a template will insert another\ntemplate that matches the provided name. The inserted template will\naccess its properties on its own controller (rather than the controller\nof the parent template).</p>\n<p>If a view class with the same name exists, the view class also will be used.</p>\n<p>Note: A given controller may only be used <em>once</em> in your app in this manner.\nA singleton instance of the controller will be created for you.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.NavigationController = Ember.Controller.extend({\n  who: <span class=\"hljs-string\">\"world\"</span>\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- navigation.hbs --&gt;</span>\nHello, </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">who</span>}}</span><span class=\"xml\">.</span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- application.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span>My great app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">render</span> <span class=\"hljs-string\">\"navigation\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight html\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span>My great app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'ember-view'</span>&gt;</span>\n  Hello, world.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre></td>      </tr>    </table>  </div></div><p>Optionally you may provide a second argument: a property path\nthat will be bound to the <code>model</code> property of the controller.</p>\n<p>If a <code>model</code> property path is specified, then a new instance of the\ncontroller will be created and <code>{{render}}</code> can be used multiple times\nwith the same name.</p>\n<p> For example if you had this <code>author</code> template.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"author\"</span>&gt;</span>\nWritten by </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">firstName</span>}}</span><span class=\"xml\"> </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">lastName</span>}}</span><span class=\"xml\">.\nTotal Posts: </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">postCount</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>You could render it inside the <code>post</code> template using the <code>render</code> helper.</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"post\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">title</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span></span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">body</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n</span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">render</span> <span class=\"hljs-string\">\"author\"</span> <span class=\"hljs-variable\">author</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Handlebars.helpers",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars.Helper",
      "fields": [
        {
          "name": "name",
          "value": "Ember.HTMLBars.Helper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars",
      "fields": [
        {
          "name": "name",
          "value": "Ember.HTMLBars",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars#resolveHelper",
      "fields": [
        {
          "name": "name",
          "value": "resolveHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to lookup/resolve handlebars helpers. The lookup order is:</p>\n<ul>\n<li>Look for a registered helper</li>\n<li>If a dash exists in the name:<ul>\n<li>Look for a helper registed in the container</li>\n<li>Use Ember.ComponentLookup to find an Ember.Component that resolves\nto the given name</li>\n</ul>\n</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HTMLBars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars#makeViewHelper",
      "fields": [
        {
          "name": "name",
          "value": "makeViewHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a helper function that renders the provided ViewClass.</p>\n<p>Used internally by Ember.Handlebars.helper and other methods\ninvolving helper/component registration.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HTMLBars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars#makeBoundHelper",
      "fields": [
        {
          "name": "name",
          "value": "makeBoundHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Create a bound helper. Accepts a function that receives the ordered and hash parameters\nfrom the template. If a bound property was provided in the template it will be resolved to its\nvalue and any changes to the bound property cause the helper function to be re-run with the updated\nvalues.</p>\n<ul>\n<li><code>params</code> - An array of resolved ordered parameters.</li>\n<li><code>hash</code> - An object containing the hash parameters.</li>\n</ul>\n<p>For example:</p>\n<ul>\n<li><p>With an unquoted ordered parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{{x-capitalize foo}}</pre></td>      </tr>    </table>  </div></div><p>Assuming <code>foo</code> was set to <code>&quot;bar&quot;</code>, the bound helper would receive <code>[&quot;bar&quot;]</code> as its first argument, and\nan empty hash as its second.</p>\n</li>\n<li><p>With a quoted ordered parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{{x-capitalize <span class=\"hljs-string\">\"foo\"</span>}}</pre></td>      </tr>    </table>  </div></div><p>The bound helper would receive <code>[&quot;foo&quot;]</code> as its first argument, and an empty hash as its second.</p>\n</li>\n<li><p>With an unquoted hash parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{{x-repeat <span class=\"hljs-string\">\"foo\"</span> count=repeatCount}}</pre></td>      </tr>    </table>  </div></div><p>Assuming that <code>repeatCount</code> resolved to 2, the bound helper would receive <code>[&quot;foo&quot;]</code> as its first argument,\nand { count: 2 } as its second.</p>\n</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HTMLBars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars#_registerHelper",
      "fields": [
        {
          "name": "name",
          "value": "_registerHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HTMLBars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HTMLBars#helpers",
      "fields": [
        {
          "name": "name",
          "value": "helpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HTMLBars",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Location",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Location",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ember.Location returns an instance of the correct implementation of\nthe <code>location</code> API.</p>\n<h2 id=\"implementations\">Implementations</h2>\n<p>You can pass an implementation name (<code>hash</code>, <code>history</code>, <code>none</code>) to force a\nparticular implementation to be used in your application.</p>\n<h3 id=\"hashlocation\">HashLocation</h3>\n<p>Using <code>HashLocation</code> results in URLs with a <code>#</code> (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\nThis relies upon the <code>hashchange</code> event existing in the browser.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'posts'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'new'</span>);\n  });\n});\n\nApp.Router.reopen({\n  location: <span class=\"hljs-string\">'hash'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This will result in a posts.new url of <code>/#/posts/new</code>.</p>\n<h3 id=\"historylocation\">HistoryLocation</h3>\n<p>Using <code>HistoryLocation</code> results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser&#39;s <code>history</code> API.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'posts'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'new'</span>);\n  });\n});\n\nApp.Router.reopen({\n  location: <span class=\"hljs-string\">'history'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This will result in a posts.new url of <code>/posts/new</code>.</p>\n<p>Keep in mind that your server must serve the Ember app at all the routes you\ndefine.</p>\n<h3 id=\"autolocation\">AutoLocation</h3>\n<p>Using <code>AutoLocation</code>, the router will use the best Location class supported by\nthe browser it is running in.</p>\n<p>Browsers that support the <code>history</code> API will use <code>HistoryLocation</code>, those that\ndo not, but still support the <code>hashchange</code> event will use <code>HashLocation</code>, and\nin the rare case neither is supported will use <code>NoneLocation</code>.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'posts'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'new'</span>);\n  });\n});\n\nApp.Router.reopen({\n  location: <span class=\"hljs-string\">'auto'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>This will result in a posts.new url of <code>/posts/new</code> for modern browsers that\nsupport the <code>history</code> api or <code>/#/posts/new</code> for older ones, like Internet\nExplorer 9 and below.</p>\n<p>When a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate <code>Location</code> class, with the URL\ntransformed accordingly, if needed.</p>\n<p>Keep in mind that since some of your users will use <code>HistoryLocation</code>, your\nserver must serve the Ember app at all the routes you define.</p>\n<h3 id=\"nonelocation\">NoneLocation</h3>\n<p>Using <code>NoneLocation</code> causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling <code>App.setupForTesting()</code>.</p>\n<h2 id=\"location-api\">Location API</h2>\n<p>Each location implementation must provide the following methods:</p>\n<ul>\n<li>implementation: returns the string name used to reference the implementation.</li>\n<li>getURL: returns the current URL.</li>\n<li>setURL(path): sets the current URL.</li>\n<li>replaceURL(path): replace the current URL (optional).</li>\n<li>onUpdateURL(callback): triggers the callback when the URL changes.</li>\n<li>formatURL(url): formats <code>url</code> to be placed into <code>href</code> attribute.</li>\n</ul>\n<p>Calling setURL or replaceURL will not trigger onUpdateURL callbacks.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Location#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is deprecated in favor of using the container to lookup the location\nimplementation as desired.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// Given a location registered as follows:</span>\ncontainer.register(<span class=\"hljs-string\">'location:history-test'</span>, HistoryTestLocation);\n\n<span class=\"hljs-comment\">// You could create a new instance via:</span>\ncontainer.lookup(<span class=\"hljs-string\">'location:history-test'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Location",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Location#registerImplementation",
      "fields": [
        {
          "name": "name",
          "value": "registerImplementation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is deprecated in favor of using the container to register the\nlocation implementation as desired.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Application.initializer({\n name: <span class=\"hljs-string\">\"history-test-location\"</span>,\n\n initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n   application.register(<span class=\"hljs-string\">'location:history-test'</span>, HistoryTestLocation);\n }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Location",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Location#getHash",
      "fields": [
        {
          "name": "name",
          "value": "getHash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current <code>location.hash</code> by parsing location.href since browsers\ninconsistently URL-decode <code>location.hash</code>.</p>\n<p><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=483304\">https://bugzilla.mozilla.org/show_bug.cgi?id=483304</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Location",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation",
      "fields": [
        {
          "name": "name",
          "value": "Ember.AutoLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ember.AutoLocation will select the best location option based off browser\nsupport with the priority order: history, hash, none.</p>\n<p>Clean pushState paths accessed by hashchange-only browsers will be redirected\nto the hash-equivalent and vice versa so future transitions are consistent.</p>\n<p>Keep in mind that since some of your users will use <code>HistoryLocation</code>, your\nserver must serve the Ember app at all the routes you define.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getOrigin",
      "fields": [
        {
          "name": "name",
          "value": "_getOrigin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getSupportsHistory",
      "fields": [
        {
          "name": "name",
          "value": "_getSupportsHistory",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getSupportsHashChange",
      "fields": [
        {
          "name": "name",
          "value": "_getSupportsHashChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_replacePath",
      "fields": [
        {
          "name": "name",
          "value": "_replacePath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getRootURL",
      "fields": [
        {
          "name": "name",
          "value": "_getRootURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getPath",
      "fields": [
        {
          "name": "name",
          "value": "_getPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getHash",
      "fields": [
        {
          "name": "name",
          "value": "_getHash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getQuery",
      "fields": [
        {
          "name": "name",
          "value": "_getQuery",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getFullPath",
      "fields": [
        {
          "name": "name",
          "value": "_getFullPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getHistoryPath",
      "fields": [
        {
          "name": "name",
          "value": "_getHistoryPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_getHashPath",
      "fields": [
        {
          "name": "name",
          "value": "_getHashPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Selects the best location option based off browser support and returns an\ninstance of that Location class.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#location",
      "fields": [
        {
          "name": "name",
          "value": "location",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_history",
      "fields": [
        {
          "name": "name",
          "value": "_history",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#cancelRouterSetup",
      "fields": [
        {
          "name": "name",
          "value": "cancelRouterSetup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#rootURL",
      "fields": [
        {
          "name": "name",
          "value": "rootURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_HistoryLocation",
      "fields": [
        {
          "name": "name",
          "value": "_HistoryLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_HashLocation",
      "fields": [
        {
          "name": "name",
          "value": "_HashLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.AutoLocation#_NoneLocation",
      "fields": [
        {
          "name": "name",
          "value": "_NoneLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.AutoLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation",
      "fields": [
        {
          "name": "name",
          "value": "Ember.HashLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.HashLocation</code> implements the location API using the browser&#39;s\nhash. At present, it relies on a <code>hashchange</code> event existing in the\nbrowser.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cleans up the HashLocation event listener.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#getHash",
      "fields": [
        {
          "name": "name",
          "value": "getHash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#getURL",
      "fields": [
        {
          "name": "name",
          "value": "getURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the normalized URL, constructed from <code>location.hash</code>.</p>\n<p>e.g. <code>#/foo</code> =&gt; <code>/foo</code> as well as <code>#/foo#bar</code> =&gt; <code>/foo#bar</code>.</p>\n<p>By convention, hashed paths must begin with a forward slash, otherwise they\nare not treated as a path so we can distinguish intent.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#setURL",
      "fields": [
        {
          "name": "name",
          "value": "setURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the <code>location.hash</code> and remembers what was set. This prevents\n<code>onUpdateURL</code> callbacks from triggering when the hash was set by\n<code>HashLocation</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#replaceURL",
      "fields": [
        {
          "name": "name",
          "value": "replaceURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Uses location.replace to update the url without a page reload\nor history modification.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#onUpdateURL",
      "fields": [
        {
          "name": "name",
          "value": "onUpdateURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Register a callback to be invoked when the hash changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after <code>setURL</code> is invoked.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#formatURL",
      "fields": [
        {
          "name": "name",
          "value": "formatURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a URL, formats it to be placed into the page as part\nof an element&#39;s <code>href</code> attribute.</p>\n<p>This is used, for example, when using the {{action}} helper\nto generate a URL based on an event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HashLocation#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HashLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation",
      "fields": [
        {
          "name": "name",
          "value": "Ember.HistoryLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ember.HistoryLocation implements the location API using the browser&#39;s\nhistory.pushState API.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cleans up the HistoryLocation event listener.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#initState",
      "fields": [
        {
          "name": "name",
          "value": "initState",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to set state on first call to setURL</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#getURL",
      "fields": [
        {
          "name": "name",
          "value": "getURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current <code>location.pathname</code> without <code>rootURL</code> or <code>baseURL</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#setURL",
      "fields": [
        {
          "name": "name",
          "value": "setURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Uses <code>history.pushState</code> to update the url without a page reload.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#replaceURL",
      "fields": [
        {
          "name": "name",
          "value": "replaceURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Uses <code>history.replaceState</code> to update the url without a page reload\nor history modification.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#pushState",
      "fields": [
        {
          "name": "name",
          "value": "pushState",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Pushes a new state.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#replaceState",
      "fields": [
        {
          "name": "name",
          "value": "replaceState",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the current state.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#onUpdateURL",
      "fields": [
        {
          "name": "name",
          "value": "onUpdateURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Register a callback to be invoked whenever the browser\nhistory changes, including using forward and back buttons.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#formatURL",
      "fields": [
        {
          "name": "name",
          "value": "formatURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used when using <code>{{action}}</code> helper.  The url is always appended to the rootURL.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#getHash",
      "fields": [
        {
          "name": "name",
          "value": "getHash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.HistoryLocation#rootURL",
      "fields": [
        {
          "name": "name",
          "value": "rootURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Will be pre-pended to path upon state change</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.HistoryLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation",
      "fields": [
        {
          "name": "name",
          "value": "Ember.NoneLocation",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ember.NoneLocation does not interact with the browser. It is useful for\ntesting, or when you need to manage state with your Router, but temporarily\ndon&#39;t want it to muck with the URL (for example when you embed your\napplication in a larger page).</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#getURL",
      "fields": [
        {
          "name": "name",
          "value": "getURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current path.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#setURL",
      "fields": [
        {
          "name": "name",
          "value": "setURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the path and remembers what was set. Using this method\nto change the path will not invoke the <code>updateURL</code> callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#onUpdateURL",
      "fields": [
        {
          "name": "name",
          "value": "onUpdateURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Register a callback to be invoked when the path changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after <code>setURL</code> is invoked.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#handleURL",
      "fields": [
        {
          "name": "name",
          "value": "handleURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the path and calls the <code>updateURL</code> callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#formatURL",
      "fields": [
        {
          "name": "name",
          "value": "formatURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a URL, formats it to be placed into the page as part\nof an element&#39;s <code>href</code> attribute.</p>\n<p>This is used, for example, when using the {{action}} helper\nto generate a URL based on an event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.NoneLocation#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.NoneLocation",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Route",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.Route</code> class is used to define individual routes. Refer to\nthe <a href=\"http://emberjs.com/guides/routing/\">routing guide</a> for documentation.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Route#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sends an action to the router, which will delegate it to the currently\nactive route hierarchy per the bubbling rules explained under <code>actions</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'index'</span>);\n});\n\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    track: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg)</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.log(arg, <span class=\"hljs-string\">'was clicked'</span>);\n    }\n  }\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    trackIfDebug: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(arg)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (debug) {\n        <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'track'</span>, arg);\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didEat'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(food)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'person ate some '</span> + food);\n});\n\nperson.trigger(<span class=\"hljs-string\">'didEat'</span>, <span class=\"hljs-string\">'broccoli'</span>);\n\n<span class=\"hljs-comment\">// outputs: person ate some broccoli</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_stashNames",
      "fields": [
        {
          "name": "name",
          "value": "_stashNames",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_updatingQPChanged",
      "fields": [
        {
          "name": "name",
          "value": "_updatingQPChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#paramsFor",
      "fields": [
        {
          "name": "name",
          "value": "paramsFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves parameters, for current route using the state.params\nvariable and getQueryParamsFor, using the supplied routeName.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#serializeQueryParamKey",
      "fields": [
        {
          "name": "name",
          "value": "serializeQueryParamKey",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Serializes the query parameter key</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#serializeQueryParam",
      "fields": [
        {
          "name": "name",
          "value": "serializeQueryParam",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Serializes value of the query parameter based on defaultValueType</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#deserializeQueryParam",
      "fields": [
        {
          "name": "name",
          "value": "deserializeQueryParam",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Deserializes value of the query parameter based on defaultValueType</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#resetController",
      "fields": [
        {
          "name": "name",
          "value": "resetController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hook you can use to reset controller values either when the model\nchanges or the route is exiting.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ArticlesRoute = Ember.Route.extend({\n  <span class=\"hljs-comment\">// ...</span>\n\n  resetController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(controller, isExiting, transition)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (isExiting) {\n      controller.set(<span class=\"hljs-string\">'page'</span>, <span class=\"hljs-number\">1</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#exit",
      "fields": [
        {
          "name": "name",
          "value": "exit",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_reset",
      "fields": [
        {
          "name": "name",
          "value": "_reset",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#enter",
      "fields": [
        {
          "name": "name",
          "value": "enter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#activate",
      "fields": [
        {
          "name": "name",
          "value": "activate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This hook is executed when the router enters the route. It is not executed\nwhen the model for the route changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#deactivate",
      "fields": [
        {
          "name": "name",
          "value": "deactivate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This hook is executed when the router completely exits this route. It is\nnot executed when the model for the route changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#events",
      "fields": [
        {
          "name": "name",
          "value": "events",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#transitionTo",
      "fields": [
        {
          "name": "name",
          "value": "transitionTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition the application into another route. The route may\nbe either a single route or route path:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogPosts'</span>);\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogPosts.recentEntries'</span>);</pre></td>      </tr>    </table>  </div></div><p>Optionally supply a model for the route in question. The model\nwill be serialized into the URL using the <code>serialize</code> hook of\nthe route:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogPost'</span>, aPost);</pre></td>      </tr>    </table>  </div></div><p>If a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the <code>model</code>\nhook of the route will be triggered:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>Multiple models will be applied last to first recursively up the\nresource tree.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogPost'</span>, { path:<span class=\"hljs-string\">':blogPostId'</span> }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'blogComment'</span>, { path: <span class=\"hljs-string\">':blogCommentId'</span> });\n  });\n});\n\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogComment'</span>, aPost, aComment);\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogComment'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>);</pre></td>      </tr>    </table>  </div></div><p>It is also possible to pass a URL (a string that starts with a\n<code>/</code>). This is intended for testing and debugging purposes and\nshould rarely be used in production code.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'/'</span>);\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'/blog/post/1/comment/13'</span>);\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'/blog/posts?sort=title'</span>);</pre></td>      </tr>    </table>  </div></div><p>An options hash with a <code>queryParams</code> property may be provided as\nthe final argument to add query parameters to the destination URL.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'blogPost'</span>, <span class=\"hljs-number\">1</span>, {\n  queryParams: {showComments: <span class=\"hljs-string\">'true'</span>}\n});\n\n<span class=\"hljs-comment\">// if you just want to transition the query parameters without changing the route</span>\n<span class=\"hljs-keyword\">this</span>.transitionTo({queryParams: {sort: <span class=\"hljs-string\">'date'</span>}});</pre></td>      </tr>    </table>  </div></div><p>See also &#39;replaceWith&#39;.</p>\n<p>Simple Transition Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'index'</span>);\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'secret'</span>);\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'fourOhFour'</span>, { path: <span class=\"hljs-string\">'*:'</span> });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    moveToSecret: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(context)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (authorized()) {\n        <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'secret'</span>, context);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'fourOhFour'</span>);\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Transition to a nested route</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'articles'</span>, { path: <span class=\"hljs-string\">'/articles'</span> }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'new'</span>);\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    transitionToNewArticle: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'articles.new'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Multiple Models Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'index'</span>);\n\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'breakfast'</span>, { path: <span class=\"hljs-string\">':breakfastId'</span> }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'cereal'</span>, { path: <span class=\"hljs-string\">':cerealId'</span> });\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    moveToChocolateCereal: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">var</span> cereal = { cerealId: <span class=\"hljs-string\">'ChocolateYumminess'</span> };\n      <span class=\"hljs-keyword\">var</span> breakfast = { breakfastId: <span class=\"hljs-string\">'CerealAndMilk'</span> };\n\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'cereal'</span>, breakfast, cereal);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Nested Route with Query String Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'fruits'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'apples'</span>);\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    transitionToApples: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'fruits.apples'</span>, {queryParams: {color: <span class=\"hljs-string\">'red'</span>}});\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#intermediateTransitionTo",
      "fields": [
        {
          "name": "name",
          "value": "intermediateTransitionTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Perform a synchronous transition into another route without attempting\nto resolve promises, update the URL, or abort any currently active\nasynchronous transitions (i.e. regular transitions caused by\n<code>transitionTo</code> or URL changes).</p>\n<p>This method is handy for performing intermediate transitions on the\nway to a final destination route, and is called internally by the\ndefault implementations of the <code>error</code> and <code>loading</code> handlers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#refresh",
      "fields": [
        {
          "name": "name",
          "value": "refresh",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Refresh the model on this route and any child routes, firing the\n<code>beforeModel</code>, <code>model</code>, and <code>afterModel</code> hooks in a similar fashion\nto how routes are entered when transitioning in from other route.\nThe current route params (e.g. <code>article_id</code>) will be passed in\nto the respective model hooks, and if a different model is returned,\n<code>setupController</code> and associated route hooks will re-fire as well.</p>\n<p>An example usage of this method is re-querying the server for the\nlatest information using the same parameters as when the route\nwas first entered.</p>\n<p>Note that this will cause <code>model</code> hooks to fire even on routes\nthat were provided a model object when the route was initially\nentered.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#replaceWith",
      "fields": [
        {
          "name": "name",
          "value": "replaceWith",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to <code>transitionTo</code> in all other respects. See\n&#39;transitionTo&#39; for additional information regarding multiple models.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'index'</span>);\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'secret'</span>);\n});\n\nApp.SecretRoute = Ember.Route.extend({\n  afterModel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!authorized()){\n      <span class=\"hljs-keyword\">this</span>.replaceWith(<span class=\"hljs-string\">'index'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#setup",
      "fields": [
        {
          "name": "name",
          "value": "setup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This hook is the entry point for router.js</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#beforeModel",
      "fields": [
        {
          "name": "name",
          "value": "beforeModel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This hook is the first of the route entry validation hooks\ncalled when an attempt is made to transition into a route\nor one of its children. It is called before <code>model</code> and\n<code>afterModel</code>, and is appropriate for cases when:</p>\n<p>1) A decision can be made to redirect elsewhere without\n   needing to resolve the model first.\n2) Any async operations need to occur first before the\n   model is attempted to be resolved.</p>\n<p>This hook is provided the current <code>transition</code> attempt\nas a parameter, which can be used to <code>.abort()</code> the transition,\nsave it for a later <code>.retry()</code>, or retrieve values set\non it from a previous hook. You can also just call\n<code>this.transitionTo</code> to another route to implicitly\nabort the <code>transition</code>.</p>\n<p>You can return a promise from this hook to pause the\ntransition until the promise resolves (or rejects). This could\nbe useful, for instance, for retrieving async code from\nthe server that is required to enter a route.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostRoute = Ember.Route.extend({\n  beforeModel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(transition)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!App.Post) {\n      <span class=\"hljs-keyword\">return</span> Ember.$.getScript(<span class=\"hljs-string\">'/models/post.js'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>If <code>App.Post</code> doesn&#39;t exist in the above example,\n<code>beforeModel</code> will use jQuery&#39;s <code>getScript</code>, which\nreturns a promise that resolves after the server has\nsuccessfully retrieved and executed the code from the\nserver. Note that if an error were to occur, it would\nbe passed to the <code>error</code> hook on <code>Ember.Route</code>, but\nit&#39;s also possible to handle errors specific to\n<code>beforeModel</code> right from within the hook (to distinguish\nfrom the shared error handling behavior of the <code>error</code>\nhook):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostRoute = Ember.Route.extend({\n  beforeModel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(transition)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!App.Post) {\n      <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n      <span class=\"hljs-keyword\">return</span> Ember.$.getScript(<span class=\"hljs-string\">'post.js'</span>).then(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span> </span>{\n        self.transitionTo(<span class=\"hljs-string\">'help'</span>);\n\n        <span class=\"hljs-comment\">// Note that the above transitionTo will implicitly</span>\n        <span class=\"hljs-comment\">// halt the transition. If you were to return</span>\n        <span class=\"hljs-comment\">// nothing from this promise reject handler,</span>\n        <span class=\"hljs-comment\">// according to promise semantics, that would</span>\n        <span class=\"hljs-comment\">// convert the reject into a resolve and the</span>\n        <span class=\"hljs-comment\">// transition would continue. To propagate the</span>\n        <span class=\"hljs-comment\">// error so that it'd be handled by the `error`</span>\n        <span class=\"hljs-comment\">// hook, you would have to</span>\n        <span class=\"hljs-keyword\">return</span> Ember.RSVP.reject(e);\n      });\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#afterModel",
      "fields": [
        {
          "name": "name",
          "value": "afterModel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This hook is called after this route&#39;s model has resolved.\nIt follows identical async/promise semantics to <code>beforeModel</code>\nbut is provided the route&#39;s resolved model in addition to\nthe <code>transition</code>, and is therefore suited to performing\nlogic that can only take place after the model has already\nresolved.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  afterModel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(posts, transition)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (posts.get(<span class=\"hljs-string\">'length'</span>) === <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'post.show'</span>, posts.get(<span class=\"hljs-string\">'firstObject'</span>));\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Refer to documentation for <code>beforeModel</code> for a description\nof transition-pausing semantics when a promise is returned\nfrom this hook.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#redirect",
      "fields": [
        {
          "name": "name",
          "value": "redirect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hook you can implement to optionally redirect to another route.</p>\n<p>If you call <code>this.transitionTo</code> from inside of this hook, this route\nwill not be entered in favor of the other hook.</p>\n<p><code>redirect</code> and <code>afterModel</code> behave very similarly and are\ncalled almost at the same time, but they have an important\ndistinction in the case that, from one of these hooks, a\nredirect into a child route of this route occurs: redirects\nfrom <code>afterModel</code> essentially invalidate the current attempt\nto enter this route, and will result in this route&#39;s <code>beforeModel</code>,\n<code>model</code>, and <code>afterModel</code> hooks being fired again within\nthe new, redirecting transition. Redirects that occur within\nthe <code>redirect</code> hook, on the other hand, will <em>not</em> cause\nthese hooks to be fired again the second time around; in\nother words, by the time the <code>redirect</code> hook has been called,\nboth the resolved model and attempted entry into this route\nare considered to be fully validated.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the context is changed by router.js.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#model",
      "fields": [
        {
          "name": "name",
          "value": "model",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hook you can implement to convert the URL into the model for\nthis route.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'post'</span>, { path: <span class=\"hljs-string\">'/posts/:post_id'</span> });\n});</pre></td>      </tr>    </table>  </div></div><p>The model for the <code>post</code> route is <code>store.find(&#39;post&#39;, params.post_id)</code>.</p>\n<p>By default, if your route has a dynamic segment ending in <code>_id</code>:</p>\n<ul>\n<li>The model class is determined from the segment (<code>post_id</code>&#39;s\nclass is <code>App.Post</code>)</li>\n<li>The find method is called on the model class with the value of\nthe dynamic segment.</li>\n</ul>\n<p>Note that for routes with dynamic segments, this hook is not always\nexecuted. If the route is entered through a transition (e.g. when\nusing the <code>link-to</code> Handlebars helper or the <code>transitionTo</code> method\nof routes), and a model context is already provided this hook\nis not called.</p>\n<p>A model context does not include a primitive string or number,\nwhich does cause the model hook to be called.</p>\n<p>Routes without dynamic segments will always execute the model hook.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// no dynamic segment, model hook always called</span>\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'posts'</span>);\n\n<span class=\"hljs-comment\">// model passed in, so model hook not called</span>\nthePost = store.find(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'post'</span>, thePost);\n\n<span class=\"hljs-comment\">// integer passed in, model hook is called</span>\n<span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>);</pre></td>      </tr>    </table>  </div></div><p>This hook follows the asynchronous/promise semantics\ndescribed in the documentation for <code>beforeModel</code>. In particular,\nif a promise returned from <code>model</code> fails, the error will be\nhandled by the <code>error</code> hook on <code>Ember.Route</code>.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(params)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.store.find(<span class=\"hljs-string\">'post'</span>, params.post_id);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#deserialize",
      "fields": [
        {
          "name": "name",
          "value": "deserialize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#findModel",
      "fields": [
        {
          "name": "name",
          "value": "findModel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#store",
      "fields": [
        {
          "name": "name",
          "value": "store",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Store property provides a hook for data persistence libraries to inject themselves.</p>\n<p>By default, this store property provides the exact same functionality previously\nin the model hook.</p>\n<p>Currently, the required interface is:</p>\n<p><code>store.find(modelName, findArguments)</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#serialize",
      "fields": [
        {
          "name": "name",
          "value": "serialize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hook you can implement to convert the route&#39;s model into parameters\nfor the URL.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'post'</span>, { path: <span class=\"hljs-string\">'/posts/:post_id'</span> });\n});\n\nApp.PostRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(params)</span> </span>{\n    <span class=\"hljs-comment\">// the server returns `{ id: 12 }`</span>\n    <span class=\"hljs-keyword\">return</span> Ember.$.getJSON(<span class=\"hljs-string\">'/posts/'</span> + params.post_id);\n  },\n\n  serialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(model)</span> </span>{\n    <span class=\"hljs-comment\">// this will make the URL `/posts/12`</span>\n    <span class=\"hljs-keyword\">return</span> { post_id: model.id };\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The default <code>serialize</code> method will insert the model&#39;s <code>id</code> into the\nroute&#39;s dynamic segment (in this case, <code>:post_id</code>) if the segment contains &#39;_id&#39;.\nIf the route has multiple dynamic segments or does not contain &#39;_id&#39;, <code>serialize</code>\nwill return <code>Ember.getProperties(model, params)</code></p>\n<p>This method is called when <code>transitionTo</code> is called with a context\nin order to populate the URL.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#setupController",
      "fields": [
        {
          "name": "name",
          "value": "setupController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hook you can use to setup the controller for the current route.</p>\n<p>This method is called with the controller for the current route and the\nmodel supplied by the <code>model</code> hook.</p>\n<p>By default, the <code>setupController</code> hook sets the <code>model</code> property of\nthe controller to the <code>model</code>.</p>\n<p>If you implement the <code>setupController</code> hook in your Route, it will\nprevent this default behavior. If you want to preserve that behavior\nwhen implementing your <code>setupController</code> function, make sure to call\n<code>_super</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PhotosRoute = Ember.Route.extend({\n  model: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.store.find(<span class=\"hljs-string\">'photo'</span>);\n  },\n\n  setupController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(controller, model)</span> </span>{\n    <span class=\"hljs-comment\">// Call _super for default behavior</span>\n    <span class=\"hljs-keyword\">this</span>._super(controller, model);\n    <span class=\"hljs-comment\">// Implement your custom setup after</span>\n    <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">'application'</span>).set(<span class=\"hljs-string\">'showingPhotos'</span>, <span class=\"hljs-literal\">true</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>This means that your template will get a proxy for the model as its\ncontext, and you can act as though the model itself was the context.</p>\n<p>The provided controller will be one resolved based on the name\nof this route.</p>\n<p>If no explicit controller is defined, Ember will automatically create\nan appropriate controller for the model.</p>\n<ul>\n<li>if the model is an <code>Ember.Array</code> (including record arrays from Ember\nData), the controller is an <code>Ember.ArrayController</code>.</li>\n<li>otherwise, the controller is an <code>Ember.ObjectController</code>.</li>\n</ul>\n<p>As an example, consider the router:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'post'</span>, { path: <span class=\"hljs-string\">'/posts/:post_id'</span> });\n});</pre></td>      </tr>    </table>  </div></div><p>For the <code>post</code> route, a controller named <code>App.PostController</code> would\nbe used if it is defined. If it is not defined, an <code>Ember.ObjectController</code>\ninstance would be used.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostRoute = Ember.Route.extend({\n  setupController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(controller, model)</span> </span>{\n    controller.set(<span class=\"hljs-string\">'model'</span>, model);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#controllerFor",
      "fields": [
        {
          "name": "name",
          "value": "controllerFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the controller for a particular route or name.</p>\n<p>The controller instance must already have been created, either through entering the\nassociated route or using <code>generateController</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostRoute = Ember.Route.extend({\n  setupController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(controller, post)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(controller, post);\n    <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">'posts'</span>).set(<span class=\"hljs-string\">'currentPost'</span>, post);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#generateController",
      "fields": [
        {
          "name": "name",
          "value": "generateController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Generates a controller for a route.</p>\n<p>If the optional model is passed then the controller type is determined automatically,\ne.g., an ArrayController for arrays.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostRoute = Ember.Route.extend({\n  setupController: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(controller, post)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(controller, post);\n    <span class=\"hljs-keyword\">this</span>.generateController(<span class=\"hljs-string\">'posts'</span>, post);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#modelFor",
      "fields": [
        {
          "name": "name",
          "value": "modelFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the model of a parent (or any ancestor) route\nin a route hierarchy.  During a transition, all routes\nmust resolve a model object, and if a route\nneeds access to a parent route&#39;s model in order to\nresolve a model (or just reuse the model from a parent),\nit can call <code>this.modelFor(theNameOfParentRoute)</code> to\nretrieve it.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'post'</span>, { path: <span class=\"hljs-string\">'/post/:post_id'</span> }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'comments'</span>);\n    });\n});\n\nApp.CommentsRoute = Ember.Route.extend({\n    afterModel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-keyword\">this</span>.modelFor(<span class=\"hljs-string\">'post'</span>));\n    }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#renderTemplate",
      "fields": [
        {
          "name": "name",
          "value": "renderTemplate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A hook you can use to render the template for the current route.</p>\n<p>This method is called with the controller for the current route and the\nmodel supplied by the <code>model</code> hook. By default, it renders the route&#39;s\ntemplate, configured with the controller for the route.</p>\n<p>This method can be overridden to set up and render additional or\nalternative templates.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(controller, model)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> favController = <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">'favoritePost'</span>);\n\n    <span class=\"hljs-comment\">// Render the `favoritePost` template into</span>\n    <span class=\"hljs-comment\">// the outlet `posts`, and display the `favoritePost`</span>\n    <span class=\"hljs-comment\">// controller.</span>\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'favoritePost'</span>, {\n      outlet: <span class=\"hljs-string\">'posts'</span>,\n      controller: favController\n    });\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#render",
      "fields": [
        {
          "name": "name",
          "value": "render",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>render</code> is used to render a template into a region of another template\n(indicated by an <code>{{outlet}}</code>). <code>render</code> is used both during the entry\nphase of routing (via the <code>renderTemplate</code> hook) and later in response to\nuser interaction.</p>\n<p>For example, given the following minimal router and templates:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'photos'</span>);\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- application.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">'something-in-the-app-hbs'</span>&gt;</span>\n  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\"><span class=\"hljs-keyword\">outlet</span></span> <span class=\"hljs-string\">\"anOutletName\"</span>}}</span><span class=\"xml\">\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- photos.hbs --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span>&gt;</span>Photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span></span></pre></td>      </tr>    </table>  </div></div><p>You can render <code>photos.hbs</code> into the <code>&quot;anOutletName&quot;</code> outlet of\n<code>application.hbs</code> by calling <code>render</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// posts route</span>\nEmber.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'photos'</span>, {\n      into: <span class=\"hljs-string\">'application'</span>,\n      outlet: <span class=\"hljs-string\">'anOutletName'</span>\n    })\n  }\n});</pre></td>      </tr>    </table>  </div></div><p><code>render</code> additionally allows you to supply which <code>view</code>, <code>controller</code>, and\n<code>model</code> objects should be loaded and associated with the rendered template.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// posts route</span>\nEmber.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(controller, model)</span></span>{\n    <span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'posts'</span>, {    <span class=\"hljs-comment\">// the template to render, referenced by name</span>\n      into: <span class=\"hljs-string\">'application'</span>,    <span class=\"hljs-comment\">// the template to render into, referenced by name</span>\n      outlet: <span class=\"hljs-string\">'anOutletName'</span>, <span class=\"hljs-comment\">// the outlet inside `options.template` to render into.</span>\n      view: <span class=\"hljs-string\">'aViewName'</span>,      <span class=\"hljs-comment\">// the view to use for this template, referenced by name</span>\n      controller: <span class=\"hljs-string\">'someControllerName'</span>, <span class=\"hljs-comment\">// the controller to use for this template, referenced by name</span>\n      model: model            <span class=\"hljs-comment\">// the model to set on `options.controller`.</span>\n    })\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The string values provided for the template name, view, and controller\nwill eventually pass through to the resolver for lookup. See\nEmber.Resolver for how these are mapped to JavaScript objects in your\napplication.</p>\n<p>Not all options need to be passed to <code>render</code>. Default values will be used\nbased on the name of the route specified in the router or the Route&#39;s\n<code>controllerName</code>, <code>viewName</code> and <code>templateName</code> properties.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// router</span>\nRouter.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'index'</span>);\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'post'</span>, { path: <span class=\"hljs-string\">'/posts/:post_id'</span> });\n});</pre></td>      </tr>    </table>  </div></div><div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">// post route</span>\nPostRoute = App.Route.extend({\n  renderTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.render(); <span class=\"hljs-comment\">// all defaults apply</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The name of the <code>PostRoute</code>, defined by the router, is <code>post</code>.</p>\n<p>The following equivalent default options will be applied when\nthe Route calls <code>render</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-comment\">//</span>\n<span class=\"hljs-keyword\">this</span>.render(<span class=\"hljs-string\">'post'</span>, {  <span class=\"hljs-comment\">// the template name associated with 'post' Route</span>\n  into: <span class=\"hljs-string\">'application'</span>, <span class=\"hljs-comment\">// the parent route to 'post' Route</span>\n  outlet: <span class=\"hljs-string\">'main'</span>,      <span class=\"hljs-comment\">// {{outlet}} and {{outlet 'main' are synonymous}},</span>\n  view: <span class=\"hljs-string\">'post'</span>,        <span class=\"hljs-comment\">// the view associated with the 'post' Route</span>\n  controller: <span class=\"hljs-string\">'post'</span>,  <span class=\"hljs-comment\">// the controller associated with the 'post' Route</span>\n})</pre></td>      </tr>    </table>  </div></div><p>By default the controller&#39;s <code>model</code> will be the route&#39;s model, so it does not\nneed to be passed unless you wish to change which model is being used.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#disconnectOutlet",
      "fields": [
        {
          "name": "name",
          "value": "disconnectOutlet",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Disconnects a view that has been rendered into an outlet.</p>\n<p>You may pass any or all of the following options to <code>disconnectOutlet</code>:</p>\n<ul>\n<li><code>outlet</code>: the name of the outlet to clear (default: &#39;main&#39;)</li>\n<li><code>parentView</code>: the name of the view containing the outlet to clear\n (default: the view rendered by the parent route)</li>\n</ul>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationRoute = App.Route.extend({\n  actions: {\n    showModal: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(evt)</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.render(evt.modalName, {\n        outlet: <span class=\"hljs-string\">'modal'</span>,\n        into: <span class=\"hljs-string\">'application'</span>\n      });\n    },\n    hideModal: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(evt)</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.disconnectOutlet({\n        outlet: <span class=\"hljs-string\">'modal'</span>,\n        parentView: <span class=\"hljs-string\">'application'</span>\n      });\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Alternatively, you can pass the <code>outlet</code> name directly as a string.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">hideModal: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(evt)</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.disconnectOutlet(<span class=\"hljs-string\">'modal'</span>);\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#teardownViews",
      "fields": [
        {
          "name": "name",
          "value": "teardownViews",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#queryParams",
      "fields": [
        {
          "name": "name",
          "value": "queryParams",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Configuration hash for this route&#39;s queryParams. The possible\nconfiguration options and their defaults are as follows\n(assuming a query param whose URL key is <code>page</code>):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">queryParams: {\n  page: {\n    <span class=\"hljs-comment\">// By default, controller query param properties don't</span>\n    <span class=\"hljs-comment\">// cause a full transition when they are changed, but</span>\n    <span class=\"hljs-comment\">// rather only cause the URL to update. Setting</span>\n    <span class=\"hljs-comment\">// `refreshModel` to true will cause an \"in-place\"</span>\n    <span class=\"hljs-comment\">// transition to occur, whereby the model hooks for</span>\n    <span class=\"hljs-comment\">// this route (and any child routes) will re-fire, allowing</span>\n    <span class=\"hljs-comment\">// you to reload models (e.g., from the server) using the</span>\n    <span class=\"hljs-comment\">// updated query param values.</span>\n    refreshModel: <span class=\"hljs-literal\">false</span>,\n\n    <span class=\"hljs-comment\">// By default, changes to controller query param properties</span>\n    <span class=\"hljs-comment\">// cause the URL to update via `pushState`, which means an</span>\n    <span class=\"hljs-comment\">// item will be added to the browser's history, allowing</span>\n    <span class=\"hljs-comment\">// you to use the back button to restore the app to the</span>\n    <span class=\"hljs-comment\">// previous state before the query param property was changed.</span>\n    <span class=\"hljs-comment\">// Setting `replace` to true will use `replaceState` (or its</span>\n    <span class=\"hljs-comment\">// hash location equivalent), which causes no browser history</span>\n    <span class=\"hljs-comment\">// item to be added. This options name and default value are</span>\n    <span class=\"hljs-comment\">// the same as the `link-to` helper's `replace` option.</span>\n    replace: <span class=\"hljs-literal\">false</span>\n  }\n}</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_qp",
      "fields": [
        {
          "name": "name",
          "value": "_qp",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_names",
      "fields": [
        {
          "name": "name",
          "value": "_names",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_updateSerializedQPValue",
      "fields": [
        {
          "name": "name",
          "value": "_updateSerializedQPValue",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_activeQPChanged",
      "fields": [
        {
          "name": "name",
          "value": "_activeQPChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_fireQueryParamTransition",
      "fields": [
        {
          "name": "name",
          "value": "_fireQueryParamTransition",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#_optionsForQueryParam",
      "fields": [
        {
          "name": "name",
          "value": "_optionsForQueryParam",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#viewName",
      "fields": [
        {
          "name": "name",
          "value": "viewName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the view to use by default when rendering this routes template.</p>\n<p>When rendering a template, the route will, by default, determine the\ntemplate and view to use from the name of the route itself. If you need to\ndefine a specific view, set this property.</p>\n<p>This is useful when multiple routes would benefit from using the same view\nbecause it doesn&#39;t require a custom <code>renderTemplate</code> method. For example,\nthe following routes will all render using the <code>App.PostsListView</code> view:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> PostsList = Ember.Route.extend({\n  viewName: <span class=\"hljs-string\">'postsList'</span>\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to use by default when rendering this routes\ntemplate.</p>\n<p>This is similar with <code>viewName</code>, but is useful when you just want a custom\ntemplate without a view.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> PostsList = Ember.Route.extend({\n  templateName: <span class=\"hljs-string\">'posts/list'</span>\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#controllerName",
      "fields": [
        {
          "name": "name",
          "value": "controllerName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the controller to associate with this route.</p>\n<p>By default, Ember will lookup a route&#39;s controller that matches the name\nof the route (i.e. <code>App.PostController</code> for <code>App.PostRoute</code>). However,\nif you would like to define a specific controller to use, you can do so\nusing this property.</p>\n<p>This is useful in many ways, as the controller specified will be:</p>\n<ul>\n<li>passed to the <code>setupController</code> method.</li>\n<li>used as the controller for the view being rendered by the route.</li>\n<li>returned from a call to <code>controllerFor</code> for the route.</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#controller",
      "fields": [
        {
          "name": "name",
          "value": "controller",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The controller associated with this route.</p>\n<p>Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.FormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(transition)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.controller.get(<span class=\"hljs-string\">'userHasEnteredData'</span>) &amp;&amp;\n          !confirm(<span class=\"hljs-string\">'Are you sure you want to abandon progress?'</span>)) {\n        transition.abort();\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// Bubble the `willTransition` action so that</span>\n        <span class=\"hljs-comment\">// parent routes can decide whether or not to abort.</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#willTransition",
      "fields": [
        {
          "name": "name",
          "value": "willTransition",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>willTransition</code> action is fired at the beginning of any\nattempted transition with a <code>Transition</code> object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.</p>\n<p>A good example is preventing navigation when a form is\nhalf-filled out:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ContactFormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(transition)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.controller.get(<span class=\"hljs-string\">'userHasEnteredData'</span>)) {\n        <span class=\"hljs-keyword\">this</span>.controller.displayNavigationConfirm();\n        transition.abort();\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>You can also redirect elsewhere by calling\n<code>this.transitionTo(&#39;elsewhere&#39;)</code> from within <code>willTransition</code>.\nNote that <code>willTransition</code> will not be fired for the\nredirecting <code>transitionTo</code>, since <code>willTransition</code> doesn&#39;t\nfire when there is already a transition underway. If you want\nsubsequent <code>willTransition</code> actions to fire for the redirecting\ntransition, you must first explicitly call\n<code>transition.abort()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#didTransition",
      "fields": [
        {
          "name": "name",
          "value": "didTransition",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>didTransition</code> action is fired after a transition has\nsuccessfully been completed. This occurs after the normal model\nhooks (<code>beforeModel</code>, <code>model</code>, <code>afterModel</code>, <code>setupController</code>)\nhave resolved. The <code>didTransition</code> action has no arguments,\nhowever, it can be useful for tracking page views or resetting\nstate on the controller.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.LoginRoute = Ember.Route.extend({\n  actions: {\n    didTransition: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controller.get(<span class=\"hljs-string\">'errors.base'</span>).clear();\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Bubble the didTransition event</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#loading",
      "fields": [
        {
          "name": "name",
          "value": "loading",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>loading</code> action is fired on the route when a route&#39;s <code>model</code>\nhook returns a promise that is not already resolved. The current\n<code>Transition</code> object is the first parameter and the route that\ntriggered the loading event is the second parameter.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    loading: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(transition, route)</span> </span>{\n      <span class=\"hljs-keyword\">var</span> view = Ember.View.create({\n        classNames: [<span class=\"hljs-string\">'app-loading'</span>]\n      })\n      .append();\n\n      <span class=\"hljs-keyword\">this</span>.router.one(<span class=\"hljs-string\">'didTransition'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        view.destroy();\n      });\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Bubble the loading event</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Route#error",
      "fields": [
        {
          "name": "name",
          "value": "error",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When attempting to transition into a route, any of the hooks\nmay return a promise that rejects, at which point an <code>error</code>\naction will be fired on the partially-entered routes, allowing\nfor per-route error handling logic, or shared error handling\nlogic defined on a parent route.</p>\n<p>Here is an example of an error handler that will be invoked\nfor rejected promises from the various hooks on the route,\nas well as any unhandled errors from child routes:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.AdminRoute = Ember.Route.extend({\n  beforeModel: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> Ember.RSVP.reject(<span class=\"hljs-string\">'bad things!'</span>);\n  },\n\n  actions: {\n    error: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error, transition)</span> </span>{\n      <span class=\"hljs-comment\">// Assuming we got here due to the error in `beforeModel`,</span>\n      <span class=\"hljs-comment\">// we can expect that error === \"bad things!\",</span>\n      <span class=\"hljs-comment\">// but a promise model rejecting would also</span>\n      <span class=\"hljs-comment\">// call this hook, as would any errors encountered</span>\n      <span class=\"hljs-comment\">// in `afterModel`.</span>\n\n      <span class=\"hljs-comment\">// The `error` hook is also provided the failed</span>\n      <span class=\"hljs-comment\">// `transition`, which can be stored and later</span>\n      <span class=\"hljs-comment\">// `.retry()`d if desired.</span>\n\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">'login'</span>);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p><code>error</code> actions that bubble up all the way to <code>ApplicationRoute</code>\nwill fire a default error handler that logs the error. You can\nspecify your own global default error handler by overriding the\n<code>error</code> handler on <code>ApplicationRoute</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    error: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error, transition)</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">'banner'</span>).displayError(error.message);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Route",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Router",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.Router</code> class manages the application state and URLs. Refer to\nthe <a href=\"http://emberjs.com/guides/routing/\">routing guide</a> for documentation.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Router#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didEat'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(food)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'person ate some '</span> + food);\n});\n\nperson.trigger(<span class=\"hljs-string\">'didEat'</span>, <span class=\"hljs-string\">'broccoli'</span>);\n\n<span class=\"hljs-comment\">// outputs: person ate some broccoli</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#url",
      "fields": [
        {
          "name": "name",
          "value": "url",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Represents the current URL.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#startRouting",
      "fields": [
        {
          "name": "name",
          "value": "startRouting",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Initializes the current router instance and sets up the change handling\nevent listeners used by the instances <code>location</code> implementation.</p>\n<p>A property named <code>initialURL</code> will be used to determine the initial URL.\nIf no value is found <code>/</code> will be used.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#didTransition",
      "fields": [
        {
          "name": "name",
          "value": "didTransition",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handles updating the paths and notifying any listeners of the URL\nchange.</p>\n<p>Triggers the router level <code>didTransition</code> hook.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#willTransition",
      "fields": [
        {
          "name": "name",
          "value": "willTransition",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handles notifying any listeners of an impending URL\nchange.</p>\n<p>Triggers the router level <code>willTransition</code> hook.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#isActive",
      "fields": [
        {
          "name": "name",
          "value": "isActive",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Determines if the supplied route is currently active.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#isActiveIntent",
      "fields": [
        {
          "name": "name",
          "value": "isActiveIntent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An alternative form of <code>isActive</code> that doesn&#39;t require\nmanual concatenation of the arguments into a single\narray.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#hasRoute",
      "fields": [
        {
          "name": "name",
          "value": "hasRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Does this router instance have the given route.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#reset",
      "fields": [
        {
          "name": "name",
          "value": "reset",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Resets the state of the router by clearing the current route\nhandlers and deactivating them.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Router.map</code> function allows you to define mappings from URLs to routes\nand resources in your application. These mappings are defined within the\nsupplied callback function using <code>this.resource</code> and <code>this.route</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Router.map(function({\n  this.route('about');\n  this.resource('article');\n}));</pre></td>      </tr>    </table>  </div></div><p>For more detailed examples please see\n<a href=\"http://emberjs.com/guides/routing/defining-your-routes/\">the guides</a>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#location",
      "fields": [
        {
          "name": "name",
          "value": "location",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>location</code> property determines the type of URL&#39;s that your\napplication will use.</p>\n<p>The following location types are currently available:</p>\n<ul>\n<li><code>hash</code></li>\n<li><code>history</code></li>\n<li><code>none</code></li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Router#rootURL",
      "fields": [
        {
          "name": "name",
          "value": "rootURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Represents the URL of the root of the application, often &#39;/&#39;. This prefix is\nassumed on all routes defined on this router.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Router",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView",
      "fields": [
        {
          "name": "name",
          "value": "Ember.LinkView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>Ember.LinkView</code> renders an element whose <code>click</code> event triggers a\ntransition of the application&#39;s instance of <code>Ember.Router</code> to\na supplied route by name.</p>\n<p>Instances of <code>LinkView</code> will most likely be created through\nthe <code>link-to</code> Handlebars helper, but properties of this class\ncan be overridden to customize application-wide behavior.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when LinkView objects are instantiated.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyLinkView = Ember.LinkView.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n    Ember.Logger.log(<span class=\"hljs-string\">'Event is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'eventName'</span>));\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You must call <code>destroy</code> on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes to a named event with given function.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.on(<span class=\"hljs-string\">'didLoad'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// fired once the person has loaded</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An optional target can be passed in as the 2nd argument that will\nbe set as the &quot;this&quot; for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#one",
      "fields": [
        {
          "name": "name",
          "value": "one",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use <code>one</code> when\nyou only care about the first time an event has taken place.</p>\n<p>This function takes an optional 2nd argument that will become the &quot;this&quot;\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override the default event firing from <code>Ember.Evented</code> to\nalso call methods with the given name.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Cancels subscription for given name, target, and method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#has",
      "fields": [
        {
          "name": "name",
          "value": "has",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Checks to see if object has any subscriptions for named event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#willMergeMixin",
      "fields": [
        {
          "name": "name",
          "value": "willMergeMixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Moves <code>actions</code> to <code>_actions</code> at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#send",
      "fields": [
        {
          "name": "name",
          "value": "send",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers a named action on the <code>ActionHandler</code>. Any parameters\nsupplied after the <code>actionName</code> string will be passed as arguments\nto the action target function.</p>\n<p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may\nbubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can\nnot be found in the <code>ActionHandler</code>&#39;s <code>actions</code> hash or if the\naction target function returns <code>true</code>.</p>\n<p>Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>, <span class=\"hljs-string\">'theme.mp3'</span>);\n    },\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(track)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_contextDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_contextDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#nearestOfType",
      "fields": [
        {
          "name": "name",
          "value": "nearestOfType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that is an instance of the provided\nclass or mixin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#nearestWithProperty",
      "fields": [
        {
          "name": "name",
          "value": "nearestWithProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Return the nearest ancestor that has a given property.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "_parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>When the parent view changes, recursively invalidate <code>controller</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#rerender",
      "fields": [
        {
          "name": "name",
          "value": "rerender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.</p>\n<p>If children were added during the rendering process using <code>appendChild</code>,\n<code>rerender</code> will remove them, because they will be added again\nif needed by the next <code>render</code>.</p>\n<p>In general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling <code>rerender</code>, which can\nbe slow.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_classStringForProperty",
      "fields": [
        {
          "name": "name",
          "value": "_classStringForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.</p>\n<p>For example, if the view has property <code>isUrgent</code> that evaluates to true,\npassing <code>isUrgent</code> to this method will return <code>&quot;is-urgent&quot;</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#$",
      "fields": [
        {
          "name": "name",
          "value": "$",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a jQuery object for this view&#39;s element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.</p>\n<p>For example, calling <code>view.$(&#39;li&#39;)</code> will return a jQuery object containing\nall of the <code>li</code> elements inside the DOM element of this view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#appendTo",
      "fields": [
        {
          "name": "name",
          "value": "appendTo",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the specified parent element.</p>\n<p>If the view does not have an HTML representation yet, <code>createElement()</code>\nwill be called automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.</p>\n<p>This is not typically a function that you will need to call directly when\nbuilding your application. You might consider using <code>Ember.ContainerView</code>\ninstead. If you do need to use <code>appendTo</code>, be sure that the target element\nyou are providing is associated with an <code>Ember.Application</code> and does not\nhave an ancestor element that is associated with an Ember view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#replaceIn",
      "fields": [
        {
          "name": "name",
          "value": "replaceIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replaces the content of the specified parent element with this view&#39;s\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#append",
      "fields": [
        {
          "name": "name",
          "value": "append",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Appends the view&#39;s element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.</p>\n<p>If your application uses the <code>rootElement</code> property, you must append\nthe view within that element. Rendering views outside of the <code>rootElement</code>\nis not supported.</p>\n<p>Note that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#remove",
      "fields": [
        {
          "name": "name",
          "value": "remove",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view&#39;s element from the element to which it is attached.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#findElementInParentElement",
      "fields": [
        {
          "name": "name",
          "value": "findElementInParentElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of <code>elementId</code> (or the\nview&#39;s guid if <code>elementId</code> is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#createElement",
      "fields": [
        {
          "name": "name",
          "value": "createElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a DOM representation of the view and all of its child views by\nrecursively calling the <code>render()</code> method.</p>\n<p>After the element has been inserted into the DOM, <code>didInsertElement</code> will\nbe called on this view and all of its child views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#destroyElement",
      "fields": [
        {
          "name": "name",
          "value": "destroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.</p>\n<p>If you implement <code>willDestroyElement()</code> on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.</p>\n<p>If you write a <code>willDestroyElement()</code> handler, you can assume that your\n<code>didInsertElement()</code> handler was called earlier for the same element.</p>\n<p>You should not call or override this method yourself, but you may\nwant to implement the above callbacks.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#removeFromParent",
      "fields": [
        {
          "name": "name",
          "value": "removeFromParent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Removes the view from its <code>parentView</code>, if one is found. Otherwise\ndoes nothing.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#handleEvent",
      "fields": [
        {
          "name": "name",
          "value": "handleEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Handle events from <code>Ember.EventDispatcher</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_paramsChanged",
      "fields": [
        {
          "name": "name",
          "value": "_paramsChanged",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This method is invoked by observers installed during <code>init</code> that fire\nwhenever the params change</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_setupPathObservers",
      "fields": [
        {
          "name": "name",
          "value": "_setupPathObservers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is called to setup observers that will trigger a rerender.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_invoke",
      "fields": [
        {
          "name": "name",
          "value": "_invoke",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Event handler that invokes the link, activating the associated route.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#_eagerUpdateUrl",
      "fields": [
        {
          "name": "name",
          "value": "_eagerUpdateUrl",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#actions",
      "fields": [
        {
          "name": "name",
          "value": "actions",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The collection of functions, keyed by name, available on this\n<code>ActionHandler</code> as action targets.</p>\n<p>These functions will be invoked when a matching <code>{{action}}</code> is triggered\nfrom within a template and the application&#39;s current route is this route.</p>\n<p>Actions can also be invoked from other parts of your application\nvia <code>ActionHandler#send</code>.</p>\n<p>The <code>actions</code> hash will inherit action handlers from\nthe <code>actions</code> hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n});\n\n<span class=\"hljs-comment\">// `WelcomeRoute`, when active, will be able to respond</span>\n<span class=\"hljs-comment\">// to both actions, since the actions hash is merged rather</span>\n<span class=\"hljs-comment\">// then replaced when extending mixins / parent classes.</span>\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'displayBanner'</span>);\n<span class=\"hljs-keyword\">this</span>.send(<span class=\"hljs-string\">'playMusic'</span>);</pre></td>      </tr>    </table>  </div></div><p>Within a Controller, Route, View or Component&#39;s action handler,\nthe value of the <code>this</code> context is the Controller, Route, View or\nComponent object:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">this</span>.controllerFor(<span class=\"hljs-string\">\"song\"</span>);\n      <span class=\"hljs-keyword\">this</span>.transitionTo(<span class=\"hljs-string\">\"other.route\"</span>);\n      ...\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>It is also possible to call <code>this._super.apply(this, arguments)</code> from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:</p>\n<p>Take for example the following routes:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-built_in\">console</span>.debug(<span class=\"hljs-string\">\"trololo\"</span>);\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// also call the debugRouteInformation of mixed in App.DebugRoute</span>\n      <span class=\"hljs-keyword\">this</span>._super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n      <span class=\"hljs-comment\">// show additional annoyance</span>\n      <span class=\"hljs-built_in\">window</span>.alert(...);\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"bubbling\">Bubbling</h2>\n<p>By default, an action will stop bubbling once a handler defined\non the <code>actions</code> hash handles it. To continue bubbling the action,\nyou must return <code>true</code> from the handler:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">\"album\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"song\"</span>);\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-comment\">// ...</span>\n\n      <span class=\"hljs-keyword\">if</span> (actionShouldAlsoBeTriggeredOnParentRoute) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#parentView",
      "fields": [
        {
          "name": "name",
          "value": "parentView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#isView",
      "fields": [
        {
          "name": "name",
          "value": "isView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#templateName",
      "fields": [
        {
          "name": "name",
          "value": "templateName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the template to lookup if no template is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#layoutName",
      "fields": [
        {
          "name": "name",
          "value": "layoutName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The name of the layout to lookup if no layout is provided.</p>\n<p>By default <code>Ember.View</code> will lookup a template with this name in\n<code>Ember.TEMPLATES</code> (a shared global object).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#template",
      "fields": [
        {
          "name": "name",
          "value": "template",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.</p>\n<p>In general, you should set the <code>templateName</code> property instead of setting\nthe template yourself.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#layout",
      "fields": [
        {
          "name": "name",
          "value": "layout",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>A view may contain a layout. A layout is a regular template but\nsupersedes the <code>template</code> property during rendering. It is the\nresponsibility of the layout template to retrieve the <code>template</code>\nproperty from the view (or alternatively, call <code>Handlebars.helpers.yield</code>,\n<code>{{yield}}</code>) to render it in the correct location.</p>\n<p>This is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the <code>template</code> property\non a subclass.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#element",
      "fields": [
        {
          "name": "name",
          "value": "element",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current DOM element for the view.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#elementId",
      "fields": [
        {
          "name": "name",
          "value": "elementId",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The HTML <code>id</code> of the view&#39;s element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):</p>\n<div class=\"highlight handlebars\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"handlebars\"><span class=\"xml\">  </span><span class=\"hljs-expression\">{{<span class=\"hljs-variable\">my-component</span> <span class=\"hljs-variable\">elementId</span>=<span class=\"hljs-string\">\"a-really-cool-id\"</span>}}</span><span class=\"xml\"></span></pre></td>      </tr>    </table>  </div></div><p>If not manually set a default value will be provided by the framework.</p>\n<p>Once rendered an element&#39;s <code>elementId</code> is considered immutable and you\nshould never change it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#tagName",
      "fields": [
        {
          "name": "name",
          "value": "tagName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Tag name for the view&#39;s outer element. The tag name is only used when an\nelement is first created. If you change the <code>tagName</code> for an element, you\nmust destroy and recreate the view element.</p>\n<p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#ariaRole",
      "fields": [
        {
          "name": "name",
          "value": "ariaRole",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type &#39;button&#39;, or a pane may have a role of\ntype &#39;alertdialog&#39;. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.</p>\n<p>The full list of valid WAI-ARIA roles is available at:\n<a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#views",
      "fields": [
        {
          "name": "name",
          "value": "views",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Global views hash</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#currentWhen",
      "fields": [
        {
          "name": "name",
          "value": "currentWhen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to determine when this LinkView is active.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#title",
      "fields": [
        {
          "name": "name",
          "value": "title",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the <code>title</code> attribute of the <code>LinkView</code>&#39;s HTML element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#rel",
      "fields": [
        {
          "name": "name",
          "value": "rel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the <code>rel</code> attribute of the <code>LinkView</code>&#39;s HTML element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#tabindex",
      "fields": [
        {
          "name": "name",
          "value": "tabindex",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the <code>tabindex</code> attribute of the <code>LinkView</code>&#39;s HTML element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#target",
      "fields": [
        {
          "name": "name",
          "value": "target",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the <code>target</code> attribute of the <code>LinkView</code>&#39;s HTML element.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#activeClass",
      "fields": [
        {
          "name": "name",
          "value": "activeClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The CSS class to apply to <code>LinkView</code>&#39;s element when its <code>active</code>\nproperty is <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#loadingClass",
      "fields": [
        {
          "name": "name",
          "value": "loadingClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The CSS class to apply to <code>LinkView</code>&#39;s element when its <code>loading</code>\nproperty is <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#disabledClass",
      "fields": [
        {
          "name": "name",
          "value": "disabledClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The CSS class to apply to a <code>LinkView</code>&#39;s element when its <code>disabled</code>\nproperty is <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#replace",
      "fields": [
        {
          "name": "name",
          "value": "replace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Determines whether the <code>LinkView</code> will trigger routing via\nthe <code>replaceWith</code> routing strategy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#attributeBindings",
      "fields": [
        {
          "name": "name",
          "value": "attributeBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>By default the <code>{{link-to}}</code> helper will bind to the <code>href</code> and\n<code>title</code> attributes. It&#39;s discouraged that you override these defaults,\nhowever you can push onto the array if needed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#classNameBindings",
      "fields": [
        {
          "name": "name",
          "value": "classNameBindings",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>By default the <code>{{link-to}}</code> helper will bind to the <code>active</code>, <code>loading</code>, and\n<code>disabled</code> classes. It is discouraged to override these directly.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#eventName",
      "fields": [
        {
          "name": "name",
          "value": "eventName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>By default the <code>{{link-to}}</code> helper responds to the <code>click</code> event. You\ncan override this globally by setting this property to your custom\nevent name.</p>\n<p>This is particularly useful on mobile when one wants to avoid the 300ms\nclick delay using some sort of custom <code>tap</code> event.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#disabled",
      "fields": [
        {
          "name": "name",
          "value": "disabled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Accessed as a classname binding to apply the <code>LinkView</code>&#39;s <code>disabledClass</code>\n    CSS <code>class</code> to the element when the link is disabled.\nWhen <code>true</code> interactions with the element will not trigger route changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#active",
      "fields": [
        {
          "name": "name",
          "value": "active",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Accessed as a classname binding to apply the <code>LinkView</code>&#39;s <code>activeClass</code>\nCSS <code>class</code> to the element when the link is active.</p>\n<p>A <code>LinkView</code> is considered active when its <code>currentWhen</code> property is <code>true</code>\nor the application&#39;s current route is the route the <code>LinkView</code> would trigger\ntransitions into.</p>\n<p>The <code>currentWhen</code> property can match against multiple routes by separating\nroute names using the <code> </code> (space) character.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#loading",
      "fields": [
        {
          "name": "name",
          "value": "loading",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Accessed as a classname binding to apply the <code>LinkView</code>&#39;s <code>loadingClass</code>\nCSS <code>class</code> to the element when the link is loading.</p>\n<p>A <code>LinkView</code> is considered loading when it has at least one\nparameter whose value is currently null or undefined. During\nthis time, clicking the link will perform no transition and\nemit a warning that the link is still in a loading state.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#router",
      "fields": [
        {
          "name": "name",
          "value": "router",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the application&#39;s main router from the container.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#",
      "fields": [
        {
          "name": "name",
          "value": "",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Computed property that returns the current route name,\ndynamic segments, and query params. Returns falsy if\nfor null/undefined params to indicate that the link view\nis still in a loading state.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#href",
      "fields": [
        {
          "name": "name",
          "value": "href",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the element&#39;s <code>href</code> attribute to the url for\nthe <code>LinkView</code>&#39;s targeted route.</p>\n<p>If the <code>LinkView</code>&#39;s <code>tagName</code> is changed to a value other\nthan <code>a</code>, this property will be ignored.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#loadingHref",
      "fields": [
        {
          "name": "name",
          "value": "loadingHref",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The default href value to use while a link-to is loading.\nOnly applies when tagName is &#39;a&#39;</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#willInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "willInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when a view is going to insert an element into the DOM.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#didInsertElement",
      "fields": [
        {
          "name": "name",
          "value": "didInsertElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.</p>\n<p>When a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#willClearRender",
      "fields": [
        {
          "name": "name",
          "value": "willClearRender",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#willDestroyElement",
      "fields": [
        {
          "name": "name",
          "value": "willDestroyElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.</p>\n<p>Please note: any property changes made during this event will have no\neffect on object observers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#parentViewDidChange",
      "fields": [
        {
          "name": "name",
          "value": "parentViewDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the parentView property has changed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.LinkView#click",
      "fields": [
        {
          "name": "name",
          "value": "click",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers the <code>LinkView</code>&#39;s routing behavior. If\n<code>eventName</code> is changed to a value other than <code>click</code>\nthe routing behavior will trigger on that custom event\ninstead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.LinkView",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Application",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An instance of <code>Ember.Application</code> is the starting point for every Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects that make up your app.</p>\n<p>Each Ember app has one and only one <code>Ember.Application</code> object. In fact, the\nvery first thing you should do in your application is create the instance:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-built_in\">window</span>.App = Ember.Application.create();</pre></td>      </tr>    </table>  </div></div><p>Typically, the application object is the only global variable. All other\nclasses in your app should be properties on the <code>Ember.Application</code> instance,\nwhich highlights its first role: a global namespace.</p>\n<p>For example, if you define a view class, it might look like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.MyView = Ember.View.extend();</pre></td>      </tr>    </table>  </div></div><p>By default, calling <code>Ember.Application.create()</code> will automatically initialize\nyour application by calling the <code>Ember.Application.initialize()</code> method. If\nyou need to delay initialization, you can call your app&#39;s <code>deferReadiness()</code>\nmethod. When you are ready for your app to be initialized, call its\n<code>advanceReadiness()</code> method.</p>\n<p>You can define a <code>ready</code> method on the <code>Ember.Application</code> instance, which\nwill be run by Ember when the application is initialized.</p>\n<p>Because <code>Ember.Application</code> inherits from <code>Ember.Namespace</code>, any classes\nyou create will have useful string representations when calling <code>toString()</code>.\nSee the <code>Ember.Namespace</code> documentation for more information.</p>\n<p>While you can think of your <code>Ember.Application</code> as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand.</p>\n<h3 id=\"event-delegation\">Event Delegation</h3>\n<p>Ember uses a technique called <em>event delegation</em>. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n<code>mousedown</code> listener on its associated element, Ember sets up a <code>mousedown</code>\nlistener on the <code>body</code>.</p>\n<p>If a <code>mousedown</code> event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir <code>mouseDown</code> method as it goes.</p>\n<p><code>Ember.Application</code> has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the <code>keypress</code> event causes the <code>keyPress</code> method on the view to be\ncalled, the <code>dblclick</code> event causes <code>doubleClick</code> to be called, and so on.</p>\n<p>If there is a bubbling browser event that Ember does not listen for by\ndefault, you can specify custom events and their corresponding view method\nnames by setting the application&#39;s <code>customEvents</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create({\n  customEvents: {\n    <span class=\"hljs-comment\">// add support for the paste event</span>\n    paste: <span class=\"hljs-string\">'paste'</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>By default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.</p>\n<p>For example, if only events inside a DOM element with the ID of <code>ember-app</code>\nshould be delegated, set your application&#39;s <code>rootElement</code> property:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create({\n  rootElement: <span class=\"hljs-string\">'#ember-app'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>rootElement</code> can be either a DOM element or a jQuery-compatible selector\nstring. Note that <em>views appended to the DOM outside the root element will\nnot receive events.</em> If you specify a custom root element, make sure you only\nappend views inside it!</p>\n<p>To learn more about the advantages of event delegation and the Ember view\nlayer, and a list of the event listeners that are setup by default, visit the\n<a href=\"http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation\">Ember View Layer guide</a>.</p>\n<h3 id=\"initializers\">Initializers</h3>\n<p>Libraries on top of Ember can add initializers, like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'api-adapter'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    application.register(<span class=\"hljs-string\">'api-adapter:main'</span>, ApiAdapter);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Initializers provide an opportunity to access the container, which\norganizes the different components of an Ember application. Additionally\nthey provide a chance to access the instantiated application. Beyond\nbeing used for libraries, initializers are also a great way to organize\ndependency injection or setup in your own application.</p>\n<h3 id=\"routing\">Routing</h3>\n<p>In addition to creating your application&#39;s router, <code>Ember.Application</code> is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the <code>LOG_TRANSITIONS</code> flag, and more\ndetailed intra-transition logging can be logged with\nthe <code>LOG_TRANSITIONS_INTERNAL</code> flag:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create({\n  LOG_TRANSITIONS: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// basic logging of successful transitions</span>\n  LOG_TRANSITIONS_INTERNAL: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// detailed logging of all routing steps</span>\n});</pre></td>      </tr>    </table>  </div></div><p>By default, the router will begin trying to translate the current URL into\napplication state once the browser emits the <code>DOMContentReady</code> event. If you\nneed to defer routing, you can call the application&#39;s <code>deferReadiness()</code>\nmethod. Once routing can begin, call the <code>advanceReadiness()</code> method.</p>\n<p>If there is any setup required before routing begins, you can implement a\n<code>ready()</code> method on your app that will be invoked immediately before routing\nbegins.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Application#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#buildRegistry",
      "fields": [
        {
          "name": "name",
          "value": "buildRegistry",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This creates a registry with the default Ember naming conventions.</p>\n<p>It also configures the registry:</p>\n<ul>\n<li>registered views are created every time they are looked up (they are\nnot singletons)</li>\n<li>registered templates are not factories; the registered value is\nreturned directly.</li>\n<li>the router receives the application as its <code>namespace</code> property</li>\n<li>all controllers receive the router as their <code>target</code> and <code>controllers</code>\nproperties</li>\n<li>all controllers receive the application as their <code>namespace</code> property</li>\n<li>the application view receives the application controller as its\n<code>controller</code> property</li>\n<li>the application view receives the application template as its\n<code>defaultTemplate</code> property</li>\n</ul>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#buildInstance",
      "fields": [
        {
          "name": "name",
          "value": "buildInstance",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Create a container for the current application&#39;s registry.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#scheduleInitialize",
      "fields": [
        {
          "name": "name",
          "value": "scheduleInitialize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Automatically initialize the application once the DOM has\nbecome ready.</p>\n<p>The initialization itself is scheduled on the actions queue\nwhich ensures that application loading finishes before\nbooting.</p>\n<p>If you are asynchronously loading code, you should call\n<code>deferReadiness()</code> to defer booting, and then call\n<code>advanceReadiness()</code> once all of your code has finished\nloading.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#deferReadiness",
      "fields": [
        {
          "name": "name",
          "value": "deferReadiness",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Use this to defer readiness until some condition is true.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n\nApp.deferReadiness();\n<span class=\"hljs-comment\">// Ember.$ is a reference to the jQuery object/function</span>\nEmber.$.getJSON(<span class=\"hljs-string\">'/auth-token'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(token)</span> </span>{\n  App.token = token;\n  App.advanceReadiness();\n});</pre></td>      </tr>    </table>  </div></div><p>This allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.</p>\n<p>However, if the setup requires a loading UI, it might be better\nto use the router for this purpose.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#advanceReadiness",
      "fields": [
        {
          "name": "name",
          "value": "advanceReadiness",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Call <code>advanceReadiness</code> after any asynchronous setup logic has completed.\nEach call to <code>deferReadiness</code> must be matched by a call to <code>advanceReadiness</code>\nor the application will never become ready and routing will not begin.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#register",
      "fields": [
        {
          "name": "name",
          "value": "register",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers a factory that can be used for dependency injection (with\n<code>App.inject</code>) or for service lookup. Each factory is registered with\na full name including two parts: <code>type:name</code>.</p>\n<p>A simple example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n\nApp.Orange = Ember.Object.extend();\nApp.register(<span class=\"hljs-string\">'fruit:favorite'</span>, App.Orange);</pre></td>      </tr>    </table>  </div></div><p>Ember will resolve factories from the <code>App</code> namespace automatically.\nFor example <code>App.CarsController</code> will be discovered and returned if\nan application requests <code>controller:cars</code>.</p>\n<p>An example of registering a controller with a non-standard name:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n<span class=\"hljs-keyword\">var</span> Session = Ember.Controller.extend();\n\nApp.register(<span class=\"hljs-string\">'controller:session'</span>, Session);\n\n<span class=\"hljs-comment\">// The Session controller can now be treated like a normal controller,</span>\n<span class=\"hljs-comment\">// despite its non-standard name.</span>\nApp.ApplicationController = Ember.Controller.extend({\n  needs: [<span class=\"hljs-string\">'session'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>Registered factories are <strong>instantiated</strong> by having <code>create</code>\ncalled on them. Additionally they are <strong>singletons</strong>, each time\nthey are looked up they return the same instance.</p>\n<p>Some examples modifying that default behavior:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n\nApp.Person  = Ember.Object.extend();\nApp.Orange  = Ember.Object.extend();\nApp.Email   = Ember.Object.extend();\nApp.session = Ember.Object.create();\n\nApp.register(<span class=\"hljs-string\">'model:user'</span>, App.Person, { singleton: <span class=\"hljs-literal\">false</span> });\nApp.register(<span class=\"hljs-string\">'fruit:favorite'</span>, App.Orange);\nApp.register(<span class=\"hljs-string\">'communication:main'</span>, App.Email, { singleton: <span class=\"hljs-literal\">false</span> });\nApp.register(<span class=\"hljs-string\">'session'</span>, App.session, { instantiate: <span class=\"hljs-literal\">false</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#inject",
      "fields": [
        {
          "name": "name",
          "value": "inject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Define a dependency injection onto a specific factory or all factories\nof a type.</p>\n<p>When Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.</p>\n<p>An example of providing a session object to all controllers:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create();\n<span class=\"hljs-keyword\">var</span> Session = Ember.Object.extend({ isAuthenticated: <span class=\"hljs-literal\">false</span> });\n\n<span class=\"hljs-comment\">// A factory must be registered before it can be injected</span>\nApp.register(<span class=\"hljs-string\">'session:main'</span>, Session);\n\n<span class=\"hljs-comment\">// Inject 'session:main' onto all factories of the type 'controller'</span>\n<span class=\"hljs-comment\">// with the name 'session'</span>\nApp.inject(<span class=\"hljs-string\">'controller'</span>, <span class=\"hljs-string\">'session'</span>, <span class=\"hljs-string\">'session:main'</span>);\n\nApp.IndexController = Ember.Controller.extend({\n  isLoggedIn: Ember.computed.alias(<span class=\"hljs-string\">'session.isAuthenticated'</span>)\n});</pre></td>      </tr>    </table>  </div></div><p>Injections can also be performed on specific factories.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.inject(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">full_name</span> <span class=\"hljs-attribute\">or</span> <span class=\"hljs-attribute\">type</span>&gt;</span>, <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>&gt;</span>, <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">full_name</span>&gt;</span>)</span>\nApp.inject(<span class=\"hljs-string\">'route'</span>, <span class=\"hljs-string\">'source'</span>, <span class=\"hljs-string\">'source:main'</span>)\nApp.inject(<span class=\"hljs-string\">'route:application'</span>, <span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'model:email'</span>)</pre></td>      </tr>    </table>  </div></div><p>It is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via <code>create</code> or <code>new</code>) bypasses the dependency injection\nsystem.</p>\n<p><strong>Note:</strong> Ember-Data instantiates its models in a unique manner, and consequently\ninjections onto models (or all models) will not work as expected. Injections\non models can be enabled by setting <code>Ember.MODEL_FACTORY_INJECTIONS</code>\nto <code>true</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#initialize",
      "fields": [
        {
          "name": "name",
          "value": "initialize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Calling initialize manually is not supported.</p>\n<p>Please see Ember.Application#advanceReadiness and\nEmber.Application#deferReadiness.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#_initialize",
      "fields": [
        {
          "name": "name",
          "value": "_initialize",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Initialize the application. This happens automatically.</p>\n<p>Run any initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want\nto defer readiness until the auth token has been retrieved.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#reset",
      "fields": [
        {
          "name": "name",
          "value": "reset",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:</p>\n<ol>\n<li>Deactivate existing routes</li>\n<li>Destroy all objects in the container</li>\n<li>Create a new application container</li>\n<li>Re-route to the existing url</li>\n</ol>\n<p>Typical Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App;\n\nrun(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  App = Ember.Application.create();\n});\n\n<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'acceptance test'</span>, {\n  setup: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    App.reset();\n  }\n});\n\ntest(<span class=\"hljs-string\">'first test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// App is freshly reset</span>\n});\n\ntest(<span class=\"hljs-string\">'second test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// App is again freshly reset</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Advanced Example:</p>\n<p>Occasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App;\n\nrun(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  App = Ember.Application.create();\n});\n\n<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'acceptance test'</span>, {\n  setup: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest(<span class=\"hljs-string\">'first test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  ok(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'something before app is initialized'</span>);\n\n  run(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    App.advanceReadiness();\n  });\n\n  ok(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'something after app is initialized'</span>);\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#runInitializers",
      "fields": [
        {
          "name": "name",
          "value": "runInitializers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#didBecomeReady",
      "fields": [
        {
          "name": "name",
          "value": "didBecomeReady",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#then",
      "fields": [
        {
          "name": "name",
          "value": "then",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#visit",
      "fields": [
        {
          "name": "name",
          "value": "visit",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new instance of the application and instructs it to route to the\nspecified initial URL. This method returns a promise that will be resolved\nonce rendering is complete. That promise is resolved with the instance.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">App.visit(<span class=\"hljs-string\">'/users'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(instance)</span> </span>{\n  <span class=\"hljs-keyword\">var</span> view = instance.view;\n  view.appendTo(<span class=\"hljs-string\">'#qunit-test-fixtures'</span>);\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#initializer",
      "fields": [
        {
          "name": "name",
          "value": "initializer",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Initializer receives an object which has the following attributes:\n<code>name</code>, <code>before</code>, <code>after</code>, <code>initialize</code>. The only required attribute is\n`initialize, all others are optional.</p>\n<ul>\n<li><code>name</code> allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.</li>\n</ul>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'namedInitializer'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Running namedInitializer!'</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>before</code> and <code>after</code> are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the <code>name</code> of other initializers.</li>\n</ul>\n<p>An example of ordering initializers, we create an initializer named <code>first</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'first'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'First initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span></pre></td>      </tr>    </table>  </div></div><p>We add another initializer named <code>second</code>, specifying that it should run\nafter the initializer named <code>first</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'second'</span>,\n  after: <span class=\"hljs-string\">'first'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Second initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Second initializer!</span></pre></td>      </tr>    </table>  </div></div><p>Afterwards we add a further initializer named <code>pre</code>, this time specifying\nthat it should run before the initializer named <code>first</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'pre'</span>,\n  before: <span class=\"hljs-string\">'first'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Pre initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: Pre initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Second initializer!</span></pre></td>      </tr>    </table>  </div></div><p>Finally we add an initializer named <code>post</code>, specifying it should run after\nboth the <code>first</code> and the <code>second</code> initializers:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'post'</span>,\n  after: [<span class=\"hljs-string\">'first'</span>, <span class=\"hljs-string\">'second'</span>],\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    Ember.debug(<span class=\"hljs-string\">'Post initializer!'</span>);\n  }\n});\n\n<span class=\"hljs-comment\">// DEBUG: Pre initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: First initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Second initializer!</span>\n<span class=\"hljs-comment\">// DEBUG: Post initializer!</span></pre></td>      </tr>    </table>  </div></div><ul>\n<li><code>initialize</code> is a callback function that receives two arguments, <code>container</code>\nand <code>application</code> on which you can operate.</li>\n</ul>\n<p>Example of using <code>container</code> to preload data into the store:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'preload-data'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> store = container.lookup(<span class=\"hljs-string\">'store:main'</span>);\n\n    store.pushPayload(preloadedData);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Example of using <code>application</code> to register an adapter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Application.initializer({\n  name: <span class=\"hljs-string\">'api-adapter'</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    application.register(<span class=\"hljs-string\">'api-adapter:main'</span>, ApiAdapter);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#resolverFor",
      "fields": [
        {
          "name": "name",
          "value": "resolverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This function defines the default lookup rules for container lookups:</p>\n<ul>\n<li>templates are looked up on <code>Ember.TEMPLATES</code></li>\n<li>other names are looked up on the application after classifying the name.\nFor example, <code>controller:post</code> looks up <code>App.PostController</code> by default.</li>\n<li>if the default lookup fails, look for registered classes on the container</li>\n</ul>\n<p>This allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#container",
      "fields": [
        {
          "name": "name",
          "value": "container",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The application instance&#39;s container. The container stores all of the\ninstance-specific state for this application run.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#registry",
      "fields": [
        {
          "name": "name",
          "value": "registry",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The registry for this application instance. It should use the\n<code>applicationRegistry</code> as a fallback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#customEvents",
      "fields": [
        {
          "name": "name",
          "value": "customEvents",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The DOM events for which the event dispatcher should listen.</p>\n<p>By default, the application&#39;s <code>Ember.EventDispatcher</code> listens\nfor a set of standard DOM events, such as <code>mousedown</code> and\n<code>keyup</code>, and delegates them to your application&#39;s <code>Ember.View</code>\ninstances.</p>\n<p>If you would like additional bubbling events to be delegated to your\nviews, set your <code>Ember.Application</code>&#39;s <code>customEvents</code> property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> App = Ember.Application.create({\n  customEvents: {\n    <span class=\"hljs-comment\">// add support for the paste event</span>\n    paste: <span class=\"hljs-string\">'paste'</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#rootElement",
      "fields": [
        {
          "name": "name",
          "value": "rootElement",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The root DOM element of the Application. This can be specified as an\nelement or a\n<a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector string</a>.</p>\n<p>This is the element that will be passed to the Application&#39;s,\n<code>eventDispatcher</code>, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#eventDispatcher",
      "fields": [
        {
          "name": "name",
          "value": "eventDispatcher",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>Ember.EventDispatcher</code> responsible for delegating events to this\napplication&#39;s views.</p>\n<p>The event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication&#39;s <code>rootElement</code> property.</p>\n<p>See the documentation for <code>Ember.EventDispatcher</code> for more information.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#autoboot",
      "fields": [
        {
          "name": "name",
          "value": "autoboot",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Whether the application should automatically start routing and render\ntemplates to the <code>rootElement</code> on DOM ready. While default by true,\nother environments such as FastBoot or a testing harness can set this\nproperty to <code>false</code> and control the precise timing and behavior of the boot\nprocess.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#resolver",
      "fields": [
        {
          "name": "name",
          "value": "resolver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set this to provide an alternate class to <code>Ember.DefaultResolver</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Application#ready",
      "fields": [
        {
          "name": "name",
          "value": "ready",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Called when the Application has become ready.\nThe call will be delayed until the DOM has become ready.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "event",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Application",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver",
      "fields": [
        {
          "name": "name",
          "value": "Ember.DefaultResolver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The DefaultResolver defines the default lookup rules to resolve\ncontainer lookups before consulting the container for registered\nitems:</p>\n<ul>\n<li>templates are looked up on <code>Ember.TEMPLATES</code></li>\n<li>other names are looked up on the application after converting\nthe name. For example, <code>controller:post</code> looks up\n<code>App.PostController</code> by default.</li>\n<li>there are some nuances (see examples below)</li>\n</ul>\n<h3 id=\"how-resolving-works\">How Resolving Works</h3>\n<p>The container calls this object&#39;s <code>resolve</code> method with the\n<code>fullName</code> argument.</p>\n<p>It first parses the fullName into an object using <code>parseName</code>.</p>\n<p>Then it checks for the presence of a type-specific instance\nmethod of the form <code>resolve[Type]</code> and calls it if it exists.\nFor example if it was resolving &#39;template:post&#39;, it would call\nthe <code>resolveTemplate</code> method.</p>\n<p>Its last resort is to call the <code>resolveOther</code> method.</p>\n<p>The methods of this object are designed to be easy to override\nin a subclass. For example, you could enhance how a template\nis resolved like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create({\n  Resolver: Ember.DefaultResolver.extend({\n    resolveTemplate: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(parsedName)</span> </span>{\n      <span class=\"hljs-keyword\">var</span> resolvedTemplate = <span class=\"hljs-keyword\">this</span>._super(parsedName);\n      <span class=\"hljs-keyword\">if</span> (resolvedTemplate) { <span class=\"hljs-keyword\">return</span> resolvedTemplate; }\n      <span class=\"hljs-keyword\">return</span> Ember.TEMPLATES[<span class=\"hljs-string\">'not_found'</span>];\n    }\n  })\n});</pre></td>      </tr>    </table>  </div></div><p>Some examples of how names are resolved:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-string\">'template:post'</span>           <span class=\"hljs-comment\">//=&gt; Ember.TEMPLATES['post']</span>\n<span class=\"hljs-string\">'template:posts/byline'</span>   <span class=\"hljs-comment\">//=&gt; Ember.TEMPLATES['posts/byline']</span>\n<span class=\"hljs-string\">'template:posts.byline'</span>   <span class=\"hljs-comment\">//=&gt; Ember.TEMPLATES['posts/byline']</span>\n<span class=\"hljs-string\">'template:blogPost'</span>       <span class=\"hljs-comment\">//=&gt; Ember.TEMPLATES['blogPost']</span>\n                          <span class=\"hljs-comment\">//   OR</span>\n                          <span class=\"hljs-comment\">//   Ember.TEMPLATES['blog_post']</span>\n<span class=\"hljs-string\">'controller:post'</span>         <span class=\"hljs-comment\">//=&gt; App.PostController</span>\n<span class=\"hljs-string\">'controller:posts.index'</span>  <span class=\"hljs-comment\">//=&gt; App.PostsIndexController</span>\n<span class=\"hljs-string\">'controller:blog/post'</span>    <span class=\"hljs-comment\">//=&gt; Blog.PostController</span>\n<span class=\"hljs-string\">'controller:basic'</span>        <span class=\"hljs-comment\">//=&gt; Ember.Controller</span>\n<span class=\"hljs-string\">'route:post'</span>              <span class=\"hljs-comment\">//=&gt; App.PostRoute</span>\n<span class=\"hljs-string\">'route:posts.index'</span>       <span class=\"hljs-comment\">//=&gt; App.PostsIndexRoute</span>\n<span class=\"hljs-string\">'route:blog/post'</span>         <span class=\"hljs-comment\">//=&gt; Blog.PostRoute</span>\n<span class=\"hljs-string\">'route:basic'</span>             <span class=\"hljs-comment\">//=&gt; Ember.Route</span>\n<span class=\"hljs-string\">'view:post'</span>               <span class=\"hljs-comment\">//=&gt; App.PostView</span>\n<span class=\"hljs-string\">'view:posts.index'</span>        <span class=\"hljs-comment\">//=&gt; App.PostsIndexView</span>\n<span class=\"hljs-string\">'view:blog/post'</span>          <span class=\"hljs-comment\">//=&gt; Blog.PostView</span>\n<span class=\"hljs-string\">'view:basic'</span>              <span class=\"hljs-comment\">//=&gt; Ember.View</span>\n<span class=\"hljs-string\">'foo:post'</span>                <span class=\"hljs-comment\">//=&gt; App.PostFoo</span>\n<span class=\"hljs-string\">'model:post'</span>              <span class=\"hljs-comment\">//=&gt; App.Post</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolve",
      "fields": [
        {
          "name": "name",
          "value": "resolve",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This method is called via the container&#39;s resolver method.\nIt parses the provided <code>fullName</code> and then looks up and\nreturns the appropriate template or class.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#parseName",
      "fields": [
        {
          "name": "name",
          "value": "parseName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convert the string name of the form &#39;type:name&#39; to\na Javascript object with the parsed aspects of the name\nbroken out.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#lookupDescription",
      "fields": [
        {
          "name": "name",
          "value": "lookupDescription",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a human-readable description for a fullName. Used by the\nApplication namespace in assertions to describe the\nprecise name of the class that Ember is looking for, rather than\ncontainer keys.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#useRouterNaming",
      "fields": [
        {
          "name": "name",
          "value": "useRouterNaming",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Given a parseName object (output from <code>parseName</code>), apply\nthe conventions expected by <code>Ember.Router</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveTemplate",
      "fields": [
        {
          "name": "name",
          "value": "resolveTemplate",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Look up the template in Ember.TEMPLATES</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveView",
      "fields": [
        {
          "name": "name",
          "value": "resolveView",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Lookup the view using <code>resolveOther</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveController",
      "fields": [
        {
          "name": "name",
          "value": "resolveController",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Lookup the controller using <code>resolveOther</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveRoute",
      "fields": [
        {
          "name": "name",
          "value": "resolveRoute",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Lookup the route using <code>resolveOther</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveModel",
      "fields": [
        {
          "name": "name",
          "value": "resolveModel",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Lookup the model on the Application namespace</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveHelper",
      "fields": [
        {
          "name": "name",
          "value": "resolveHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#resolveOther",
      "fields": [
        {
          "name": "name",
          "value": "resolveOther",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#_logLookup",
      "fields": [
        {
          "name": "name",
          "value": "_logLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DefaultResolver#namespace",
      "fields": [
        {
          "name": "name",
          "value": "namespace",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will be set to the Application instance when it is\ncreated.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DefaultResolver",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test.Adapter",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Test.Adapter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The primary purpose of this class is to create hooks that can be implemented\nby an adapter for various test frameworks.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Test.Adapter#asyncStart",
      "fields": [
        {
          "name": "name",
          "value": "asyncStart",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This callback will be called whenever an async operation is about to start.</p>\n<p>Override this to call your framework&#39;s methods that handle async\noperations.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test.Adapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test.Adapter#asyncEnd",
      "fields": [
        {
          "name": "name",
          "value": "asyncEnd",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This callback will be called whenever an async operation has completed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test.Adapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test.Adapter#exception",
      "fields": [
        {
          "name": "name",
          "value": "exception",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override this method with your testing framework&#39;s false assertion.\nThis function is called whenever an exception occurs causing the testing\npromise to fail.</p>\n<p>QUnit example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  exception: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error)</span> </span>{\n    ok(<span class=\"hljs-literal\">false</span>, error);\n  };</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test.Adapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test.QUnitAdapter",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Test.QUnitAdapter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This class implements the methods defined by Ember.Test.Adapter for the\nQUnit testing framework.</p>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Test.QUnitAdapter#asyncStart",
      "fields": [
        {
          "name": "name",
          "value": "asyncStart",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This callback will be called whenever an async operation is about to start.</p>\n<p>Override this to call your framework&#39;s methods that handle async\noperations.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test.QUnitAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test.QUnitAdapter#asyncEnd",
      "fields": [
        {
          "name": "name",
          "value": "asyncEnd",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This callback will be called whenever an async operation has completed.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test.QUnitAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test.QUnitAdapter#exception",
      "fields": [
        {
          "name": "name",
          "value": "exception",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override this method with your testing framework&#39;s false assertion.\nThis function is called whenever an exception occurs causing the testing\npromise to fail.</p>\n<p>QUnit example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  exception: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error)</span> </span>{\n    ok(<span class=\"hljs-literal\">false</span>, error);\n  };</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test.QUnitAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test",
      "fields": [
        {
          "name": "name",
          "value": "Ember.Test",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a container for an assortment of testing related functionality:</p>\n<ul>\n<li>Choose your default test adapter (for your framework of choice).</li>\n<li>Register/Unregister additional test helpers.</li>\n<li>Setup callbacks to be fired when the test helpers are injected into\nyour application.</li>\n</ul>\n",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.Test#visit",
      "fields": [
        {
          "name": "name",
          "value": "visit",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">visit(<span class=\"hljs-string\">'posts/index'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// assert something</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#click",
      "fields": [
        {
          "name": "name",
          "value": "click",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Clicks an element and triggers any actions triggered by the element&#39;s <code>click</code>\nevent.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">click(<span class=\"hljs-string\">'.some-jQuery-selector'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// assert something</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#check",
      "fields": [
        {
          "name": "name",
          "value": "check",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Unchecks a checkbox. Ensures the absence of the <code>checked</code> attribute</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">uncheck(<span class=\"hljs-string\">'#remember-me'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// assert something</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#keyEvent",
      "fields": [
        {
          "name": "name",
          "value": "keyEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Simulates a key event, e.g. <code>keypress</code>, <code>keydown</code>, <code>keyup</code> with the desired keyCode</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">keyEvent(<span class=\"hljs-string\">'.some-jQuery-selector'</span>, <span class=\"hljs-string\">'keypress'</span>, <span class=\"hljs-number\">13</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n <span class=\"hljs-comment\">// assert something</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#fillIn",
      "fields": [
        {
          "name": "name",
          "value": "fillIn",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Fills in an input element with some text.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fillIn(<span class=\"hljs-string\">'#email'</span>, <span class=\"hljs-string\">'you@example.com'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// assert something</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#find",
      "fields": [
        {
          "name": "name",
          "value": "find",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Finds an element in the context of the app&#39;s container element. A simple alias\nfor <code>app.$(selector)</code>.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> $el = find(<span class=\"hljs-string\">'.my-selector'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#findWithAssert",
      "fields": [
        {
          "name": "name",
          "value": "findWithAssert",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Like <code>find</code>, but throws an error if the element selector returns no results.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> $el = findWithAssert(<span class=\"hljs-string\">'.doesnt-exist'</span>); <span class=\"hljs-comment\">// throws error</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#wait",
      "fields": [
        {
          "name": "name",
          "value": "wait",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.</p>\n<p>This is most often used as the return value for the helper functions (see &#39;click&#39;,\n&#39;fillIn&#39;,&#39;visit&#39;,etc).</p>\n<p>Example:</p>\n<p>```javascript\nEmber.Test.registerAsyncHelper(&#39;loginUser&#39;, function(app, username, password) {\n  visit(&#39;secured/path/here&#39;)\n  .fillIn(&#39;#username&#39;, username)\n  .fillIn(&#39;#password&#39;, password)\n  .click(&#39;.submit&#39;)</p>\n<p>  return app.testHelpers.wait();\n});</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#currentRouteName",
      "fields": [
        {
          "name": "name",
          "value": "currentRouteName",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the currently active route name.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateRouteName</span><span class=\"hljs-params\">()</span> </span>{\nequal(currentRouteName(), <span class=\"hljs-string\">'some.path'</span>, <span class=\"hljs-string\">\"correct route was transitioned into.\"</span>);\n}\n\nvisit(<span class=\"hljs-string\">'/some/path'</span>).then(validateRouteName)</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#currentPath",
      "fields": [
        {
          "name": "name",
          "value": "currentPath",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current path.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateURL</span><span class=\"hljs-params\">()</span> </span>{\nequal(currentPath(), <span class=\"hljs-string\">'some.path.index'</span>, <span class=\"hljs-string\">\"correct path was transitioned into.\"</span>);\n}\n\nclick(<span class=\"hljs-string\">'#some-link-id'</span>).then(validateURL);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#currentURL",
      "fields": [
        {
          "name": "name",
          "value": "currentURL",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the current URL.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateURL</span><span class=\"hljs-params\">()</span> </span>{\nequal(currentURL(), <span class=\"hljs-string\">'/some/path'</span>, <span class=\"hljs-string\">\"correct URL was transitioned into.\"</span>);\n}\n\nclick(<span class=\"hljs-string\">'#some-link-id'</span>).then(validateURL);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#pauseTest",
      "fields": [
        {
          "name": "name",
          "value": "pauseTest",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Pauses the current test - this is useful for debugging while testing or for test-driving.\nIt allows you to inspect the state of your application at any point.</p>\n<p>Example (The test will pause before clicking the button):</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">visit(<span class=\"hljs-string\">'/'</span>)\n<span class=\"hljs-keyword\">return</span> pauseTest();\n\nclick(<span class=\"hljs-string\">'.btn'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#triggerEvent",
      "fields": [
        {
          "name": "name",
          "value": "triggerEvent",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Triggers the given DOM event on the element identified by the provided selector.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">triggerEvent(<span class=\"hljs-string\">'#some-elem-id'</span>, <span class=\"hljs-string\">'blur'</span>);</pre></td>      </tr>    </table>  </div></div><p>This is actually used internally by the <code>keyEvent</code> helper like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">triggerEvent(<span class=\"hljs-string\">'#some-elem-id'</span>, <span class=\"hljs-string\">'keypress'</span>, { keyCode: <span class=\"hljs-number\">13</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#setupForTesting",
      "fields": [
        {
          "name": "name",
          "value": "setupForTesting",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router&#39;s\nlocation to &#39;none&#39;, so that the window&#39;s location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework).</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  App.setupForTesting();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#testCheckboxClick",
      "fields": [
        {
          "name": "name",
          "value": "testCheckboxClick",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This method creates a checkbox and triggers the click event to fire the\npassed in handler. It is used to correct for a bug in older versions\nof jQuery (e.g 1.8.3).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#registerHelper",
      "fields": [
        {
          "name": "name",
          "value": "registerHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>registerHelper</code> is used to register a test helper that will be injected\nwhen <code>App.injectTestHelpers</code> is called.</p>\n<p>The helper method will always be called with the current Application as\nthe first parameter.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.registerHelper(<span class=\"hljs-string\">'boot'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(app)</span> </span>{\n  Ember.run(app, app.advanceReadiness);\n});</pre></td>      </tr>    </table>  </div></div><p>This helper can later be called without arguments because it will be\ncalled with <code>app</code> as the first parameter.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App = Ember.Application.create();\nApp.injectTestHelpers();\nboot();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#registerAsyncHelper",
      "fields": [
        {
          "name": "name",
          "value": "registerAsyncHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>registerAsyncHelper</code> is used to register an async test helper that will be injected\nwhen <code>App.injectTestHelpers</code> is called.</p>\n<p>The helper method will always be called with the current Application as\nthe first parameter.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.registerAsyncHelper(<span class=\"hljs-string\">'boot'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(app)</span> </span>{\n  Ember.run(app, app.advanceReadiness);\n});</pre></td>      </tr>    </table>  </div></div><p>The advantage of an async helper is that it will not run\nuntil the last async helper has completed.  All async helpers\nafter it will wait for it complete before running.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.registerAsyncHelper(<span class=\"hljs-string\">'deletePost'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(app, postId)</span> </span>{\n  click(<span class=\"hljs-string\">'.delete-'</span> + postId);\n});\n\n<span class=\"hljs-comment\">// ... in your test</span>\nvisit(<span class=\"hljs-string\">'/post/2'</span>);\ndeletePost(<span class=\"hljs-number\">2</span>);\nvisit(<span class=\"hljs-string\">'/post/3'</span>);\ndeletePost(<span class=\"hljs-number\">3</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#unregisterHelper",
      "fields": [
        {
          "name": "name",
          "value": "unregisterHelper",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove a previously added helper method.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.unregisterHelper(<span class=\"hljs-string\">'wait'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#onInjectHelpers",
      "fields": [
        {
          "name": "name",
          "value": "onInjectHelpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to register callbacks to be fired whenever <code>App.injectTestHelpers</code>\nis called.</p>\n<p>The callback will receive the current application as an argument.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.onInjectHelpers(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  Ember.$(<span class=\"hljs-built_in\">document</span>).ajaxSend(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    Test.pendingAjaxRequests++;\n  });\n\n  Ember.$(<span class=\"hljs-built_in\">document</span>).ajaxComplete(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    Test.pendingAjaxRequests--;\n  });\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#promise",
      "fields": [
        {
          "name": "name",
          "value": "promise",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This returns a thenable tailored for testing.  It catches failed\n<code>onSuccess</code> callbacks and invokes the <code>Ember.Test.adapter.exception</code>\ncallback in the last chained then.</p>\n<p>This method should be returned by async helpers such as <code>wait</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#resolve",
      "fields": [
        {
          "name": "name",
          "value": "resolve",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Replacement for <code>Ember.RSVP.resolve</code>\nThe only difference is this uses\nan instance of <code>Ember.Test.Promise</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#registerWaiter",
      "fields": [
        {
          "name": "name",
          "value": "registerWaiter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This allows ember-testing to play nicely with other asynchronous\nevents, such as an application that is waiting for a CSS3\ntransition or an IndexDB transaction.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.registerWaiter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> myPendingTransactions() == <span class=\"hljs-number\">0</span>;\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>context</code> argument allows you to optionally specify the <code>this</code>\nwith which your callback will be invoked.</p>\n<p>For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#unregisterWaiter",
      "fields": [
        {
          "name": "name",
          "value": "unregisterWaiter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>unregisterWaiter</code> is used to unregister a callback that was\nregistered with <code>registerWaiter</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#injectTestHelpers",
      "fields": [
        {
          "name": "name",
          "value": "injectTestHelpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This injects the test helpers into the <code>helperContainer</code> object. If an object is provided\nit will be used as the helperContainer. If <code>helperContainer</code> is not set it will default\nto <code>window</code>. If a function of the same name has already been defined it will be cached\n(so that it can be reset if the helper is removed with <code>unregisterHelper</code> or\n<code>removeTestHelpers</code>).</p>\n<p>   Any callbacks registered with <code>onInjectHelpers</code> will be called once the\n   helpers have been injected.</p>\n<p>  Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">  App.injectTestHelpers();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#removeTestHelpers",
      "fields": [
        {
          "name": "name",
          "value": "removeTestHelpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.removeTestHelpers();</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#_helpers",
      "fields": [
        {
          "name": "name",
          "value": "_helpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Hash containing all known test helpers.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#adapter",
      "fields": [
        {
          "name": "name",
          "value": "adapter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Used to allow ember-testing to communicate with a specific testing\nframework.</p>\n<p>You can manually set it before calling <code>App.setupForTesting()</code>.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Ember.Test.adapter = MyCustomAdapter.create()</pre></td>      </tr>    </table>  </div></div><p>If you do not set it, ember-testing will default to <code>Ember.Test.QUnitAdapter</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#testHelpers",
      "fields": [
        {
          "name": "name",
          "value": "testHelpers",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property contains the testing helpers for the current application. These\nare created once you call <code>injectTestHelpers</code> on your <code>Ember.Application</code>\ninstance. The included helpers are also available on the <code>window</code> object by\ndefault, but can be used from this object on the individual application also.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#originalMethods",
      "fields": [
        {
          "name": "name",
          "value": "originalMethods",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property will contain the original methods that were registered\non the <code>helperContainer</code> before <code>injectTestHelpers</code> is called.</p>\n<p>When <code>removeTestHelpers</code> is called, these methods are restored to the\n<code>helperContainer</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#testing",
      "fields": [
        {
          "name": "name",
          "value": "testing",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This property indicates whether or not this application is currently in\ntesting mode. This is set when <code>setupForTesting</code> is called on the current\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.Test#helperContainer",
      "fields": [
        {
          "name": "name",
          "value": "helperContainer",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This will be used as the container to inject the test helpers into. By\ndefault the helpers are injected into <code>window</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.Test",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter",
      "fields": [
        {
          "name": "name",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>ContainerDebugAdapter</code> helps the container and resolver interface\nwith tools that debug Ember such as the\n<a href=\"https://github.com/tildeio/ember-extension\">Ember Extension</a>\nfor Chrome and Firefox.</p>\n<p>This class can be extended by a custom resolver implementer\nto override some of the methods with library-specific code.</p>\n<p>The methods likely to be overridden are:</p>\n<ul>\n<li><code>canCatalogEntriesByType</code></li>\n<li><code>catalogEntriesByType</code></li>\n</ul>\n<p>The adapter will need to be registered\nin the application&#39;s container as <code>container-debug-adapter:main</code></p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Application.initializer({\n  name: <span class=\"hljs-string\">\"containerDebugAdapter\"</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    application.register(<span class=\"hljs-string\">'container-debug-adapter:main'</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'app/container-debug-adapter'</span>));\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#init",
      "fields": [
        {
          "name": "name",
          "value": "init",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  init: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">'Name is '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> steve = App.Person.create({\n  name: <span class=\"hljs-string\">\"Steve\"</span>\n});\n\n<span class=\"hljs-comment\">// alerts 'Name is Steve'.</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code> or\n<code>Ember.ArrayController</code>, be sure to call <code>this._super.apply(this, arguments)</code> in your\n<code>init</code> declaration! If you don&#39;t, Ember may not have an opportunity to\ndo important setup work, and you&#39;ll see strange behavior in your\napplication.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#destroy",
      "fields": [
        {
          "name": "name",
          "value": "destroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Override to implement teardown.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#_scheduledDestroy",
      "fields": [
        {
          "name": "name",
          "value": "_scheduledDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#toString",
      "fields": [
        {
          "name": "name",
          "value": "toString",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a string representation which attempts to provide more information\nthan Javascript&#39;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;App.Person:ember1024&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the object&#39;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() <span class=\"hljs-comment\">//=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"</span></pre></td>      </tr>    </table>  </div></div><p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'fullName'</span>);\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); <span class=\"hljs-comment\">//=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#extend",
      "fields": [
        {
          "name": "name",
          "value": "extend",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates a new subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(thing);\n   }\n});</pre></td>      </tr>    </table>  </div></div><p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p>\n<p>You can also create a subclass from any existing class by calling its <code>extend()</code>  method. For example, you might want to create a subclass of Ember&#39;s built-in <code>Ember.View</code> class:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: <span class=\"hljs-string\">'li'</span>,\n  classNameBindings: [<span class=\"hljs-string\">'isAdministrator'</span>]\n});</pre></td>      </tr>    </table>  </div></div><p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>);\n    alert(name + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>._super(thing + <span class=\"hljs-string\">\", sir!\"</span>);\n  },\n  march: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(numberOfHours)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' marches for '</span> + numberOfHours + <span class=\"hljs-string\">' hours.'</span>)\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> yehuda = App.Soldier.create({\n  name: <span class=\"hljs-string\">\"Yehuda Katz\"</span>\n});\n\nyehuda.say(<span class=\"hljs-string\">\"Yes\"</span>);  <span class=\"hljs-comment\">// alerts \"Yehuda Katz says: Yes, sir!\"</span></pre></td>      </tr>    </table>  </div></div><p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p>\n<p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' says: '</span> + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(thing)</span></span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' sings: la la la '</span> + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>) + <span class=\"hljs-string\">' dances: tap tap tap tap '</span>);\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#createWithMixins",
      "fields": [
        {
          "name": "name",
          "value": "createWithMixins",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Equivalent to doing <code>extend(arguments).create()</code>.\nIf possible use the normal <code>create</code> method instead.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#create",
      "fields": [
        {
          "name": "name",
          "value": "create",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hi, my name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name: <span class=\"hljs-string\">'Tom Dale'</span>\n});\n\ntom.helloWorld(); <span class=\"hljs-comment\">// alerts \"Hi, my name is Tom Dale\".</span></pre></td>      </tr>    </table>  </div></div><p><code>create</code> will call the <code>init</code> function if defined during\n<code>Ember.AnyObject.extend</code></p>\n<p>If no arguments are passed to <code>create</code>, it will not set values to the new\ninstance during initialization:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> noName = App.Person.create();\nnoName.helloWorld(); <span class=\"hljs-comment\">// alerts undefined</span></pre></td>      </tr>    </table>  </div></div><p>NOTE: For performance reasons, you cannot declare methods or computed\nproperties during <code>create</code>. You should instead declare methods and computed\nproperties when using <code>extend</code> or use the <code>createWithMixins</code> shorthand.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#reopen",
      "fields": [
        {
          "name": "name",
          "value": "reopen",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s prototype with additional\nproperties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\no = MyObject.create();\no.get(<span class=\"hljs-string\">'name'</span>); <span class=\"hljs-comment\">// 'an object'</span>\n\nMyObject.reopen({\n  say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    <span class=\"hljs-built_in\">console</span>.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// logs \"hello\"</span>\n\no.say(<span class=\"hljs-string\">\"goodbye\"</span>); <span class=\"hljs-comment\">// logs \"goodbye\"</span></pre></td>      </tr>    </table>  </div></div><p>To add functions and properties to the constructor itself,\nsee <code>reopenClass</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#reopenClass",
      "fields": [
        {
          "name": "name",
          "value": "reopenClass",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Augments a constructor&#39;s own properties and functions:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyObject = Ember.Object.extend({\n  name: <span class=\"hljs-string\">'an object'</span>\n});\n\nMyObject.reopenClass({\n  canBuild: <span class=\"hljs-literal\">false</span>\n});\n\nMyObject.canBuild; <span class=\"hljs-comment\">// false</span>\no = MyObject.create();</pre></td>      </tr>    </table>  </div></div><p>In other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.Person = Ember.Object.extend({\n  name : <span class=\"hljs-string\">\"\"</span>,\n  sayHello : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    alert(<span class=\"hljs-string\">\"Hello. My name is \"</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'name'</span>));\n  }\n});\n\nApp.Person.reopenClass({\n  species : <span class=\"hljs-string\">\"Homo sapiens\"</span>,\n  createPerson: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(newPersonsName)</span></span>{\n    <span class=\"hljs-keyword\">return</span> App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> tom = App.Person.create({\n  name : <span class=\"hljs-string\">\"Tom Dale\"</span>\n});\n<span class=\"hljs-keyword\">var</span> yehuda = App.Person.createPerson(<span class=\"hljs-string\">\"Yehuda Katz\"</span>);\n\ntom.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Tom Dale\"</span>\nyehuda.sayHello(); <span class=\"hljs-comment\">// \"Hello. My name is Yehuda Katz\"</span>\nalert(App.Person.species); <span class=\"hljs-comment\">// \"Homo sapiens\"</span></pre></td>      </tr>    </table>  </div></div><p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code>\nvariables. They are only valid on <code>App.Person</code>.</p>\n<p>To add functions and properties to instances of\na constructor by extending the constructor&#39;s prototype\nsee <code>reopen</code></p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#metaForProperty",
      "fields": [
        {
          "name": "name",
          "value": "metaForProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.</p>\n<p>You can pass a hash of these values to a computed property like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">var</span> personId = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'personId'</span>);\n  <span class=\"hljs-keyword\">return</span> App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })</pre></td>      </tr>    </table>  </div></div><p>Once you&#39;ve done this, you can retrieve the values saved to the computed\nproperty from your class like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">MyClass.metaForProperty(<span class=\"hljs-string\">'person'</span>);</pre></td>      </tr>    </table>  </div></div><p>This will return the original hash that was passed to <code>meta()</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#eachComputedProperty",
      "fields": [
        {
          "name": "name",
          "value": "eachComputedProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Iterate over each computed property for the class, passing its name\nand any associated metadata (see <code>metaForProperty</code>) to the callback.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#_onLookup",
      "fields": [
        {
          "name": "name",
          "value": "_onLookup",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Provides lookup-time type validation for injected properties.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#_lazyInjections",
      "fields": [
        {
          "name": "name",
          "value": "_lazyInjections",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#get",
      "fields": [
        {
          "name": "name",
          "value": "get",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fullName: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'firstName'</span>) + <span class=\"hljs-string\">' '</span> + <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'lastName'</span>);\n}.property(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>)</pre></td>      </tr>    </table>  </div></div><p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#getProperties",
      "fields": [
        {
          "name": "name",
          "value": "getProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div><p>is equivalent to:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.getProperties([<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'zipCode'</span>]);\n<span class=\"hljs-comment\">// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#set",
      "fields": [
        {
          "name": "name",
          "value": "set",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets the provided key or path to the value.</p>\n<p>This method is generally very similar to calling <code>object[key] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n<h3 id=\"chaining\">Chaining</h3>\n<p>In addition to property changes, <code>set()</code> returns the value of the object\nitself so you can do chaining like this:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.set(<span class=\"hljs-string\">'firstName'</span>, <span class=\"hljs-string\">'Charles'</span>).set(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Jolley'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#setProperties",
      "fields": [
        {
          "name": "name",
          "value": "setProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">record.setProperties({ firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Jolley'</span> });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#beginPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "beginPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#endPropertyChanges",
      "fields": [
        {
          "name": "name",
          "value": "endPropertyChanges",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#propertyWillChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyWillChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#propertyDidChange",
      "fields": [
        {
          "name": "name",
          "value": "propertyDidChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#notifyPropertyChange",
      "fields": [
        {
          "name": "name",
          "value": "notifyPropertyChange",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#addObserver",
      "fields": [
        {
          "name": "name",
          "value": "addObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&#39;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<p>You can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods you pass should generally have the following signature if\nyou do not pass a <code>context</code> parameter:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>The sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>If you pass a <code>context</code> parameter, the context will be passed before the\nrevision like so:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">fooDidChange: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(sender, key, value, context, rev)</span> </span>{ };</pre></td>      </tr>    </table>  </div></div><p>Usually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&#39;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#removeObserver",
      "fields": [
        {
          "name": "name",
          "value": "removeObserver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#hasObserverFor",
      "fields": [
        {
          "name": "name",
          "value": "hasObserverFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#getWithDefault",
      "fields": [
        {
          "name": "name",
          "value": "getWithDefault",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.getWithDefault(<span class=\"hljs-string\">'lastName'</span>, <span class=\"hljs-string\">'Doe'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#incrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "incrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">person.incrementProperty(<span class=\"hljs-string\">'age'</span>);\nteam.incrementProperty(<span class=\"hljs-string\">'score'</span>, <span class=\"hljs-number\">2</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#decrementProperty",
      "fields": [
        {
          "name": "name",
          "value": "decrementProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">player.decrementProperty(<span class=\"hljs-string\">'lives'</span>);\norc.decrementProperty(<span class=\"hljs-string\">'health'</span>, <span class=\"hljs-number\">5</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#toggleProperty",
      "fields": [
        {
          "name": "name",
          "value": "toggleProperty",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">starship.toggleProperty(<span class=\"hljs-string\">'warpDriveEngaged'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#cacheFor",
      "fields": [
        {
          "name": "name",
          "value": "cacheFor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#canCatalogEntriesByType",
      "fields": [
        {
          "name": "name",
          "value": "canCatalogEntriesByType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns true if it is possible to catalog a list of available\nclasses in the resolver for a given type.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#catalogEntriesByType",
      "fields": [
        {
          "name": "name",
          "value": "catalogEntriesByType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the available classes a given type.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#concatenatedProperties",
      "fields": [
        {
          "name": "name",
          "value": "concatenatedProperties",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&#39;s value by combining the superclass&#39; property\nvalue with the subclass&#39; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'bar'</span>],\n  classNames: [<span class=\"hljs-string\">'bar'</span>]\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'foo'</span>],\n  classNames: [<span class=\"hljs-string\">'foo'</span>]\n});\n\n<span class=\"hljs-keyword\">var</span> fooBarView = App.FooBarView.create();\nfooBarView.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['foo']</span>\nfooBarView.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo']</span></pre></td>      </tr>    </table>  </div></div><p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  someNonConcatenatedProperty: [<span class=\"hljs-string\">'baz'</span>],\n  classNames: [<span class=\"hljs-string\">'baz'</span>]\n})\nview.get(<span class=\"hljs-string\">'someNonConcatenatedProperty'</span>); <span class=\"hljs-comment\">// ['baz']</span>\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> view = App.FooBarView.create({\n  classNames: <span class=\"hljs-string\">'baz'</span>\n})\nview.get(<span class=\"hljs-string\">'classNames'</span>); <span class=\"hljs-comment\">// ['ember-view', 'bar', 'foo', 'baz']</span></pre></td>      </tr>    </table>  </div></div><p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties\nare also concatenated, in addition to <code>classNames</code>.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#isDestroyed",
      "fields": [
        {
          "name": "name",
          "value": "isDestroyed",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#isDestroying",
      "fields": [
        {
          "name": "name",
          "value": "isDestroying",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#container",
      "fields": [
        {
          "name": "name",
          "value": "container",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The container of the application being debugged.\nThis property will be injected\non creation.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.ContainerDebugAdapter#resolver",
      "fields": [
        {
          "name": "name",
          "value": "resolver",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The resolver instance of the application\nbeing debugged. This property will be injected\non creation.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.ContainerDebugAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter",
      "fields": [
        {
          "name": "name",
          "value": "Ember.DataAdapter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The <code>DataAdapter</code> helps a data persistence library\ninterface with tools that debug Ember such\nas the <a href=\"https://github.com/tildeio/ember-extension\">Ember Extension</a>\nfor Chrome and Firefox.</p>\n<p>This class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.</p>\n<p>The methods likely to be overridden are:</p>\n<ul>\n<li><code>getFilters</code></li>\n<li><code>detect</code></li>\n<li><code>columnsForType</code></li>\n<li><code>getRecords</code></li>\n<li><code>getRecordColumnValues</code></li>\n<li><code>getRecordKeywords</code></li>\n<li><code>getRecordFilterValues</code></li>\n<li><code>getRecordColor</code></li>\n<li><code>observeRecord</code></li>\n</ul>\n<p>The adapter will need to be registered\nin the application&#39;s container as <code>dataAdapter:main</code></p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">Application.initializer({\n  name: <span class=\"hljs-string\">\"data-adapter\"</span>,\n\n  initialize: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(container, application)</span> </span>{\n    application.register(<span class=\"hljs-string\">'data-adapter:main'</span>, DS.DataAdapter);\n  }\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getFilters",
      "fields": [
        {
          "name": "name",
          "value": "getFilters",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Specifies how records can be filtered.\nRecords returned will need to have a <code>filterValues</code>\nproperty with a key for every name in the returned array.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#watchModelTypes",
      "fields": [
        {
          "name": "name",
          "value": "watchModelTypes",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Fetch the model types and observe them for changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#watchRecords",
      "fields": [
        {
          "name": "name",
          "value": "watchRecords",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Fetch the records of a given type and observe them for changes.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#willDestroy",
      "fields": [
        {
          "name": "name",
          "value": "willDestroy",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Clear all observers before destruction</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#detect",
      "fields": [
        {
          "name": "name",
          "value": "detect",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Detect whether a class is a model.</p>\n<p>Test that against the model class\nof your persistence library</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#columnsForType",
      "fields": [
        {
          "name": "name",
          "value": "columnsForType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Get the columns for a given model type.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#observeModelType",
      "fields": [
        {
          "name": "name",
          "value": "observeModelType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Adds observers to a model type class.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#wrapModelType",
      "fields": [
        {
          "name": "name",
          "value": "wrapModelType",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Wraps a given model type and observes changes to it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getModelTypes",
      "fields": [
        {
          "name": "name",
          "value": "getModelTypes",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Fetches all models defined in the application.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#_getObjectsOnNamespaces",
      "fields": [
        {
          "name": "name",
          "value": "_getObjectsOnNamespaces",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Loops over all namespaces and all objects\nattached to them</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getRecords",
      "fields": [
        {
          "name": "name",
          "value": "getRecords",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Fetches all loaded records for a given type.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#wrapRecord",
      "fields": [
        {
          "name": "name",
          "value": "wrapRecord",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Wraps a record and observers changes to it.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getRecordColumnValues",
      "fields": [
        {
          "name": "name",
          "value": "getRecordColumnValues",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Gets the values for each column.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getRecordKeywords",
      "fields": [
        {
          "name": "name",
          "value": "getRecordKeywords",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns keywords to match when searching records.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getRecordFilterValues",
      "fields": [
        {
          "name": "name",
          "value": "getRecordFilterValues",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Returns the values of filters defined by <code>getFilters</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#getRecordColor",
      "fields": [
        {
          "name": "name",
          "value": "getRecordColor",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Each record can have a color that represents its state.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#observerRecord",
      "fields": [
        {
          "name": "name",
          "value": "observerRecord",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#container",
      "fields": [
        {
          "name": "name",
          "value": "container",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The container of the application being debugged.\nThis property will be injected\non creation.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#containerDebugAdapter",
      "fields": [
        {
          "name": "name",
          "value": "containerDebugAdapter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The container-debug-adapter which is used\nto list all models.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#attributeLimit",
      "fields": [
        {
          "name": "name",
          "value": "attributeLimit",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Number of attributes to send\nas columns. (Enough to make the record\nidentifiable).</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "Ember.DataAdapter#releaseMethods",
      "fields": [
        {
          "name": "name",
          "value": "releaseMethods",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Stores all methods that clear observers.\nThese methods will be called on destruction.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "property",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "Ember.DataAdapter",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP",
      "fields": [
        {
          "name": "name",
          "value": "RSVP",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "RSVP#all",
      "fields": [
        {
          "name": "name",
          "value": "all",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a convenient alias for <code>RSVP.Promise.all</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#race",
      "fields": [
        {
          "name": "name",
          "value": "race",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a convenient alias for <code>RSVP.Promise.race</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#reject",
      "fields": [
        {
          "name": "name",
          "value": "reject",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a convenient alias for <code>RSVP.Promise.reject</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#resolve",
      "fields": [
        {
          "name": "name",
          "value": "resolve",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>This is a convenient alias for <code>RSVP.Promise.resolve</code>.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#allSettled",
      "fields": [
        {
          "name": "name",
          "value": "allSettled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.allSettled</code> is similar to <code>RSVP.all</code>, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises&#39; failure states together as a set.</p>\n<p>Returns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the <code>promises</code> array argument.</p>\n<p>Each state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">{ state: <span class=\"hljs-string\">'fulfilled'</span>, value: value }\n  or\n{ state: <span class=\"hljs-string\">'rejected'</span>, reason: reason }</pre></td>      </tr>    </table>  </div></div><p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> promise1 = RSVP.Promise.resolve(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">var</span> promise2 = RSVP.Promise.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'2'</span>));\n<span class=\"hljs-keyword\">var</span> promise3 = RSVP.Promise.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'3'</span>));\n<span class=\"hljs-keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\nRSVP.allSettled(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(array)</span></span>{\n  <span class=\"hljs-comment\">// array == [</span>\n  <span class=\"hljs-comment\">//   { state: 'fulfilled', value: 1 },</span>\n  <span class=\"hljs-comment\">//   { state: 'rejected', reason: Error },</span>\n  <span class=\"hljs-comment\">//   { state: 'rejected', reason: Error }</span>\n  <span class=\"hljs-comment\">// ]</span>\n  <span class=\"hljs-comment\">// Note that for the second item, reason.message will be '2', and for the</span>\n  <span class=\"hljs-comment\">// third item, reason.message will be '3'.</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error)</span> </span>{\n  <span class=\"hljs-comment\">// Not run. (This block would only be called if allSettled had failed,</span>\n  <span class=\"hljs-comment\">// for instance if passed an incorrect argument type.)</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#defer",
      "fields": [
        {
          "name": "name",
          "value": "defer",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.defer</code> returns an object similar to jQuery&#39;s <code>$.Deferred</code>.\n<code>RSVP.defer</code> should be used when porting over code reliant on <code>$.Deferred</code>&#39;s\ninterface. New code should use the <code>RSVP.Promise</code> constructor instead.</p>\n<p>The object returned from <code>RSVP.defer</code> is a plain object with three properties:</p>\n<ul>\n<li>promise - an <code>RSVP.Promise</code>.</li>\n<li>reject - a function that causes the <code>promise</code> property on this object to\nbecome rejected</li>\n<li>resolve - a function that causes the <code>promise</code> property on this object to\nbecome fulfilled.</li>\n</ul>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> deferred = RSVP.defer();\n\n deferred.resolve(<span class=\"hljs-string\">\"Success!\"</span>);\n\n defered.promise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value)</span></span>{\n   <span class=\"hljs-comment\">// value here is \"Success!\"</span>\n });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#filter",
      "fields": [
        {
          "name": "name",
          "value": "filter",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.filter</code> is similar to JavaScript&#39;s native <code>filter</code> method, except that it\n waits for all promises to become fulfilled before running the <code>filterFn</code> on\n each item in given to <code>promises</code>. <code>RSVP.filter</code> returns a promise that will\n become fulfilled with the result of running <code>filterFn</code> on the values the\n promises become fulfilled with.</p>\n<p> For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">\n <span class=\"hljs-keyword\">var</span> promise1 = RSVP.resolve(<span class=\"hljs-number\">1</span>);\n <span class=\"hljs-keyword\">var</span> promise2 = RSVP.resolve(<span class=\"hljs-number\">2</span>);\n <span class=\"hljs-keyword\">var</span> promise3 = RSVP.resolve(<span class=\"hljs-number\">3</span>);\n\n <span class=\"hljs-keyword\">var</span> promises = [promise1, promise2, promise3];\n\n <span class=\"hljs-keyword\">var</span> filterFn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item)</span></span>{\n   <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">1</span>;\n };\n\n RSVP.filter(promises, filterFn).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result)</span></span>{\n   <span class=\"hljs-comment\">// result is [ 2, 3 ]</span>\n });</pre></td>      </tr>    </table>  </div></div><p> If any of the <code>promises</code> given to <code>RSVP.filter</code> are rejected, the first promise\n that is rejected will be given as an argument to the returned promise&#39;s\n rejection handler. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> promise1 = RSVP.resolve(<span class=\"hljs-number\">1</span>);\n <span class=\"hljs-keyword\">var</span> promise2 = RSVP.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'2'</span>));\n <span class=\"hljs-keyword\">var</span> promise3 = RSVP.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'3'</span>));\n <span class=\"hljs-keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\n <span class=\"hljs-keyword\">var</span> filterFn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item)</span></span>{\n   <span class=\"hljs-keyword\">return</span> item &gt; <span class=\"hljs-number\">1</span>;\n };\n\n RSVP.filter(promises, filterFn).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(array)</span></span>{\n   <span class=\"hljs-comment\">// Code here never runs because there are rejected promises!</span>\n }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n   <span class=\"hljs-comment\">// reason.message === '2'</span>\n });</pre></td>      </tr>    </table>  </div></div><p> <code>RSVP.filter</code> will also wait for any promises returned from <code>filterFn</code>.\n For instance, you may want to fetch a list of users then return a subset\n of those users based on some asynchronous operation:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">\n <span class=\"hljs-keyword\">var</span> alice = { name: <span class=\"hljs-string\">'alice'</span> };\n <span class=\"hljs-keyword\">var</span> bob   = { name: <span class=\"hljs-string\">'bob'</span> };\n <span class=\"hljs-keyword\">var</span> users = [ alice, bob ];\n\n <span class=\"hljs-keyword\">var</span> promises = users.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(user)</span></span>{\n   <span class=\"hljs-keyword\">return</span> RSVP.resolve(user);\n });\n\n <span class=\"hljs-keyword\">var</span> filterFn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(user)</span></span>{\n   <span class=\"hljs-comment\">// Here, Alice has permissions to create a blog post, but Bob does not.</span>\n   <span class=\"hljs-keyword\">return</span> getPrivilegesForUser(user).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(privs)</span></span>{\n     <span class=\"hljs-keyword\">return</span> privs.can_create_blog_post === <span class=\"hljs-literal\">true</span>;\n   });\n };\n RSVP.filter(promises, filterFn).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(users)</span></span>{\n   <span class=\"hljs-comment\">// true, because the server told us only Alice can create a blog post.</span>\n   users.length === <span class=\"hljs-number\">1</span>;\n   <span class=\"hljs-comment\">// false, because Alice is the only user present in `users`</span>\n   users[<span class=\"hljs-number\">0</span>] === bob;\n });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#hashSettled",
      "fields": [
        {
          "name": "name",
          "value": "hashSettled",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.hashSettled</code> is similar to <code>RSVP.allSettled</code>, but takes an object\ninstead of an array for its <code>promises</code> argument.</p>\n<p>Unlike <code>RSVP.all</code> or <code>RSVP.hash</code>, which implement a fail-fast method,\nbut like <code>RSVP.allSettled</code>, <code>hashSettled</code> waits until all the\nconstituent promises have returned and then shows you all the results\nwith their states and values/reasons. This is useful if you want to\nhandle multiple promises&#39; failure states together as a set.</p>\n<p>Returns a promise that is fulfilled when all the given promises have been\nsettled, or rejected if the passed parameters are invalid.</p>\n<p>The returned promise is fulfilled with a hash that has the same key names as\nthe <code>promises</code> object argument. If any of the values in the object are not\npromises, they will be copied over to the fulfilled object and marked with state\n&#39;fulfilled&#39;.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> promises = {\n  myPromise: RSVP.Promise.resolve(<span class=\"hljs-number\">1</span>),\n  yourPromise: RSVP.Promise.resolve(<span class=\"hljs-number\">2</span>),\n  theirPromise: RSVP.Promise.resolve(<span class=\"hljs-number\">3</span>),\n  notAPromise: <span class=\"hljs-number\">4</span>\n};\n\nRSVP.hashSettled(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hash)</span></span>{\n  <span class=\"hljs-comment\">// hash here is an object that looks like:</span>\n  <span class=\"hljs-comment\">// {</span>\n  <span class=\"hljs-comment\">//   myPromise: { state: 'fulfilled', value: 1 },</span>\n  <span class=\"hljs-comment\">//   yourPromise: { state: 'fulfilled', value: 2 },</span>\n  <span class=\"hljs-comment\">//   theirPromise: { state: 'fulfilled', value: 3 },</span>\n  <span class=\"hljs-comment\">//   notAPromise: { state: 'fulfilled', value: 4 }</span>\n  <span class=\"hljs-comment\">// }</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If any of the <code>promises</code> given to <code>RSVP.hash</code> are rejected, the state will\nbe set to &#39;rejected&#39; and the reason for rejection provided.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> promises = {\n  myPromise: RSVP.Promise.resolve(<span class=\"hljs-number\">1</span>),\n  rejectedPromise: RSVP.Promise.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'rejection'</span>)),\n  anotherRejectedPromise: RSVP.Promise.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'more rejection'</span>)),\n};\n\nRSVP.hashSettled(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hash)</span></span>{\n  <span class=\"hljs-comment\">// hash here is an object that looks like:</span>\n  <span class=\"hljs-comment\">// {</span>\n  <span class=\"hljs-comment\">//   myPromise:              { state: 'fulfilled', value: 1 },</span>\n  <span class=\"hljs-comment\">//   rejectedPromise:        { state: 'rejected', reason: Error },</span>\n  <span class=\"hljs-comment\">//   anotherRejectedPromise: { state: 'rejected', reason: Error },</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">// Note that for rejectedPromise, reason.message == 'rejection',</span>\n  <span class=\"hljs-comment\">// and for anotherRejectedPromise, reason.message == 'more rejection'.</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An important note: <code>RSVP.hashSettled</code> is intended for plain JavaScript objects that\nare just a set of keys and values. <code>RSVP.hashSettled</code> will NOT preserve prototype\nchains.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyConstructor</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-keyword\">this</span>.example = RSVP.Promise.resolve(<span class=\"hljs-string\">'Example'</span>);\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.Promise.resolve(<span class=\"hljs-string\">'Proto Property'</span>)\n};\n\n<span class=\"hljs-keyword\">var</span> myObject = <span class=\"hljs-keyword\">new</span> MyConstructor();\n\nRSVP.hashSettled(myObject).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hash)</span></span>{\n  <span class=\"hljs-comment\">// protoProperty will not be present, instead you will just have an</span>\n  <span class=\"hljs-comment\">// object that looks like:</span>\n  <span class=\"hljs-comment\">// {</span>\n  <span class=\"hljs-comment\">//   example: { state: 'fulfilled', value: 'Example' }</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">//</span>\n  <span class=\"hljs-comment\">// hash.hasOwnProperty('protoProperty'); // false</span>\n  <span class=\"hljs-comment\">// 'undefined' === typeof hash.protoProperty</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#hash",
      "fields": [
        {
          "name": "name",
          "value": "hash",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.hash</code> is similar to <code>RSVP.all</code>, but takes an object instead of an array\nfor its <code>promises</code> argument.</p>\n<p>Returns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the <code>promises</code> object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> promises = {\n  myPromise: RSVP.resolve(<span class=\"hljs-number\">1</span>),\n  yourPromise: RSVP.resolve(<span class=\"hljs-number\">2</span>),\n  theirPromise: RSVP.resolve(<span class=\"hljs-number\">3</span>),\n  notAPromise: <span class=\"hljs-number\">4</span>\n};\n\nRSVP.hash(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hash)</span></span>{\n  <span class=\"hljs-comment\">// hash here is an object that looks like:</span>\n  <span class=\"hljs-comment\">// {</span>\n  <span class=\"hljs-comment\">//   myPromise: 1,</span>\n  <span class=\"hljs-comment\">//   yourPromise: 2,</span>\n  <span class=\"hljs-comment\">//   theirPromise: 3,</span>\n  <span class=\"hljs-comment\">//   notAPromise: 4</span>\n  <span class=\"hljs-comment\">// }</span>\n});\n<span class=\"hljs-string\">`</span></pre></td>      </tr>    </table>  </div></div><p>If any of the <code>promises</code> given to <code>RSVP.hash</code> are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> promises = {\n  myPromise: RSVP.resolve(<span class=\"hljs-number\">1</span>),\n  rejectedPromise: RSVP.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'rejectedPromise'</span>)),\n  anotherRejectedPromise: RSVP.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'anotherRejectedPromise'</span>)),\n};\n\nRSVP.hash(promises).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hash)</span></span>{\n  <span class=\"hljs-comment\">// Code here never runs because there are rejected promises!</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// reason.message === 'rejectedPromise'</span>\n});</pre></td>      </tr>    </table>  </div></div><p>An important note: <code>RSVP.hash</code> is intended for plain JavaScript objects that\nare just a set of keys and values. <code>RSVP.hash</code> will NOT preserve prototype\nchains.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyConstructor</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-keyword\">this</span>.example = RSVP.resolve(<span class=\"hljs-string\">'Example'</span>);\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.resolve(<span class=\"hljs-string\">'Proto Property'</span>)\n};\n\n<span class=\"hljs-keyword\">var</span> myObject = <span class=\"hljs-keyword\">new</span> MyConstructor();\n\nRSVP.hash(myObject).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(hash)</span></span>{\n  <span class=\"hljs-comment\">// protoProperty will not be present, instead you will just have an</span>\n  <span class=\"hljs-comment\">// object that looks like:</span>\n  <span class=\"hljs-comment\">// {</span>\n  <span class=\"hljs-comment\">//   example: 'Example'</span>\n  <span class=\"hljs-comment\">// }</span>\n  <span class=\"hljs-comment\">//</span>\n  <span class=\"hljs-comment\">// hash.hasOwnProperty('protoProperty'); // false</span>\n  <span class=\"hljs-comment\">// 'undefined' === typeof hash.protoProperty</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#map",
      "fields": [
        {
          "name": "name",
          "value": "map",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.map</code> is similar to JavaScript&#39;s native <code>map</code> method, except that it\n waits for all promises to become fulfilled before running the <code>mapFn</code> on\n each item in given to <code>promises</code>. <code>RSVP.map</code> returns a promise that will\n become fulfilled with the result of running <code>mapFn</code> on the values the promises\n become fulfilled with.</p>\n<p> For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">\n <span class=\"hljs-keyword\">var</span> promise1 = RSVP.resolve(<span class=\"hljs-number\">1</span>);\n <span class=\"hljs-keyword\">var</span> promise2 = RSVP.resolve(<span class=\"hljs-number\">2</span>);\n <span class=\"hljs-keyword\">var</span> promise3 = RSVP.resolve(<span class=\"hljs-number\">3</span>);\n <span class=\"hljs-keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\n <span class=\"hljs-keyword\">var</span> mapFn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item)</span></span>{\n   <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>;\n };\n\n RSVP.map(promises, mapFn).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result)</span></span>{\n   <span class=\"hljs-comment\">// result is [ 2, 3, 4 ]</span>\n });</pre></td>      </tr>    </table>  </div></div><p> If any of the <code>promises</code> given to <code>RSVP.map</code> are rejected, the first promise\n that is rejected will be given as an argument to the returned promise&#39;s\n rejection handler. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"> <span class=\"hljs-keyword\">var</span> promise1 = RSVP.resolve(<span class=\"hljs-number\">1</span>);\n <span class=\"hljs-keyword\">var</span> promise2 = RSVP.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'2'</span>));\n <span class=\"hljs-keyword\">var</span> promise3 = RSVP.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'3'</span>));\n <span class=\"hljs-keyword\">var</span> promises = [ promise1, promise2, promise3 ];\n\n <span class=\"hljs-keyword\">var</span> mapFn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item)</span></span>{\n   <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>;\n };\n\n RSVP.map(promises, mapFn).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(array)</span></span>{\n   <span class=\"hljs-comment\">// Code here never runs because there are rejected promises!</span>\n }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n   <span class=\"hljs-comment\">// reason.message === '2'</span>\n });</pre></td>      </tr>    </table>  </div></div><p> <code>RSVP.map</code> will also wait if a promise is returned from <code>mapFn</code>. For example,\n say you want to get all comments from a set of blog posts, but you need\n the blog posts first because they contain a url to those comments.</p>\n<div class=\"highlight javscript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"javscript\">\n var mapFn = function(blogPost){\n   // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n   // with some comments data\n   return getComments(blogPost.comments_url);\n };\n\n // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n // with some blog post data\n RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n   // comments is the result of asking the server for the comments\n   // of all blog posts returned from getBlogPosts()\n });</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#denodeify",
      "fields": [
        {
          "name": "name",
          "value": "denodeify",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.denodeify</code> takes a &#39;node-style&#39; function and returns a function that\nwill return an <code>RSVP.Promise</code>. You can use <code>denodeify</code> in Node.js or the\nbrowser when you&#39;d prefer to use promises over using callbacks. For example,\n<code>denodeify</code> transforms the following:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n\nfs.readFile(<span class=\"hljs-string\">'myfile.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err, data)</span></span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> handleError(err);\n  handleData(data);\n});</pre></td>      </tr>    </table>  </div></div><p>into:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">var</span> readFile = RSVP.denodeify(fs.readFile);\n\nreadFile(<span class=\"hljs-string\">'myfile.txt'</span>).then(handleData, handleError);</pre></td>      </tr>    </table>  </div></div><p>If the node function has multiple success parameters, then <code>denodeify</code>\njust returns the first one:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> request = RSVP.denodeify(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>));\n\nrequest(<span class=\"hljs-string\">'http://example.com'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(res)</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n});</pre></td>      </tr>    </table>  </div></div><p>However, if you need all success parameters, setting <code>denodeify</code>&#39;s\nsecond parameter to <code>true</code> causes it to return all success parameters\nas an array:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> request = RSVP.denodeify(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>), <span class=\"hljs-literal\">true</span>);\n\nrequest(<span class=\"hljs-string\">'http://example.com'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result)</span> </span>{\n  <span class=\"hljs-comment\">// result[0] -&gt; res</span>\n  <span class=\"hljs-comment\">// result[1] -&gt; body</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Or if you pass it an array with names it returns the parameters as a hash:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> request = RSVP.denodeify(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>), [<span class=\"hljs-string\">'res'</span>, <span class=\"hljs-string\">'body'</span>]);\n\nrequest(<span class=\"hljs-string\">'http://example.com'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result)</span> </span>{\n  <span class=\"hljs-comment\">// result.res</span>\n  <span class=\"hljs-comment\">// result.body</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Sometimes you need to retain the <code>this</code>:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)();\n<span class=\"hljs-keyword\">var</span> render = RSVP.denodeify(app.render.bind(app));</pre></td>      </tr>    </table>  </div></div><p>The denodified function inherits from the original function. It works in all\nenvironments, except IE 10 and below. Consequently all properties of the original\nfunction are available to you. However, any properties you change on the\ndenodeified function won&#39;t be changed on the original function. Example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> request = RSVP.denodeify(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>)),\n    cookieJar = request.jar(); <span class=\"hljs-comment\">// &lt;- Inheritance is used here</span>\n\nrequest(<span class=\"hljs-string\">'http://example.com'</span>, {jar: cookieJar}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(res)</span> </span>{\n  <span class=\"hljs-comment\">// cookieJar.cookies holds now the cookies returned by example.com</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Using <code>denodeify</code> makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n\nfs.readFile(<span class=\"hljs-string\">'myfile.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err, data)</span></span>{\n  <span class=\"hljs-keyword\">if</span> (err) { ... } <span class=\"hljs-comment\">// Handle error</span>\n  fs.writeFile(<span class=\"hljs-string\">'myfile2.txt'</span>, data, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err)</span></span>{\n    <span class=\"hljs-keyword\">if</span> (err) { ... } <span class=\"hljs-comment\">// Handle error</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'done'</span>)\n  });\n});</pre></td>      </tr>    </table>  </div></div><p>you can chain the operations together using <code>then</code> from the returned promise:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">var</span> readFile = RSVP.denodeify(fs.readFile);\n<span class=\"hljs-keyword\">var</span> writeFile = RSVP.denodeify(fs.writeFile);\n\nreadFile(<span class=\"hljs-string\">'myfile.txt'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data)</span></span>{\n  <span class=\"hljs-keyword\">return</span> writeFile(<span class=\"hljs-string\">'myfile2.txt'</span>, data);\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'done'</span>)\n}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(error)</span></span>{\n  <span class=\"hljs-comment\">// Handle error</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP#rethrow",
      "fields": [
        {
          "name": "name",
          "value": "rethrow",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.rethrow</code> will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.</p>\n<p>Promises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to <code>then</code>. However, <code>RSVP.rethrow</code> will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. <code>rethrow</code> will also throw the\nerror again so the error can be handled by the promise per the spec.</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">throws</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Whoops!'</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> RSVP.Promise(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(resolve, reject)</span></span>{\n  throws();\n});\n\npromise.catch(RSVP.rethrow).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-comment\">// Code here doesn't run because the promise became rejected due to an</span>\n  <span class=\"hljs-comment\">// error!</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span></span>{\n  <span class=\"hljs-comment\">// handle the error here</span>\n});</pre></td>      </tr>    </table>  </div></div><p>The &#39;Whoops&#39; error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to <code>.then</code> or <code>.catch</code> on the returned promise.</p>\n",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.EventTarget",
      "fields": [
        {
          "name": "name",
          "value": "RSVP.EventTarget",
          "type": "string"
        },
        {
          "name": "description",
          "value": "",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "RSVP.EventTarget#mixin",
      "fields": [
        {
          "name": "name",
          "value": "mixin",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>RSVP.EventTarget.mixin</code> extends an object with EventTarget methods. For\nExample:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> object = {};\n\nRSVP.EventTarget.mixin(object);\n\nobject.on(<span class=\"hljs-string\">'finished'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n  <span class=\"hljs-comment\">// handle event</span>\n});\n\nobject.trigger(<span class=\"hljs-string\">'finished'</span>, { detail: value });</pre></td>      </tr>    </table>  </div></div><p><code>EventTarget.mixin</code> also works with prototypes:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> Person = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{};\nRSVP.EventTarget.mixin(Person.prototype);\n\n<span class=\"hljs-keyword\">var</span> yehuda = <span class=\"hljs-keyword\">new</span> Person();\n<span class=\"hljs-keyword\">var</span> tom = <span class=\"hljs-keyword\">new</span> Person();\n\nyehuda.on(<span class=\"hljs-string\">'poke'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Yehuda says OW'</span>);\n});\n\ntom.on(<span class=\"hljs-string\">'poke'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Tom says OW'</span>);\n});\n\nyehuda.trigger(<span class=\"hljs-string\">'poke'</span>);\ntom.trigger(<span class=\"hljs-string\">'poke'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.EventTarget",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.EventTarget#on",
      "fields": [
        {
          "name": "name",
          "value": "on",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Registers a callback to be executed when <code>eventName</code> is triggered</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">object.on(<span class=\"hljs-string\">'event'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(eventInfo)</span></span>{\n  <span class=\"hljs-comment\">// handle the event</span>\n});\n\nobject.trigger(<span class=\"hljs-string\">'event'</span>);</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.EventTarget",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.EventTarget#off",
      "fields": [
        {
          "name": "name",
          "value": "off",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>You can use <code>off</code> to stop firing a particular callback for an event:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doStuff</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-comment\">// do stuff! }</span>\nobject.on(<span class=\"hljs-string\">'stuff'</span>, doStuff);\n\nobject.trigger(<span class=\"hljs-string\">'stuff'</span>); <span class=\"hljs-comment\">// doStuff will be called</span>\n\n<span class=\"hljs-comment\">// Unregister ONLY the doStuff callback</span>\nobject.off(<span class=\"hljs-string\">'stuff'</span>, doStuff);\nobject.trigger(<span class=\"hljs-string\">'stuff'</span>); <span class=\"hljs-comment\">// doStuff will NOT be called</span></pre></td>      </tr>    </table>  </div></div><p>If you don&#39;t pass a <code>callback</code> argument to <code>off</code>, ALL callbacks for the\nevent will not be executed when the event fires. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> callback1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n<span class=\"hljs-keyword\">var</span> callback2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{};\n\nobject.on(<span class=\"hljs-string\">'stuff'</span>, callback1);\nobject.on(<span class=\"hljs-string\">'stuff'</span>, callback2);\n\nobject.trigger(<span class=\"hljs-string\">'stuff'</span>); <span class=\"hljs-comment\">// callback1 and callback2 will be executed.</span>\n\nobject.off(<span class=\"hljs-string\">'stuff'</span>);\nobject.trigger(<span class=\"hljs-string\">'stuff'</span>); <span class=\"hljs-comment\">// callback1 and callback2 will not be executed!</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.EventTarget",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.EventTarget#trigger",
      "fields": [
        {
          "name": "name",
          "value": "trigger",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Use <code>trigger</code> to fire custom events. For example:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">object.on(<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo event happened!'</span>);\n});\nobject.trigger(<span class=\"hljs-string\">'foo'</span>);\n<span class=\"hljs-comment\">// 'foo event happened!' logged to the console</span></pre></td>      </tr>    </table>  </div></div><p>You can also pass a value as a second argument to <code>trigger</code> that will be\npassed as an argument to all event listeners for the event:</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">object.on(<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value)</span></span>{\n  <span class=\"hljs-built_in\">console</span>.log(value.name);\n});\n\nobject.trigger(<span class=\"hljs-string\">'foo'</span>, { name: <span class=\"hljs-string\">'bar'</span> });\n<span class=\"hljs-comment\">// 'bar' logged to the console</span></pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.EventTarget",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.Promise",
      "fields": [
        {
          "name": "name",
          "value": "RSVP.Promise",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its <code>then</code> method, which\nregisters callbacks to receive either a promise’s eventual value or the reason\nwhy the promise cannot be fulfilled.</p>\n<h2 id=\"terminology\">Terminology</h2>\n<ul>\n<li><code>promise</code> is an object or function with a <code>then</code> method whose behavior conforms to this specification.</li>\n<li><code>thenable</code> is an object or function that defines a <code>then</code> method.</li>\n<li><code>value</code> is any legal JavaScript value (including undefined, a thenable, or a promise).</li>\n<li><code>exception</code> is a value that is thrown using the throw statement.</li>\n<li><code>reason</code> is a value that indicates why a promise was rejected.</li>\n<li><code>settled</code> the final resting state of a promise, fulfilled or rejected.</li>\n</ul>\n<p>A promise can be in one of three states: pending, fulfilled, or rejected.</p>\n<p>Promises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.</p>\n<p>Promises can also be said to <em>resolve</em> a value.  If this value is also a\npromise, then the original promise&#39;s settled state will match the value&#39;s\nsettled state.  So a promise that <em>resolves</em> a promise that rejects will\nitself reject, and a promise that <em>resolves</em> a promise that fulfills will\nitself fulfill.</p>\n<h2 id=\"basic-usage-\">Basic Usage:</h2>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(resolve, reject)</span> </span>{\n  <span class=\"hljs-comment\">// on success</span>\n  resolve(value);\n\n  <span class=\"hljs-comment\">// on failure</span>\n  reject(reason);\n});\n\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(value)</span> </span>{\n  <span class=\"hljs-comment\">// on fulfillment</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// on rejection</span>\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"advanced-usage-\">Advanced Usage:</h2>\n<p>Promises shine when abstracting away asynchronous interactions such as\n<code>XMLHttpRequest</code>s.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getJSON</span><span class=\"hljs-params\">(url)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(resolve, reject)</span></span>{\n    <span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n\n    xhr.open(<span class=\"hljs-string\">'GET'</span>, url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = <span class=\"hljs-string\">'json'</span>;\n    xhr.setRequestHeader(<span class=\"hljs-string\">'Accept'</span>, <span class=\"hljs-string\">'application/json'</span>);\n    xhr.send();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.readyState === <span class=\"hljs-keyword\">this</span>.DONE) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.status === <span class=\"hljs-number\">200</span>) {\n          resolve(<span class=\"hljs-keyword\">this</span>.response);\n        } <span class=\"hljs-keyword\">else</span> {\n          reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'getJSON: `'</span> + url + <span class=\"hljs-string\">'` failed with status: ['</span> + <span class=\"hljs-keyword\">this</span>.status + <span class=\"hljs-string\">']'</span>));\n        }\n      }\n    };\n  });\n}\n\ngetJSON(<span class=\"hljs-string\">'/posts.json'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(json)</span> </span>{\n  <span class=\"hljs-comment\">// on fulfillment</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// on rejection</span>\n});</pre></td>      </tr>    </table>  </div></div><p>Unlike callbacks, promises are great composable primitives.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\"><span class=\"hljs-built_in\">Promise</span>.all([\n  getJSON(<span class=\"hljs-string\">'/posts'</span>),\n  getJSON(<span class=\"hljs-string\">'/comments'</span>)\n]).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(values)</span></span>{\n  values[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// =&gt; postsJSON</span>\n  values[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// =&gt; commentsJSON</span>\n\n  <span class=\"hljs-keyword\">return</span> values;\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        }
      ]
    },
    {
      "external_id": "RSVP.Promise#then",
      "fields": [
        {
          "name": "name",
          "value": "then",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p>The primary way of interacting with a promise is through its <code>then</code> method,\nwhich registers callbacks to receive either a promise&#39;s eventual value or the\nreason why the promise cannot be fulfilled.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findUser().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(user)</span></span>{\n  <span class=\"hljs-comment\">// user is available</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span></span>{\n  <span class=\"hljs-comment\">// user is unavailable, and you are given the reason why</span>\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"chaining\">Chaining</h2>\n<p>The return value of <code>then</code> is itself a promise.  This second, &#39;downstream&#39;\npromise is resolved with the return value of the first promise&#39;s fulfillment\nor rejection handler, or rejected if the handler throws an exception.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return 'default name';\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `'default name'`\n});\n\nfindUser().then(function (user) {\n  throw new Error('Found user, but still unhappy');\n}, function (reason) {\n  throw new Error('`findUser` rejected and we're unhappy');\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n  // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n});</pre></td>      </tr>    </table>  </div></div><p>If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findUser().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(user)</span> </span>{\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> PedagogicalException(<span class=\"hljs-string\">'Upstream error'</span>);\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(value)</span> </span>{\n  <span class=\"hljs-comment\">// never reached</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(value)</span> </span>{\n  <span class=\"hljs-comment\">// never reached</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// The `PedgagocialException` is propagated all the way down to here</span>\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"assimilation\">Assimilation</h2>\n<p>Sometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called <em>assimilation</em>.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findUser().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(user)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> findCommentsByAuthor(user);\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(comments)</span> </span>{\n  <span class=\"hljs-comment\">// The user's comments are now available</span>\n});</pre></td>      </tr>    </table>  </div></div><p>If the assimliated promise rejects, then the downstream promise will also reject.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findUser().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(user)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> findCommentsByAuthor(user);\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(comments)</span> </span>{\n  <span class=\"hljs-comment\">// If `findCommentsByAuthor` fulfills, we'll have the value here</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(reason)</span> </span>{\n  <span class=\"hljs-comment\">// If `findCommentsByAuthor` rejects, we'll have the reason here</span>\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"simple-example\">Simple Example</h2>\n<p>Synchronous Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> result;\n\n<span class=\"hljs-keyword\">try</span> {\n  result = findResult();\n  <span class=\"hljs-comment\">// success</span>\n} <span class=\"hljs-keyword\">catch</span>(reason) {\n  <span class=\"hljs-comment\">// failure</span>\n}</pre></td>      </tr>    </table>  </div></div><p>Errback Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findResult(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result, err)</span></span>{\n  <span class=\"hljs-keyword\">if</span> (err) {\n    <span class=\"hljs-comment\">// failure</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// success</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Promise Example;</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">findResult().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(result)</span></span>{\n  <span class=\"hljs-comment\">// success</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span></span>{\n  <span class=\"hljs-comment\">// failure</span>\n});</pre></td>      </tr>    </table>  </div></div><h2 id=\"advanced-example\">Advanced Example</h2>\n<p>Synchronous Example</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\"><span class=\"hljs-keyword\">var</span> author, books;\n\n<span class=\"hljs-keyword\">try</span> {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  <span class=\"hljs-comment\">// success</span>\n} <span class=\"hljs-keyword\">catch</span>(reason) {\n  <span class=\"hljs-comment\">// failure</span>\n}</pre></td>      </tr>    </table>  </div></div><p>Errback Example</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foundBooks</span><span class=\"hljs-params\">(books)</span> </span>{\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">failure</span><span class=\"hljs-params\">(reason)</span> </span>{\n\n}\n\nfindAuthor(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(author, err)</span></span>{\n  <span class=\"hljs-keyword\">if</span> (err) {\n    failure(err);\n    <span class=\"hljs-comment\">// failure</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">try</span> {\n      findBoooksByAuthor(author, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(books, err)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (err) {\n          failure(err);\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">try</span> {\n            foundBooks(books);\n          } <span class=\"hljs-keyword\">catch</span>(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } <span class=\"hljs-keyword\">catch</span>(error) {\n      failure(err);\n    }\n    <span class=\"hljs-comment\">// success</span>\n  }\n});</pre></td>      </tr>    </table>  </div></div><p>Promise Example;</p>\n<div class=\"highlight javascript\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n</pre>        </td>        <td class=\"code\"><pre class=\"javascript\">findAuthor().\n  then(findBooksByAuthor).\n  then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(books)</span></span>{\n    <span class=\"hljs-comment\">// found books</span>\n}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span></span>{\n  <span class=\"hljs-comment\">// something went wrong</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.Promise",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.Promise#catch",
      "fields": [
        {
          "name": "name",
          "value": "catch",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>catch</code> is simply sugar for <code>then(undefined, onRejection)</code> which makes it the same\nas the catch block of a try/catch statement.</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">function findAuthor(){\n  throw new Error('couldn't find that author');\n}\n\n// synchronous\ntry {\n  findAuthor();\n} catch(reason) {\n  // something went wrong\n}\n\n// async with promises\nfindAuthor().catch(function(reason){\n  // something went wrong\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.Promise",
          "type": "string"
        }
      ]
    },
    {
      "external_id": "RSVP.Promise#finally",
      "fields": [
        {
          "name": "name",
          "value": "finally",
          "type": "string"
        },
        {
          "name": "description",
          "value": "<p><code>finally</code> will be invoked regardless of the promise&#39;s fate just as native\ntry/catch/finally behaves</p>\n<p>Synchronous example:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findAuthor() {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Author();\n}\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">return</span> findAuthor(); <span class=\"hljs-comment\">// succeed or fail</span>\n} <span class=\"hljs-keyword\">catch</span>(error) {\n  <span class=\"hljs-keyword\">return</span> findOtherAuther();\n} <span class=\"hljs-keyword\">finally</span> {\n  <span class=\"hljs-comment\">// always runs</span>\n  <span class=\"hljs-comment\">// doesn't affect the return value</span>\n}</pre></td>      </tr>    </table>  </div></div><p>Asynchronous example:</p>\n<div class=\"highlight js\">  <div class=\"ribbon\"></div>  <div class=\"scroller\">    <table class=\"CodeRay\">      <tr>        <td class=\"line-numbers\">          <pre>1\n2\n3\n4\n5\n</pre>        </td>        <td class=\"code\"><pre class=\"js\">findAuthor().catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(reason)</span></span>{\n  <span class=\"hljs-keyword\">return</span> findOtherAuther();\n}).finally(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-comment\">// author was either found, or not</span>\n});</pre></td>      </tr>    </table>  </div></div>",
          "type": "text"
        },
        {
          "name": "itemtype",
          "value": "method",
          "type": "enum"
        },
        {
          "name": "class",
          "value": "RSVP.Promise",
          "type": "string"
        }
      ]
    }
  ]
}